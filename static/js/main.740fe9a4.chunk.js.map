{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","lib/volumetric-spotlight.js","components/LightGlobe/Light/VolumetricSpotlight.js","components/LightGlobe/Light/Light.js","lib/index.js","components/LightGlobe/Light/EightSeriesHeadlightManager.js","components/LightGlobe/LightGlobe.js","index.js"],"names":["className","rel","href","target","intensity","position","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","THREE","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","transparent","depthWrite","extend","VolumetricSpotlight","MyVolumetricSpotlight","React","forwardRef","props","ref","vs","useRef","spotlight","scene","useThree","angle","penumbra","distance","color","useEffect","add","current","geometry","applyMatrix4","makeTranslation","parameters","height","makeRotationX","Math","PI","material","copy","useFrame","clock","targetPos","getWorldPosition","lookAt","x","setRef","useCallback","el","scale","set","args","attach","uniforms-lightColor-value","uniforms-attenuation-value","uniforms-anglePower-value","Light","name","mesh","spotlightTarget","time","useState","isActive","isActiveRef","y","sin","includes","sphericalCoordsToCartesian","radius","inclination","azimuth","cos","z","latlngToSphericalCoords","lat","lng","abs","EightSeriesHeadlightManager","positions","imgRef","cubeMap","setCubeMap","nodes","useLoader","GLTFLoader","process","draco","refs","map","createRef","onload","inputWidth","naturalWidth","inputHeight","naturalHeight","inputImageAspectRatio","outputWidth","outputHeight","outputImage","document","createElement","width","getContext","drawImage","CubeTexture","wrapS","RepeatWrapping","wrapT","needsUpdate","setTimeout","src","random","r","rotateY","meshObjects","p","i","key","visible","roughness","envMap","envMapIntensity","metalness","opacity","transmission","clearcoat","emissive","alt","style","display","crossOrigin","LightGlobe","group","rotation","differenceInSeconds","Date","startOfDay","cities","lights","coords","inc","azm","spotlightTargetPosition","fallback","App","Credits","colorManagement","shadowMap","background","Lights","enablePan","zoomSpeed","factor","saturation","rootElement","getElementById","ReactDOM","render"],"mappings":"8pNAEe,aACb,OACE,yBAAKA,UAAU,WACb,uBACEC,IAAI,sBACJC,KAAK,8DACLC,OAAO,UAHT,oBAOA,6BACA,uBACEF,IAAI,sBACJC,KAAK,8DACLC,OAAO,UAHT,wB,OCXS,aACb,OACE,+BACE,kCAAcC,UAAW,KACzB,sCACEA,UAAW,EACXC,SAAU,EAAE,EAAG,EAAG,O,cCoFXC,EArFqB,WAElC,IAAIC,EAAe,CACjB,wBACA,+BAEA,eACA,uBACA,mDAEA,6DACA,yCAEA,qBACA,6EACA,KACAC,KAAK,MACHC,EAAiB,CACnB,2BACA,kCAEA,8BAEA,gCAEA,gCACA,+BAEA,eACA,mBAKA,mEACA,iDAKA,6DACA,+EACA,2CAQA,gDACA,KACAD,KAAK,MA8BP,OA1Be,IAAIE,iBAAqB,CACtCC,SAAU,CACRC,YAAa,CACXC,KAAM,IACNC,MAAO,GAETC,WAAY,CACVF,KAAM,IACNC,MAAO,KAETE,aAAc,CACZH,KAAM,KACNC,MAAO,IAAIJ,UAAc,EAAG,EAAG,IAEjCO,WAAY,CACVJ,KAAM,IACNC,MAAO,IAAIJ,QAAY,UAG3BH,aAAcA,EACdE,eAAgBA,EAGhBS,aAAa,EACbC,YAAY,KC/EhBC,YAAO,CACLC,wBAGK,IAAMC,EAAwBC,IAAMC,YAAW,SAA+BC,EAAOC,GAC1F,IAAMC,EAAKJ,IAAMK,SACXC,EAAYN,IAAMK,SAEhBE,EAAUC,cAAVD,MAJuF,EAc3FL,EAPFO,aAP6F,MAOrF,IAPqF,IAc3FP,EANFQ,gBAR6F,MAQlF,GARkF,IAc3FR,EALFS,gBAT6F,MASlF,EATkF,EAU7FC,EAIEV,EAJFU,MACA/B,EAGEqB,EAHFrB,UACAC,EAEEoB,EAFFpB,SACAF,EACEsB,EADFtB,OAIFiC,qBAAU,WACRN,EAAMO,IAAIR,EAAUS,QAAQnC,QAE5B,IAAMoC,EAAWZ,EAAGW,QAAQC,SAE5BA,EAASC,cACP,IAAI9B,WAAgB+B,gBAAgB,GAAIF,EAASG,WAAWC,OAAS,EAAG,IAE1EJ,EAASC,cAAa,IAAI9B,WAAgBkC,eAAeC,KAAKC,GAAK,IAEnEnB,EAAGW,QAAQS,SAASpC,SAASK,aAAaF,MAAQa,EAAGW,QAAQjC,SAE7DwB,EAAUS,QAAQjC,SAAS2C,KAAKrB,EAAGW,QAAQjC,YAC1C,CAACyB,EAAOK,EAAO9B,IAElB4C,aAAS,YAAe,EAAZC,MAMV,GALArB,EAAUS,QAAQjC,SAAS2C,KAAKrB,EAAGW,QAAQjC,UAE3CsB,EAAGW,QAAQS,SAASpC,SAASM,WAAWH,MAAQe,EAAUS,QAAQH,MAG9DhC,GAAUA,EAAOmC,QAAS,CAC5B,IAAMa,EAAY,IAAIzC,UACtBP,EAAOmC,QAAQc,iBAAiBD,GAChCxB,EAAGW,QAAQe,OAAOF,GACbA,EAAUG,EAAI,IACjB3B,EAAGW,QAAQS,SAASpC,SAASM,WAAWH,MAAQ,IAAIJ,QAAY,WAElEmB,EAAUS,QAAQnC,OAAOE,SAAS2C,KAAKG,OAI3C,IAAMI,EAAShC,IAAMiC,aAAY,SAAgBC,GAC/C9B,EAAGW,QAAUmB,EAET/B,IACFA,EAAIY,QAAUmB,KAEf,CAAC/B,IAWJ,OANAuB,aAAS,WACP,IAAMjB,EAAQH,EAAUS,QAAQN,MAEhCL,EAAGW,QAAQoB,MAAMC,IAAI,EAAI3B,EAAO,EAAIA,EAAO,MAI3C,oCACE,+BACEN,IAAKG,EACLzB,UAAWA,EACX4B,MAAOA,EACPC,SAAUA,EACVC,SAAUA,EACVC,MAAOA,IAGT,0BAAMT,IAAK6B,EAAQlD,SAAUA,GAC3B,sCAAkBuD,KAAM,CAAC,GAAK,GAAI,GAAI,GAAI,IAAI,GAAOC,OAAO,aAE5D,yCACEA,OAAO,WACPC,4BAA2B3B,EAC3B4B,6BAA4B,EAC5BC,4BAA2B,SCtF9B,SAASC,EAAT,GAAqC,IAAnB5D,EAAkB,EAAlBA,SAAU6D,EAAQ,EAARA,KAC3BC,EAAOvC,mBACPwC,EAAkBxC,mBAClByC,EAAOzC,iBAAO,GAHqB,EAOtB0C,oBAAS,GAArBC,EAPkC,oBASnCC,EAAc5C,iBAAO2C,GA8D3B,OApDAnC,qBAAU,WACRoC,EAAYlC,QAAUiC,IACrB,CAACA,IAGJtB,aAAS,WACFkB,EAAK7B,UACV6B,EAAK7B,QAAQe,OAAO,EAAG,EAAG,GACtBmB,EAAYlC,UACd+B,EAAK/B,SAAW,IAChB6B,EAAK7B,QAAQjC,SAASoE,EAAIpE,EAAS,GAA8B,IAAzBwC,KAAK6B,IAAIL,EAAK/B,cA2CxD,+BAEI,CAAC,WAAY,SAAU,gBAAiB,SAAU,cAAe,SAAU,UAAUqC,SAAST,IAC5F,oCACE,0BACExC,IAAK0C,EACL/D,SAAU,CAAe,GAAdA,EAAS,GAAuB,GAAdA,EAAS,GAAuB,GAAdA,EAAS,MAG1D,gCACEuD,KAAM,CAAC,SAAU,GAAI,KACrBvD,SAAU,CAAe,KAAdA,EAAS,GAAyB,KAAdA,EAAS,GAAyB,KAAdA,EAAS,MAE9D,kBAAC,EAAD,CACEA,SAAU,CAAe,IAAdA,EAAS,GAAyB,IAAdA,EAAS,GAAyB,IAAdA,EAAS,IAC5D8B,MAAO,SACPhC,OAAQiE,EACRhE,UAAW,O,oBC/FlB,SAASwE,EAA4BC,EAAQC,EAAaC,GAM/D,IAAMzB,EAAIuB,EAAShC,KAAK6B,IAAII,GAAejC,KAAKmC,IAAID,GAC9CE,EAAIJ,EAAShC,KAAK6B,IAAII,GAAejC,KAAK6B,IAAIK,GAEpD,MAAO,EAAEzB,EADCuB,EAAShC,KAAKmC,IAAIF,GACbG,GAGV,SAASC,EAAyBC,EAAKC,GAG5C,MAAO,CAFavC,KAAKC,IAAMqC,EAAM,EAAI,GAAKA,EAAM,GAAKtC,KAAKwC,IAAIF,IAAQ,IAC1D,EAAItC,KAAKC,IAAMsC,GAAO,EAAIA,EAAM,IAAMvC,KAAKwC,IAAID,IAAQ,K,oCCXlE,SAASE,EAAT,GAAsD,IAAdC,EAAa,EAAbA,UACvCC,EAAS5D,mBAD2C,EAE5BL,IAAM+C,SAAS,MAFa,mBAEnDmB,EAFmD,KAE1CC,EAF0C,KAGlDC,EAAUC,YAChBC,IACAC,+CACAC,YAAMD,gCAHAH,MAMFK,EAAOpE,iBAAO2D,EAAUU,KAAI,kBAAMC,0BACxC9D,qBAAU,WACRoD,EAAOlD,QAAQ6D,OAAS,WACtB,IAAMC,EAAaZ,EAAOlD,QAAQ+D,aAC5BC,EAAcd,EAAOlD,QAAQiE,cAG7BC,EAAwBJ,EAAaE,EAIvCG,EAAcL,EACdM,EAAeJ,EACfE,EAL2B,EAM7BC,EAN6B,EAMfH,EACLE,EAPoB,IAQ7BE,EAAeN,EARc,GAY/B,IAAMO,EAAcC,SAASC,cAAc,UAG3CF,EAAYG,MAAQL,EACpBE,EAAYhE,OAAS+D,EAGTC,EAAYI,WAAW,MAC/BC,UAAUxB,EAAOlD,QAAS,EAAG,GAIjC,IAAM2D,EAAM,IAAIgB,cACd,CAACN,EAAaA,EAAaA,EAAaA,EAAaA,EAAaA,IAEpEV,EAAIiB,MAAQC,iBACZlB,EAAImB,MAAQD,iBACZlB,EAAIoB,aAAc,EACjB3B,EAAWO,GACZqB,YAAW,WACT9B,EAAOlD,QAAQiF,IAAM,4FAA8F1E,KAAK2E,WACvH,MAxCS,oBA2CExB,EAAK1D,SA3CP,IA2Cd,2BAA8B,CAAC,IAApBmF,EAAmB,QAC5BA,EAAEnF,QAAQe,OAAO,EAAE,EAAE,GAErBoE,EAAEnF,QAAQoF,QAAS,EAAI7E,KAAKC,GAAK,IA9CrB,iCAiDb,IAEH,IAAM6E,EAAcpC,EAAUU,KAAI,SAAC2B,EAAGC,GACpC,OACE,2BAAOnE,MAAO,CAAC,KAAO,KAAO,MAASoE,IAAKF,EAAE,GAAIvH,SAAUuH,EAAGlG,IAAKsE,EAAK1D,QAAQuF,IAC7EpC,GACD,0BAAMsC,SAAO,EAACxF,SAAUoD,EAAK,MAAUpD,UACrC,0CACEsB,OAAO,WACP1B,MAAO,SACP6F,UAAW,IACXC,OAAQxC,EACRyC,gBAAiB,EACjBC,UAAW,GACXC,QAAS,EACTC,aAAc,GACdnH,aAAW,EACXC,YAAY,KAIhB,0BAAM4G,SAAO,EAACxF,SAAUoD,EAAM,qBAAqBpD,UACjD,0CACEsB,OAAO,WACP1B,MAAO,QACP6F,UAAW,GACXG,UAAW,GACXG,UAAW,MAGf,0BAAMP,SAAO,EAACxF,SAAUoD,EAAM,gBAAgBpD,UAC5C,0CACEsB,OAAO,WACP1B,MAAO,SACP6F,UAAW,GACXG,UAAW,GACXI,SAAU,SACVH,QAAS,EACTlH,aAAW,EACXmH,aAAc,GACdlH,YAAY,KAGhB,0BAAM4G,SAAO,EAACxF,SAAUoD,EAAK,MAAUpD,UACrC,0CACEsB,OAAO,WACP1B,MAAO,SACP6F,UAAW,GACXG,UAAW,GACXI,SAAU,YAGd,0BAAMR,SAAO,EAACxF,SAAUoD,EAAM,aAAapD,UACzC,0CACEsB,OAAO,WACP1B,MAAO,SACP6F,UAAW,GACXG,UAAW,GACXI,SAAU,SACVH,QAAS,EACTlH,aAAW,EACXmH,aAAc,GACdlH,YAAY,KAGhB,0BAAM4G,SAAO,EAACxF,SAAUoD,EAAM,0BAA0BpD,UACtD,0CACEsB,OAAO,WACP1B,MAAO,QACP6F,UAAW,GACXG,UAAW,MAGf,0BAAMJ,SAAO,EAACxF,SAAUoD,EAAM,yBAAyBpD,UACrD,0CACEsB,OAAO,WACP1B,MAAO,QACP6F,UAAW,GACXG,UAAW,UAKrB,OACE,+BACE,kBAAC,IAAD,KACE,yBAAKK,IAAI,kBAAkBC,MAAO,CAAEC,QAAS,QAAUC,YAAY,YAAYjH,IAAK8D,EAAQ+B,IAAI,sFAAsFT,MAAM,MAAMnE,OAAO,SAE1MgF,GCjJA,SAASiB,IACd,IAAMC,EAAQjH,mBAEdqB,aAAS,WACP4F,EAAMvG,QAAQwG,SAASrE,EFUGsE,YAC1B,IAAIC,KACJC,YAAW,IAAID,OAGsB,MAClB,EAAInG,KAAKC,GAAMD,KAAKC,GAAK,KEX9C,IACMyC,EAAY2D,EAAOjD,KAAI,YAAmB,IAAD,EACzBf,EADyB,EAAfC,IAAe,EAAVC,KAAU,mBAE7C,OAAOR,EAHM,EACgC,cAKzCuE,EAASD,EAAOjD,KAAI,YAAyB,IAAtBd,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,IAAKlB,EAAW,EAAXA,KAC/BkF,EAASlE,EAAwBC,EAAKC,GADI,cAE7BgE,EAF6B,GAEzCC,EAFyC,KAEpCC,EAFoC,KAGhD,OACE,kBAACrF,EAAD,CACE6D,IAAG,UAAKuB,EAAL,YAAYC,GACfjJ,SAAUuE,EAZD,EAYoCyE,EAAKC,GAClDC,wBAAyB3E,EAbhB,EAaoD,IAAKyE,EAAKC,GACvEpF,KAAMA,OAMZ,OACE,2BAAOxC,IAAKmH,GACTM,EACD,kBAAC,WAAD,CAAUK,SAAU,MAClB,kBAAClE,EAAD,CAA6BC,UAAWA,MChChD,SAASkE,IACP,OACE,oCACE,kBAACC,EAAD,MACA,kBAAC,IAAD,CAAQC,iBAAe,EAACC,WAAS,EAACnB,MAAO,CAAEoB,WAAY,YACrD,yBAAKhG,OAAO,MAAMD,KAAM,CAAC,WAAY,GAAI,MACzC,kBAACkG,EAAD,MACA,kBAAClB,EAAD,MACA,kBAAC,IAAD,CAAemB,WAAW,EAAOC,UAAW,KAC5C,kBAAC,IAAD,CAAOC,OAAQ,EAAGC,WAAY,OAMtC,IAAMC,EAAcvD,SAASwD,eAAe,QAC5CC,IAASC,OAAO,kBAACb,EAAD,MAASU,K","file":"static/js/main.740fe9a4.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Sunrise / Sunset\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.1} />\n      <directionalLight\n        intensity={2}\n        position={[-1, 0, 0]}\n      />\n    </group>\n  );\n};\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    // side\t\t: THREE.DoubleSide,\n    // blending\t: THREE.AdditiveBlending,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect } from \"react\";\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\n\nimport * as THREE from \"three\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\n\nextend({\n  VolumetricSpotlight\n});\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const vs = React.useRef();\n  const spotlight = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    angle = 0.15,\n    penumbra = 0.6,\n    distance = 1,\n    color,\n    intensity,\n    position,\n    target\n  } = props;\n\n  // INIT\n  useEffect(() => {\n    scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix4(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    spotlight.current.position.copy(vs.current.position);\n  }, [scene, color, position]);\n\n  useFrame(({ clock }) => {\n    spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3();\n      target.current.getWorldPosition(targetPos) ;\n      vs.current.lookAt(targetPos);\n      if  (targetPos.x < 0) {\n        vs.current.material.uniforms.lightColor.value = new THREE.Color(0xffe7dd);\n      }\n      spotlight.current.target.position.copy(targetPos);\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // maps spotlight angle to volueme cylinder every frame\n  // it would be better to do it on a need-to basis\n  // but it doesn't play nice with react-spring\n  useFrame(() => {\n    const angle = spotlight.current.angle;\n\n    vs.current.scale.set(1 * angle, 1 * angle, 1);\n  });\n\n  return (\n    <>\n      <spotLight\n        ref={spotlight}\n        intensity={intensity}\n        angle={angle}\n        penumbra={penumbra}\n        distance={distance}\n        color={color}\n      />\n\n      <mesh ref={setRef} position={position}>\n        <cylinderGeometry args={[0.2, 15, 64, 30, 40, true]} attach=\"geometry\" />\n\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-lightColor-value={color}\n          uniforms-attenuation-value={6}\n          uniforms-anglePower-value={2}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, {\n  useRef,\n  useState,\n  useEffect,\n} from \"react\";\nimport { useFrame } from \"react-three-fiber\";\n\nimport { MyVolumetricSpotlight } from \"./VolumetricSpotlight\";\n\n\nexport function Light ({ position, name }) {\n  const mesh = useRef();\n  const spotlightTarget = useRef();\n  const time = useRef(0);\n\n\n  // const [isHovered, setIsHovered] = useState(false);\n  const [isActive] = useState(false);\n\n  const isActiveRef = useRef(isActive);\n\n\n  // random time mod factor\n  // const timeMod = useMemo(() => random(0.1, 4, true), []);\n\n  // color\n  // const color = isHovered ? 0xefefef : (isActive ? 0xffffff : 0xeeeeee);\n\n  //useEffect of the activeState\n  useEffect(() => {\n    isActiveRef.current = isActive;\n  }, [isActive]);\n\n  // raf loop\n  useFrame(() => {\n    if (!mesh.current) return;\n    mesh.current.lookAt(0, 0, 0)\n    if (isActiveRef.current) {\n      time.current += 0.03;\n      mesh.current.position.y = position[1] + Math.sin(time.current) * 0.05;\n    }\n  });\n\n  // Events\n  // const onHover = useCallback(\n  //   (e, value) => {\n  //     e.stopPropagation();\n  //     setIsHovered(value);\n  //   },\n  //   [setIsHovered]\n  // );\n\n  // const onClick = useCallback(\n  //   e => {\n  //     e.stopPropagation();\n  //     setIsActive(v => !v);\n  //   },\n  //   [setIsActive]\n  // );\n\n  // function LightPlaceholder () {\n  //   return (\n  //     <mesh\n  //       ref={mesh}\n  //       position={position}\n  //       onClick={e => onClick(e)}\n  //       onPointerOver={e => onHover(e, true)}\n  //       onPointerOut={e => onHover(e, false)}\n  //     >\n  //       <boxBufferGeometry attach=\"geometry\" args={[0.12, 0.07, 0.05]} />\n  //       <meshStandardMaterial\n  //         attach=\"material\"\n  //         color={color}\n  //         transparent\n  //         opacity={0.8}\n  //       />\n  //     </mesh>\n  //   )\n  // }\n\n\n  return (\n    <group>\n      {\n        ['Shanghai', 'Berlin', 'New York City', 'London', 'Los Angeles', 'Mumbai', 'Sydney'].includes(name)  && (\n          <>\n            <mesh\n              ref={spotlightTarget}\n              position={[position[0] * 10, position[1] * 10, position[2] * 10]}\n            >\n            </mesh>\n            <pointLight\n              args={[0xffffff, 10, 0.15]}\n              position={[position[0] * 1.03, position[1] * 1.03, position[2] * 1.03]}\n            />\n            <MyVolumetricSpotlight\n              position={[position[0] * 0.98, position[1] * 0.98, position[2] * 0.98]}\n              color={0xccccff}\n              target={spotlightTarget}\n              intensity={0.1}\n            />\n          </>\n        )\n      }\n      {/* <LightPlaceholder /> */}\n    </group>\n  );\n};\n","\nimport startOfDay from 'date-fns/startOfDay'\nimport differenceInSeconds from 'date-fns/differenceInSeconds'\n\nexport function sphericalCoordsToCartesian (radius, inclination, azimuth) {\n  /*\n   * Inclination is in the range [0, pi], from straight up (the zenith)\n   * Azimuth is in the range [0, 2pi], from the x axis\n   * See: https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n   */\n  const x = radius * Math.sin(inclination) * Math.cos(azimuth);\n  const z = radius * Math.sin(inclination) * Math.sin(azimuth);\n  const y = radius * Math.cos(inclination);\n  return [-x, y, z];\n}\n\nexport function latlngToSphericalCoords (lat, lng) {\n  const inclination = Math.PI * (lat > 0 ? 90 - lat : 90 + Math.abs(lat)) / 180;\n  const azimuth = 2 * Math.PI * (lng >= 0 ? lng : 360 - Math.abs(lng)) / 360; \n  return [inclination, azimuth];\n}\n\nexport function calculateAngleForTime () {\n  const secondsElapsedInDay = differenceInSeconds(\n    new Date(),\n    startOfDay(new Date()),\n  )\n\n  const dayProgress = secondsElapsedInDay / (24 * 60 * 60);\n  return dayProgress * 2 * Math.PI - (Math.PI / 4);\n}\n\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco, Html } from \"drei\";\nimport { RepeatWrapping, CubeTexture } from \"three\";\n\n\nexport function EightSeriesHeadlightManager ({ positions }) {\n  const imgRef = useRef()\n  const [cubeMap, setCubeMap] = React.useState(null)\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/headlight-simpler-origin.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const refs = useRef(positions.map(() => createRef()))\n  useEffect(() => {\n    imgRef.current.onload = () => {\n      const inputWidth = imgRef.current.naturalWidth;\n      const inputHeight = imgRef.current.naturalHeight;\n\n      // get the aspect ratio of the input image\n      const inputImageAspectRatio = inputWidth / inputHeight;\n      const outputImageAspectRatio = 1;\n\n      // if it's bigger than our target aspect ratio\n      let outputWidth = inputWidth;\n      let outputHeight = inputHeight;\n      if (inputImageAspectRatio > outputImageAspectRatio) {\n        outputWidth = inputHeight * outputImageAspectRatio;\n      } else if (inputImageAspectRatio < outputImageAspectRatio) {\n        outputHeight = inputWidth / outputImageAspectRatio;\n      }\n\n      // create a canvas that will present the output image\n      const outputImage = document.createElement('canvas');\n\n      // set it to the same size as the image\n      outputImage.width = outputWidth;\n      outputImage.height = outputHeight;\n\n      // draw our image at position 0, 0 on the canvas\n      const ctx = outputImage.getContext('2d');\n      ctx.drawImage(imgRef.current, 0, 0);\n\n      // show both the image and the canvas\n\n      const map = new CubeTexture(\n        [outputImage, outputImage, outputImage, outputImage, outputImage, outputImage ]\n      )\n      map.wrapS = RepeatWrapping;\n      map.wrapT = RepeatWrapping;\n      map.needsUpdate = true;\n       setCubeMap(map)\n      setTimeout(() => {\n        imgRef.current.src = 'http://cors-anywhere.services.computerlab.io:8080/http://207.251.86.238/cctv884.jpg?rand=' + Math.random()\n      }, 900)\n    }\n\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = positions.map((p, i) => {\n    return (\n      <group scale={[0.012, 0.012, 0.012 ]} key={p[0]} position={p} ref={refs.current[i]}>\n        {cubeMap &&\n        <mesh visible geometry={nodes['visor'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            envMap={cubeMap}\n            envMapIntensity={2}\n            metalness={0.9}\n            opacity={1}\n            transmission={0.5}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        }\n        <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0x8899aa}\n            roughness={0.2}\n            metalness={0.8}\n            clearcoat={0.7}\n          />\n        </mesh>\n        <mesh visible geometry={nodes['griddy-thing'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xddeeff}\n            roughness={0.1}\n            metalness={0.8}\n            emissive={0xffffff}\n            opacity={1}\n            transparent\n            transmission={0.4}\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh visible geometry={nodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xeeeeff}\n            roughness={0.3}\n            metalness={0.5}\n            emissive={0xffffff}\n          />\n        </mesh>\n        <mesh visible geometry={nodes['top-light'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xddffff}\n            roughness={0.1}\n            metalness={0.8}\n            emissive={0xffffff}\n            opacity={1}\n            transparent\n            transmission={0.5}\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh visible geometry={nodes['complex--inner-thing-1'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0x3333ff}\n            roughness={0.6}\n            metalness={0.5}\n          />\n        </mesh>\n        <mesh visible geometry={nodes['complex-inner-thing-2'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0x3333ff}\n            roughness={0.3}\n            metalness={0.5}\n          />\n        </mesh>\n      </group>\n    )})\n  return (\n    <group>\n      <Html>\n        <img alt='nyc traffic cam' style={{ display: 'none' }} crossOrigin=\"anonymous\" ref={imgRef} src=\"http://cors-anywhere.services.computerlab.io:8080/http://207.251.86.238/cctv884.jpg\" width=\"200\" height=\"200\" />\n    </Html>\n      {meshObjects}\n    </group>\n  )\n}\n","import React, { useRef, Suspense } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\n\nimport { Light } from \"./Light/Light\";\nimport { sphericalCoordsToCartesian, latlngToSphericalCoords, calculateAngleForTime } from \"../../lib\";\nimport cities from \"../../lib/cities.json\";\n\nimport { EightSeriesHeadlightManager } from \"./Light/EightSeriesHeadlightManager\";\n\nexport function LightGlobe () {\n  const group = useRef();\n\n  useFrame(() => {\n    group.current.rotation.y = calculateAngleForTime()\n    // group.current.rotation.y += 0.0005;\n    // use redux here instead\n  });\n\n  const RADIUS = 3;\n  const positions = cities.map(({ lat, lng }) => {\n    const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n    return sphericalCoordsToCartesian(RADIUS, inc, azm);\n  })\n\n  const lights = cities.map(({ lat, lng, name }) => {\n    const coords = latlngToSphericalCoords(lat, lng);\n    const [inc, azm] = coords\n    return (\n      <Light\n        key={`${inc}-${azm}`}\n        position={sphericalCoordsToCartesian(RADIUS, inc, azm)}\n        spotlightTargetPosition={sphericalCoordsToCartesian(RADIUS * 1.2, inc, azm)}\n        name={name}\n      />\n    )\n\n  })\n\n  return (\n    <group ref={group}>\n      {lights}\n      <Suspense fallback={null}>\n        <EightSeriesHeadlightManager positions={positions} />\n      </Suspense>\n    </group>\n  )\n  ;\n};\n","import \"./styles.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Credits from \"./components/Credits\";\nimport { Canvas } from \"react-three-fiber\";\nimport Lights from \"./components/Lights\";\nimport { LightGlobe } from \"./components/LightGlobe/LightGlobe\";\nimport { OrbitControls, Stars } from \"drei\";\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <Canvas colorManagement shadowMap style={{ background: '#101010' }}>\n        <fog attach=\"fog\" args={[\"#222831\", -10, 15]} />\n        <Lights />\n        <LightGlobe />\n        <OrbitControls enablePan={false} zoomSpeed={0.5} />\n        <Stars factor={2} saturation={0.5} />\n      </Canvas>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}