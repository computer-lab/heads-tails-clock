{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","lib/index.js","components/WebcamImageManager.js","components/LightGlobe/Headlights/EightSeriesHeadlights.js","constants.js","components/LightGlobe/Headlights/ThreeSeriesHeadlights.js","lib/volumetric-spotlight.js","components/LightGlobe/Headlights/VolumetricSpotlight.js","components/LightGlobe/Headlights/HeadlightBeams.js","components/LightGlobe/Headlights/FillerLights.js","components/LightGlobe/LightGlobe.js","components/LoadingIndicator.js","components/Effects.js","index.js"],"names":["className","rel","href","target","intensity","position","userData","bloom","attach","args","color","fog","isIntervalActive","periodLength","intervalStart","intervalEnd","offset","t","Date","getTime","corsProxy","WebcamImageManager","src","handleUpdateCubeMap","imgRef","useRef","useFrame","newSrc","Math","floor","current","useEffect","onload","inputWidth","naturalWidth","inputHeight","naturalHeight","inputImageAspectRatio","outputWidth","outputHeight","outputImage","document","createElement","width","height","getContext","drawImage","map","CubeTexture","needsUpdate","alt","style","display","crossOrigin","ref","EightSeriesHeadlights","locations","React","useState","nycCubeMap","setNycCubeMap","hkCubeMap","setHkCubeMap","nodes","useLoader","GLTFLoader","draco","midDetailNodes","lowDetailNodes","refs","createRef","r","lookAt","rotateY","PI","meshObjects","i","name","onDarkSide","blinkingOff","turnLightOn","envMap","scale","key","visible","geometry","roughness","envMapIntensity","clearcoat","metalness","opacity","transmission","transparent","depthWrite","distances","emissive","side","BackSide","getBulbEmissive","ThreeSeriesHeadlights","renderOrder","blending","THREE","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","extend","VolumetricSpotlight","MyVolumetricSpotlight","forwardRef","props","initialized","setInitialized","vs","scene","useThree","length","angle","scaleX","geometryLength","openEnded","applyMatrix4","makeTranslation","parameters","makeRotationX","clock","set","targetPos","getWorldPosition","rotateZ","setRef","useCallback","el","uniforms-lightColor-value","uniforms-attenuation-value","uniforms-anglePower-value","HeadlightBeams","bloomRefs","beams","useMemo","lightHigh","lightLaser","lightLow","render","posScaleFactor","lightLength","dummy","initInstancedMesh","instanced","lightGuide","forEach","location","updateMatrix","setMatrixAt","matrix","instanceMatrix","FillerLights","instancedMeshVisor","instancedMeshLightGuideOn","instancedMeshLightGuideOff","instancedMeshLens","LightGlobe","cities","group","rotation","setRotation","valueOf","y","reduce","acc","cur","nearbyIdx","findIndex","c","lat","toFixed","lng","population","push","abs","latlngToSphericalCoords","radius","inclination","azimuth","x","sin","cos","z","sphericalCoordsToCartesian","RADIUS","Vector3","Matrix4","makeRotationY","filter","LoadingIndicator","progress","useProgress","center","xmlns","xmlnsXlink","viewBox","d","id","attributeName","begin","dur","from","to","repeatCount","dominantBaseline","textAnchor","round","dy","textLength","xlinkHref","EffectComposer","RenderPass","UnrealBloomPass","materials","darkMaterial","transparentDarkMaterial","darkenNonBloomed","obj","isMesh","uuid","material","restoreMaterial","Effects","gl","camera","size","bloomStrength","useControl","bloomThreshold","renderScene","comp","renderToScreen","addPass","finalComposer","finalPass","ShaderPass","baseTexture","bloomTexture","renderTarget2","texture","needsSwap","final","setSize","traverse","App","Credits","colorManagement","concurrent","onCreated","setClearColor","antialias","toneMapping","CineonToneMapping","Lights","fallback","enableDamping","minDistance","maxDistance","enablePan","zoomSpeed","factor","saturation","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.db116075.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Sunrise / Sunset\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.3} />\n      <mesh position={[-200, -10, 0]} userData={{ bloom: true }}>\n        <sphereBufferGeometry attach=\"geometry\" args={[4, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"#EEEE88\" fog={false} />\n      </mesh>\n      <directionalLight\n        intensity={0.8}\n        position={[-1, 0, 0]}\n        color={0xfffdf2}\n      />\n    </group>\n  );\n};\n","export function sphericalCoordsToCartesian (radius, inclination, azimuth) {\n  /*\n   * Inclination is in the range [0, pi], from straight up (the zenith)\n   * Azimuth is in the range [0, 2pi], from the x axis\n   * See: https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n   */\n  const x = radius * Math.sin(inclination) * Math.cos(azimuth);\n  const z = radius * Math.sin(inclination) * Math.sin(azimuth);\n  const y = radius * Math.cos(inclination);\n  return [-x, y, z];\n}\n\nexport function latlngToSphericalCoords (lat, lng) {\n  const inclination = Math.PI * (lat > 0 ? 90 - lat : 90 + Math.abs(lat)) / 180;\n  const azimuth = 2 * Math.PI * (lng >= 0 ? lng : 360 - Math.abs(lng)) / 360; \n  return [inclination, azimuth];\n}\n\nconst SECONDS_IN_DAY = 24 * 60 * 60;\n\nexport function calculateAngleForTime () {\n  const unixEraSeconds = Math.floor(new Date().valueOf() / 1000);\n  const secondsElapsedInDay = unixEraSeconds % SECONDS_IN_DAY;\n  const dayProgress = secondsElapsedInDay / SECONDS_IN_DAY;\n  return dayProgress * 2 * Math.PI + Math.PI;\n}\n\nexport function isIntervalActive (periodLength, intervalStart, intervalEnd, offset) {\n  const t = (new Date().getTime() + offset * 1000) % (periodLength * 1000)\n  return t < intervalEnd * 1000 && t >= intervalStart * 1000;\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Html } from \"drei\";\nimport { CubeTexture } from \"three\";\n\nconst corsProxy = 'https://cors-anywhere.services.computerlab.io';\n\nexport function WebcamImageManager ({ src, handleUpdateCubeMap }) {\n  const imgRef = useRef();\n\n  useFrame(() => {\n    const newSrc = `${corsProxy}/${src}&rand=${Math.floor(new Date().getTime() / 1000)}`\n    if (newSrc !== imgRef.current.src) imgRef.current.src = newSrc\n  })\n\n  useEffect(() => {\n    imgRef.current.onload = () => {\n      const inputWidth = imgRef.current.naturalWidth;\n      const inputHeight = imgRef.current.naturalHeight;\n\n      // const dy = inputHeight / 3;\n      // const dx = Math.floor(inputWidth / 3);\n\n      // get the aspect ratio of the input image\n      const inputImageAspectRatio = inputWidth / inputHeight;\n      const outputImageAspectRatio = 1;\n\n      // if it's bigger than our target aspect ratio\n      let outputWidth = inputWidth;\n      let outputHeight = inputHeight;\n      if (inputImageAspectRatio > outputImageAspectRatio) {\n        outputWidth = inputHeight * outputImageAspectRatio;\n      } else if (inputImageAspectRatio < outputImageAspectRatio) {\n        outputHeight = inputWidth / outputImageAspectRatio;\n      }\n\n      const outputImage = document.createElement('canvas');\n\n      // let ctx\n      // const emptySmallImage = document.createElement('canvas');\n      // emptySmallImage.width = dx;\n      // emptySmallImage.height = dx;\n      // // create a canvas that will present the output image\n      // const px = document.createElement('canvas');\n      // px.width = dx;\n      // px.height = dx;\n      // ctx = px.getContext('2d')\n      // ctx.drawImage(imgRef.current, 2 * dx, 0, dx, dx, 0, 0, dx, dx);\n      // const nx = document.createElement('canvas');\n      // nx.width = dx;\n      // nx.height = dx;\n      // ctx = nx.getContext('2d')\n      // ctx.drawImage(imgRef.current, 0, 0, dx, dx, 0, 0, dx, dx);\n      // const pz = document.createElement('canvas');\n      // pz.width = dx;\n      // pz.height = dx;\n      // ctx = pz.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const py = document.createElement('canvas');\n      // py.width = dx;\n      // py.height = dx;\n      // ctx = py.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const ny = document.createElement('canvas');\n      // ny.width = dx;\n      // ny.height = dx;\n      // ctx = ny.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 2 * dx, dx, dx, 0, 0, dx, dx);\n\n\n      // const emptyImage = document.createElement('canvas');\n\n      // set it to the same size as the image\n      outputImage.width = outputWidth;\n      outputImage.height = outputHeight;\n      // emptyImage.width = outputWidth;\n      // emptyImage.height = outputHeight;\n\n      // draw our image at position 0, 0 on the canvas\n      let ctx = outputImage.getContext('2d');\n      ctx.drawImage(imgRef.current, 0, 0);\n\n      // show both the image and the canvas\n\n      // const map = new CubeTexture(\n      //   [px, nx, emptySmallImage, emptySmallImage, pz, pz ]\n      // )\n\n      const map = new CubeTexture(\n        [outputImage, outputImage, outputImage, outputImage, outputImage, outputImage ]\n      )\n      map.needsUpdate = true;\n      handleUpdateCubeMap(map)\n    }\n  }, [handleUpdateCubeMap])\n\n\n  return (\n    <Html>\n      <img alt='nyc traffic cam' style={{ display: 'none' }} crossOrigin=\"anonymous\" ref={imgRef} src={`${corsProxy}/${src}`} />\n    </Html>\n  )\n}\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco, Detailed } from \"drei\";\nimport { BackSide } from \"three\";\nimport { WebcamImageManager } from \"../../WebcamImageManager\";\nimport { PLASTIC_COLOR, HEADLIGHT_BODY_COLOR, BODY_HIGHLIGHT_COLOR, TURN_SIGNAL_COLOR } from \"../../../constants\"\n\nconst hkSrc = 'https://tdcctv.data.one.gov.hk/K107F.JPG?';\nconst nycSrc = 'http://207.251.86.238/cctv884.jpg?';\n\nexport function EightSeriesHeadlights ({ locations }) {\n  const [nycCubeMap, setNycCubeMap] = React.useState(null)\n  const [hkCubeMap, setHkCubeMap] = React.useState(null)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-simplified.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: midDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-mid-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-very-low-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff, turnLightOn }, i) => {\n    const envMap = {\n      \"New York City\": nycCubeMap,\n      'Mexico City': nycCubeMap,\n      \"Hong Kong\": hkCubeMap,\n      \"Qingdao\": hkCubeMap,\n      \"Seoul\": hkCubeMap,\n      \"Dhaka\": hkCubeMap,\n    }\n    return (\n      <group scale={[0.02, 0.02, 0.02 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh visible geometry={nodes['visor'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            envMap={envMap[name] ? envMap[name] : nycCubeMap}\n            envMapIntensity={1.5}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transmission={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 2.5, 5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={midDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          {onDarkSide ? \n          <mesh visible userData={{ bloom: true }} geometry={nodes['griddy-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={PLASTIC_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n              emissive={onDarkSide ? 0xbbbbff : 0x000000}\n              opacity={0.7}\n              transparent\n              depthWrite={false}\n            />\n          </mesh>\n            :\n              <mesh>\n                <mesh visible geometry={nodes['griddy-thing'].geometry}>\n                  <meshPhysicalMaterial\n                    attach=\"material\"\n                    color={PLASTIC_COLOR}\n                    roughness={0.2}\n                    metalness={0.8}\n                    emissive={onDarkSide ? 0xaaaaff : 0x000000}\n                    opacity={1}\n                    transparent\n                    transmission={0.94}\n                    depthWrite={false}\n                  />\n                </mesh>\n                <mesh visible geometry={nodes['griddy-thing'].geometry}>\n                  <meshPhysicalMaterial\n                    attach=\"material\"\n                    color={PLASTIC_COLOR}\n                    roughness={0.2}\n                    metalness={0.8}\n                    emissive={onDarkSide ? 0xaaaaff : 0x000000}\n                    opacity={1}\n                    transparent\n                    transmission={0.4}\n                    depthWrite={false}\n                    side={BackSide}\n                  />\n                </mesh>\n              </mesh>\n          }\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['griddy-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={PLASTIC_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n              emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <mesh visible geometry={nodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xaaaaff}\n            roughness={0.3}\n            metalness={0.5}\n            emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n          />\n        </mesh>\n        <Detailed distances={[0, 6]}>\n          <mesh visible userData={{ bloom: true }} geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              emissive={turnLightOn ? TURN_SIGNAL_COLOR : (onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000)}\n              opacity={0.7}\n              depthWrite={false}\n            />\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              emissive={turnLightOn ? TURN_SIGNAL_COLOR : (onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000)}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['complex--inner-thing-1'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['complex--inner-thing-1'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['complex-inner-thing-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.3}\n              metalness={0.5}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['complex-inner-thing-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.3}\n              metalness={0.5}\n            />\n          </mesh>\n        </Detailed>\n      </group>\n    )})\n  return (\n    <group>\n      <WebcamImageManager src={nycSrc} handleUpdateCubeMap={setNycCubeMap} />\n      <WebcamImageManager src={hkSrc} handleUpdateCubeMap={setHkCubeMap} />\n      {meshObjects}\n    </group>\n  );\n}\n","// colors\nexport const BG_COLOR = '';\nexport const HEADLIGHT_BODY_COLOR = 0x737693\nexport const TURN_SIGNAL_COLOR = 0xF18F17;\nexport const BODY_HIGHLIGHT_COLOR = 0x0a25ad;\nexport const BODY_DARK_COLOR = 0x040509;\nexport const BEAM_COLOR_LASER = 0xEEEAFF;\nexport const BEAM_COLOR_STANDARD = 0xEAEEF8;\nexport const PLASTIC_COLOR = 0xddeeff;\n\n// geometry\nexport const RADIUS = 3;\n\n// other\nexport const DEFAULT_LAYER = 0;\nexport const BLOOM_LAYER = 1;\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport * as THREE from 'three'\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco, Detailed } from \"drei\";\nimport { BackSide } from \"three\";\nimport { PLASTIC_COLOR, TURN_SIGNAL_COLOR, HEADLIGHT_BODY_COLOR, BODY_HIGHLIGHT_COLOR, BODY_DARK_COLOR } from \"../../../constants\"\n\nfunction getBulbEmissive (onDarkSide, turnLightOn) {\n  if (turnLightOn) return TURN_SIGNAL_COLOR\n  if (onDarkSide) return 0xaaaaff\n  return 0x000000\n}\n\nexport function ThreeSeriesHeadlights ({ locations }) {\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/series-3.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/series-3-low-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5.65 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff, turnLightOn }, i) => {\n    return (\n      <group scale={[0.018, 0.018, 0.018 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh visible geometry={lowDetailNodes['visor'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh visible userData={{ bloom: true }} geometry={nodes['bulbs_0'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.1}\n            metalness={0.8}\n            color={0xaaaaff}\n            transparent\n            opacity={0.6}\n            emissive={getBulbEmissive(onDarkSide, turnLightOn)}\n          />\n        </mesh>\n        <mesh userData={{ bloom: true }} visible geometry={nodes['bulbs_1'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.1}\n            metalness={0.8}\n            color={0xaaaaff}\n            transparent\n            opacity={0.6}\n            emissive={onDarkSide ? 0xaaaaff : null}\n          />\n        </mesh>\n        <mesh visible userData={{ bloom: true }} geometry={nodes['bulbs_2'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.1}\n            metalness={0.8}\n            color={0xaaaaff}\n            transparent\n            opacity={0.6}\n            emissive={getBulbEmissive(onDarkSide, turnLightOn)}\n          />\n        </mesh>\n        <Detailed distances={[0, 5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n        </Detailed>\n        {\n          onDarkSide\n            ? (\n              <mesh visible renderOrder={-1} userData={{ bloom: true }} geometry={nodes['griddy-thing'].geometry}>\n                <meshStandardMaterial\n                  attach=\"material\"\n                  color={PLASTIC_COLOR}\n                  roughness={0.2}\n                  metalness={0.8}\n                  emissive={onDarkSide ? 0xccccff : 0x000000}\n                  blending={THREE.AdditiveBlending}\n                  transparent\n                  // depthTest={false}\n                />\n              </mesh>\n            ) : (\n            <mesh>\n              <mesh visible geometry={nodes['griddy-thing'].geometry}>\n                <meshPhysicalMaterial\n                  attach=\"material\"\n                  color={PLASTIC_COLOR}\n                  roughness={0.2}\n                  metalness={0.8}\n                  emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n                  opacity={1}\n                  transparent\n                  transmission={0.94}\n                />\n              </mesh>\n              <mesh visible geometry={nodes['griddy-thing'].geometry}>\n                <meshPhysicalMaterial\n                  attach=\"material\"\n                  color={PLASTIC_COLOR}\n                  roughness={0.2}\n                  metalness={0.8}\n                  emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n                  opacity={1}\n                  transparent\n                  transmission={0.4}\n                  side={BackSide}\n                />\n              </mesh>\n              </mesh>\n            )\n        }\n        <Detailed distances={[0, 3]}>\n          <mesh visible userData={{ bloom: true }} geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['griddy-thing-case'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n              // map={nodes['griddy-thing-case'].material.map}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['griddy-thing-case'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              roughness={0.1}\n              metalness={0.8}\n              color={BODY_HIGHLIGHT_COLOR}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n      </group>\n    )})\n  return (\n    <group>\n      {meshObjects}\n    </group>\n  );\n}\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side\t\t: THREE.DoubleSide,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect, useState } from \"react\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\nimport * as THREE from \"three\";\n\nextend({\n  VolumetricSpotlight\n});\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const [initialized, setInitialized] = useState(false);\n  const vs = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    color,\n    length = 6,\n    position,\n    target,\n    angle = 1.2,\n    scaleX = 1,\n    geometryLength = 8,\n    openEnded\n  } = props;\n\n  // INIT\n  useEffect(() => {\n    // scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix4(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    // vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    // spotlight.current.position.copy(vs.current.position);\n    // spotlight.current.position.copy(vs.current.position);\n    // // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    // if (target && target.current) {\n    //   const targetPos = new THREE.Vector3();\n    //   target.current.getWorldPosition(targetPos) ;\n    //   vs.current.lookAt(targetPos);\n    //   spotlight.current.target.position.copy(targetPos);\n    // }\n  }, [scene]);\n\n  useFrame(({ clock }) => {\n    // spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    vs.current.scale.set(scaleX, 1, 1);\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3();\n      target.current.getWorldPosition(targetPos) ;\n      vs.current.lookAt(targetPos);\n      vs.current.rotateZ(Math.PI / 12)\n      vs.current.rotateY(Math.PI / 12)\n      setInitialized(true);\n      // spotlight.current.target.position.copy(targetPos);\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // maps spotlight angle to volueme cylinder every frame\n  // it would be better to do it on a need-to basis\n  // but it doesn't play nice with react-spring\n  useFrame(() => {\n    // const angle = spotlight.current.angle;\n\n  });\n\n  return (\n    <>\n      {/* <spotLight */}\n      {/*   ref={spotlight} */}\n      {/*   intensity={initialized ? intensity : 0} */}\n      {/*   angle={angle} */}\n      {/*   penumbra={penumbra} */}\n      {/*   distance={distance} */}\n      {/*   color={color} */}\n      {/* /> */}\n      <mesh renderOrder={-3} visible={initialized} ref={setRef} position={position}>\n        <cylinderGeometry args={[0.05, 0.25, geometryLength, 12, 1, openEnded]} attach=\"geometry\" />\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-lightColor-value={color}\n          uniforms-attenuation-value={length} // as porportion to height of cylinder\n          uniforms-anglePower-value={angle}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, { useRef, createRef, useMemo } from \"react\";\n\nimport { MyVolumetricSpotlight } from \"./VolumetricSpotlight\";\nimport { BEAM_COLOR_LASER, BEAM_COLOR_STANDARD } from \"../../../constants\";\n\n\nexport function HeadlightBeams ({ locations }) {\n  const refs = useRef(locations.map(() => createRef()))\n  const bloomRefs = useRef(locations.map(() => createRef()))\n\n  const beams = useMemo(() => locations.map(({\n    position,\n    onDarkSide,\n    blinkingOff,\n    lightHigh,\n    lightLow,\n    lightLaser,\n    render\n  }, i ) => {\n    if (!onDarkSide) return <group key={i} />\n    const posScaleFactor = render ? 0.98 : 0.995\n    let lightLength = 4\n    if (lightLaser) lightLength = 6\n    if (lightHigh) lightLength = 5\n    return (\n      <group key={i}>\n        <mesh\n          ref={refs.current[i]}\n          position={[position[0] * 10, position[1] * 10, position[2] * 10]}\n        />\n        <mesh\n          ref={bloomRefs.current[i]}\n          position={[position[0] * 2, position[1] * 2, position[2] * 2]}\n        />\n        <MyVolumetricSpotlight\n          position={[position[0] * posScaleFactor, position[1] * posScaleFactor, position[2] * posScaleFactor]}\n          color={lightLaser ? BEAM_COLOR_LASER : BEAM_COLOR_STANDARD}\n          length={lightLength}\n          target={refs.current[i]}\n          angle={lightLaser ? 1.3 : 1.2}\n          scaleX={lightLaser ? 1.5 : 3}\n          openEnded\n        />\n        {render && (\n          <MyVolumetricSpotlight\n            position={[position[0] * 1.02, position[1] * 1.02, position[2] * 1.02]}\n            color={lightLaser ? BEAM_COLOR_LASER : BEAM_COLOR_STANDARD}\n            length={3.9}\n            geometryLength={1}\n            target={bloomRefs.current[i]}\n            angle={lightLaser ? 1.4 : 1.1}\n            scaleX={3.5}\n            openEnded={true}\n          />\n        )}\n      </group>\n    )\n  }), [locations])\n\n  return (\n    <>\n      {beams}\n    </>\n  );\n};\n","import React, { useRef, useEffect } from 'react'\nimport * as THREE from 'three'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco } from \"drei\";\n\nconst dummy = new THREE.Object3D();\n\nfunction initInstancedMesh(instanced, locations, lightGuide) {\n  locations.forEach((location, i) => {\n    const { position } = location\n    dummy.position.set(...position)\n    let scale = [0.015, 0.015, 0.015]\n    if (lightGuide === 'on' && !location.onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    if (lightGuide === 'off' && location.onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    dummy.scale.set(...scale)\n    dummy.lookAt(0, 0, 0)\n    dummy.rotateY( 5.6 * Math.PI / 4)\n    dummy.updateMatrix()\n    instanced.current.setMatrixAt(i, dummy.matrix)\n  })\n  instanced.current.instanceMatrix.needsUpdate = true\n}\n\nexport function FillerLights ({ locations }) {\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/laser.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  )\n\n  const instancedMeshVisor = useRef()\n  const instancedMeshLightGuideOn = useRef()\n  const instancedMeshLightGuideOff = useRef()\n  const instancedMeshLens = useRef()\n\n\n  useEffect(() => {\n    initInstancedMesh(instancedMeshVisor, locations);\n    initInstancedMesh(instancedMeshLightGuideOn, locations, 'on');\n    initInstancedMesh(instancedMeshLightGuideOff, locations, 'off');\n    initInstancedMesh(instancedMeshLens, locations);\n  }, [locations])\n\n  return (\n    <group>\n      <instancedMesh ref={instancedMeshVisor} geometry={nodes['visor'].geometry} userData={{ bloom: true }} args={[null, null, locations.length]} >\n        <meshPhysicalMaterial\n          attach=\"material\"\n          color={0xccccff}\n          roughness={0.05}\n          clearcoat={0.9}\n          metalness={0.9}\n          opacity={1}\n          transmission={0.6}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOff} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOn} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          emissive={0xaaaaff}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLens} userData={{ bloom: true }} geometry={nodes['lens'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          roughness={0.3}\n          metalness={0.5}\n          color={0xaaaaff}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n    </group>\n  )\n}\n","import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Vector3, Matrix4 } from 'three';\n\nimport {\n  sphericalCoordsToCartesian,\n  latlngToSphericalCoords,\n  calculateAngleForTime,\n  isIntervalActive\n} from \"../../lib\";\nimport { EightSeriesHeadlights } from \"./Headlights/EightSeriesHeadlights\";\nimport { ThreeSeriesHeadlights } from \"./Headlights/ThreeSeriesHeadlights\";\nimport { HeadlightBeams } from \"./Headlights/HeadlightBeams\";\nimport { FillerLights } from \"./Headlights/FillerLights\";\nimport { RADIUS } from '../../constants';\n\nconst PRECISION = 1\n\nexport function LightGlobe ({ cities }) {\n  const group = useRef();\n  const [rotation, setRotation] = useState()\n\n  useFrame(() => {\n    const r = calculateAngleForTime()\n    if (r === rotation) return\n    setRotation(r)\n    group.current.rotation.y = r\n  });\n\n  const dedupedLocations = useMemo(() =>\n    cities.reduce((acc, cur) => {\n      const nearbyIdx = acc.findIndex(c => cur.lat.toFixed(PRECISION) === c.lat.toFixed(PRECISION) || cur.lng.toFixed(PRECISION) === c.lng.toFixed(PRECISION))\n      if (nearbyIdx > 0 && cur.population > acc[nearbyIdx].population) {\n        acc[nearbyIdx] = cur\n        return acc\n      }\n      acc.push(cur)\n      return acc\n    }, []),\n    [cities]\n  )\n\n  const locations = dedupedLocations \n    .map(({ lat, lng, name, render }, i) => {\n      const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n      const position = sphericalCoordsToCartesian(render ? RADIUS : RADIUS - 0.2, inc, azm);\n      const pos = new Vector3(...position)\n      const worldPos = pos.applyMatrix4(new Matrix4().makeRotationY(rotation))\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const lightLow = isIntervalActive(120, 0, 40, i)\n      const lightHigh = isIntervalActive(120, 40, 70, i)\n      const lightLaser = isIntervalActive(120, 70, 120, i)\n      const turnLightOn = isIntervalActive(60, 0, 20, i) && isIntervalActive(2, 0, 1, i)\n      // TODO:\n      // 1. turn signals blinks on and off for thirty seconds\n      // 2. goes from hi-beam to low-beam on one minute interval\n      // 3. angles down 20 degrees for fifteen seconds\n      return {\n        render,\n        position,\n        name,\n        onDarkSide,\n        turnLightOn,\n        lightLow,\n        lightHigh,\n        lightLaser\n      }\n    })\n\n  return (\n    <group ref={group}>\n      <EightSeriesHeadlights locations={locations.filter(({ render }) => render === 'EightSeries')} />\n      <ThreeSeriesHeadlights locations={locations.filter(({ render }) => render === 'ThreeSeries')} />\n      <FillerLights locations={locations.filter(({ render }) => !render)} />\n      <HeadlightBeams locations={locations} />\n    </group>\n  );\n};\n","import React from 'react';\nimport { Html, useProgress } from \"drei\";\n\nexport function LoadingIndicator () {\n  const { progress } = useProgress()\n  return (\n    <Html center>\n      <div className='loading'>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 500 500\">\n          <title>TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</title>\n          <defs>\n            <path d=\"M50,250c0-110.5,89.5-200,200-200s200,89.5,200,200s-89.5,200-200,200S50,360.5,50,250\" id=\"textcircle\">\n              <animateTransform\n                attributeName=\"transform\"\n                begin=\"0s\"\n                dur=\"30s\"\n                type=\"rotate\"\n                from=\"0 250 250\"\n                to=\"360 250 250\"\n                repeatCount=\"indefinite\" \n              />\n              </path>\n            </defs>\n            <text className=\"progress\" x=\"50%\" y=\"50%\" dominantBaseline=\"middle\" textAnchor=\"middle\">Loading {Math.round(progress)}%</text>    \n            <text dy=\"70\" textLength=\"1220\">\n              <textPath className=\"circle-text\" xlinkHref=\"#textcircle\">TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</textPath>\n            </text>\n          </svg>\n        </div>\n      </Html>\n  )\n\n}\n","import { useEffect, useMemo } from 'react'\nimport * as THREE from 'three'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { useControl } from 'react-three-gui'\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass })\n\nconst materials = {}\nconst darkMaterial = new THREE.MeshBasicMaterial({ color: 'black' })\nconst transparentDarkMaterial = new THREE.MeshBasicMaterial({ color: 'black', depthWrite: false })\nconst darkenNonBloomed = obj => {\n  if (obj.isMesh && !obj.userData.bloom) {\n    materials[obj.uuid] = obj.material\n    obj.material = obj.material.depthWrite ? darkMaterial : transparentDarkMaterial\n  }\n}\nconst restoreMaterial = obj => materials[obj.uuid] && ((obj.material = materials[obj.uuid]), delete materials[obj.uuid])\n\nexport function Effects() {\n  const { gl, scene, camera, size } = useThree()\n  const bloomStrength = useControl('Bloom Strength', { type: 'number', value: 2.3 })\n  const bloomThreshold = useControl('Bloom Threshold', { type: 'number', value: 0.2 })\n\n  const [bloom, final] = useMemo(() => {\n    const renderScene = new RenderPass(scene, camera)\n    const comp = new EffectComposer(gl)\n    comp.renderToScreen = false\n    comp.addPass(renderScene)\n    comp.addPass(new UnrealBloomPass(new THREE.Vector2(size.width / 2, size.height / 2), bloomStrength, 0.1, bloomThreshold))\n\n    const finalComposer = new EffectComposer(gl)\n    finalComposer.addPass(renderScene)\n    const finalPass = new ShaderPass(\n      new THREE.ShaderMaterial({\n        uniforms: { baseTexture: { value: null }, bloomTexture: { value: comp.renderTarget2.texture } },\n        vertexShader:\n          'varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }',\n        fragmentShader:\n          'uniform sampler2D baseTexture; uniform sampler2D bloomTexture; varying vec2 vUv; void main() { gl_FragColor = ( texture2D(baseTexture, vUv) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) ); }'\n      }),\n      'baseTexture'\n    )\n    finalPass.needsSwap = true\n    finalComposer.addPass(finalPass)\n    return [comp, finalComposer]\n  }, [camera, gl, scene, size.height, size.width, bloomStrength, bloomThreshold])\n\n  useEffect(() => {\n    bloom.setSize(size.width, size.height)\n    final.setSize(size.width, size.height)\n  }, [bloom, final, size])\n\n  useFrame(({ scene, camera }) => {\n    // https://github.com/mrdoob/three.js/blob/master/examples/webgl_postprocessing_unreal_bloom_selective.html\n    // this seems kinda dirty, it mutates the scene and overwrites materials\n    scene.traverse(darkenNonBloomed)\n    bloom.render()\n    scene.traverse(restoreMaterial)\n    // then writes the normal scene on top\n    final.render()\n  }, 1)\n\n  return null\n}\n\n","import \"./styles.css\";\n\nimport React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Credits from \"./components/Credits\";\nimport { Canvas } from \"react-three-fiber\";\nimport { CineonToneMapping } from \"three\";\nimport cities from \"./lib/cities.json\";\nimport Lights from \"./components/Lights\";\nimport { LightGlobe } from \"./components/LightGlobe/LightGlobe\";\nimport { OrbitControls, Stars, Stats } from \"drei\";\nimport { LoadingIndicator } from './components/LoadingIndicator';\nimport { RADIUS, BG_COLOR } from \"./constants\"\nimport { Effects } from \"./components/Effects\"\nimport { ControlsProvider, Controls } from 'react-three-gui'\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <ControlsProvider>\n        <Canvas\n          colorManagement\n          concurrent\n          onCreated={({ gl }) => gl.setClearColor(BG_COLOR)}\n          gl={{ antialias: true, toneMapping: CineonToneMapping }}\n        >\n          <fogExp2 attach=\"fog\" args={[\"#020202\", 0.15]} />\n          <Lights />\n          <Suspense fallback={<LoadingIndicator />}>\n            <LightGlobe cities={cities} />\n          </Suspense>\n          <OrbitControls enableDamping minDistance={RADIUS + 0.27} maxDistance={20} enablePan={false} zoomSpeed={0.3} />\n          <Stars factor={0.1} saturation={0.4} />\n          <Stats />\n          <Effects />\n        </Canvas>\n        <Controls />\n      </ControlsProvider>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n"],"sourceRoot":""}