{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","constants.js","store.js","lib/volumetric-spotlight.js","components/LightGlobe/Headlights/VolumetricSpotlight.js","components/LightGlobe/Headlights/FillerLights.js","components/LoadingIndicator.js","components/Effects.js","components/CameraRig.js","components/Stars.js","index.js"],"names":["className","rel","href","target","intensity","position","userData","bloom","attach","args","color","fog","useStore","create","set","zoomTarget","zoomStartTime","zoomStartPosition","setZoomTarget","state","setZoomStartTime","setZoomStartPosition","zoomToMesh","e","stopPropagation","object","updateMatrixWorld","worldPos","Vector3","headlightPos","getWorldPosition","x","y","z","console","log","multiplyScalar","handleHoverMesh","document","getElementById","innerHTML","handleUnhoverMesh","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","THREE","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","side","transparent","depthWrite","extend","VolumetricSpotlight","React","forwardRef","props","ref","vs","useRef","scene","useThree","length","angle","scaleX","geometryLength","openEnded","useEffect","geometry","current","applyMatrix4","makeTranslation","parameters","height","makeRotationX","Math","PI","useFrame","clock","scale","targetPos","lookAt","rotateZ","rotateY","visible","setRef","useCallback","el","uniforms-lightColor-value","uniforms-attenuation-value","uniforms-anglePower-value","LoadingIndicator","useProgress","progress","errors","loadingText","round","center","xmlns","xmlnsXlink","viewBox","d","id","attributeName","begin","dur","from","to","repeatCount","dominantBaseline","textAnchor","dy","textLength","xlinkHref","EffectComposer","RenderPass","UnrealBloomPass","materials","darkMaterial","transparentDarkMaterial","darkenNonBloomed","obj","isMesh","uuid","material","restoreMaterial","Effects","gl","camera","size","useMemo","renderScene","comp","renderToScreen","addPass","width","finalComposer","finalPass","ShaderPass","baseTexture","bloomTexture","renderTarget2","texture","needsSwap","final","setSize","traverse","render","CameraRig","shallow","elapsedTime","copy","zoomDurationScaledByDistance","distanceToZoom","distanceTo","ZOOM_DURATION","a","newCamPos","lerpVectors","updateProjectionMatrix","enableDamping","minDistance","maxDistance","enablePan","zoomSpeed","StarfieldMaterial","time","fade","ShaderMaterial","genStar","r","setFromSpherical","Spherical","acos","random","Stars","radius","depth","count","saturation","factor","positions","colors","sizes","Array","Color","increment","i","push","toArray","setHSL","g","b","Float32Array","getElapsedTime","starfieldMaterial","attachObject","blending","AdditiveBlending","uniforms-fade-value","vertexColors","App","Credits","colorManagement","concurrent","onCreated","setClearColor","antialias","toneMapping","CineonToneMapping","Lights","rootElement","ReactDOM"],"mappings":"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","file":"static/js/main.255478f3.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Sunrise / Sunset\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.6} />\n      <mesh position={[-200, -10, 0]} userData={{ bloom: true }}>\n        <sphereBufferGeometry attach=\"geometry\" args={[4, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"#EEEE88\" fog={false} />\n      </mesh>\n      <directionalLight\n        intensity={0.9}\n        position={[-1, 0, 0]}\n        color={0xfffdf2}\n      />\n    </group>\n  );\n};\n","// colors\nexport const BG_COLOR = ''\nexport const HEADLIGHT_BODY_COLOR = 0x838b9f\nexport const TURN_SIGNAL_COLOR = 0xF18F17\nexport const BODY_HIGHLIGHT_COLOR = 0x0a25ad\nexport const BODY_DARK_COLOR = 0x040509\nexport const BEAM_COLOR_LASER = 0xEEEAFF\nexport const BEAM_COLOR_STANDARD = 0xEAEEF8\nexport const PLASTIC_COLOR = 0xddeeff\n\n// geometry\nexport const RADIUS = 3\n\n// other\nexport const DEFAULT_LAYER = 0\nexport const BLOOM_LAYER = 1\nexport const ZOOM_DURATION = 1.5\nexport const IS_LIVE = false\n","import create from 'zustand'\nimport { Vector3 } from \"three\"\n\nexport const useStore = create(set => ({\n  zoomTarget: null,\n  zoomStartTime: null,\n  zoomStartPosition: null,\n  setZoomTarget: (zoomTarget) => set(state => ({ zoomTarget })),\n  setZoomStartTime: (zoomStartTime) => set(state => ({ zoomStartTime })),\n  setZoomStartPosition: (zoomStartPosition) => set(state => ({ zoomStartPosition })),\n  zoomToMesh: (e) => {\n    e.stopPropagation();\n    e.object.updateMatrixWorld()\n    const worldPos = new Vector3()\n    const headlightPos = e.object.getWorldPosition(worldPos)\n    if (headlightPos.x === 0 && headlightPos.y === 0 && headlightPos.z === 0) return console.log('zero')\n    return set(state => ({\n      zoomTarget: headlightPos.multiplyScalar(1.1)\n    }))\n  },\n  handleHoverMesh: (e) => {\n    e.stopPropagation();\n    e.object.updateMatrixWorld()\n    const worldPos = new Vector3()\n    const headlightPos = e.object.getWorldPosition(worldPos)\n    if (headlightPos.x === 0 && headlightPos.y === 0 && headlightPos.z === 0) return console.log('zero')\n    document.getElementById('cursor-style').innerHTML = 'body { cursor: pointer }'\n  },\n  handleUnhoverMesh: (e) => {\n    e.stopPropagation();\n    document.getElementById('cursor-style').innerHTML = ''\n  },\n\n}))\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side\t\t: THREE.DoubleSide,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect } from \"react\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\nimport * as THREE from \"three\";\n\nextend({\n  VolumetricSpotlight\n});\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const vs = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    color,\n    length = 6,\n    position,\n    target,\n    angle = 1.2,\n    scaleX = 1,\n    geometryLength = 8,\n    openEnded\n  } = props;\n\n  // INIT\n  useEffect(() => {\n    // scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix4(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    // vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    // spotlight.current.position.copy(vs.current.position);\n    // spotlight.current.position.copy(vs.current.position);\n    // // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    // if (target && target.current) {\n    //   const targetPos = new THREE.Vector3();\n    //   target.current.getWorldPosition(targetPos) ;\n    //   vs.current.lookAt(targetPos);\n    //   spotlight.current.target.position.copy(targetPos);\n    // }\n  }, [scene]);\n\n  useFrame(({ clock }) => {\n    // spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    vs.current.scale.set(scaleX, 1, 1)\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3()\n      target.current.getWorldPosition(targetPos)\n      vs.current.lookAt(targetPos)\n      vs.current.rotateZ(Math.PI / 12)\n      vs.current.rotateY(Math.PI / 12)\n      vs.current.visible = true // prevent glitch on load\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // // maps spotlight angle to volueme cylinder every frame\n  // // it would be better to do it on a need-to basis\n  // // but it doesn't play nice with react-spring\n  // useFrame(() => {\n  //   // const angle = spotlight.current.angle;\n\n  // });\n\n  return (\n    <>\n      {/* <spotLight */}\n      {/*   ref={spotlight} */}\n      {/*   intensity={initialized ? intensity : 0} */}\n      {/*   angle={angle} */}\n      {/*   penumbra={penumbra} */}\n      {/*   distance={distance} */}\n      {/*   color={color} */}\n      {/* /> */}\n      <mesh visible={false} ref={setRef} position={position}>\n        <cylinderGeometry args={[0.05, 0.25, geometryLength, 12, 1, openEnded]} attach=\"geometry\" />\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-lightColor-value={color}\n          uniforms-attenuation-value={length} // as porportion to height of cylinder\n          uniforms-anglePower-value={angle}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, { useRef, useEffect } from 'react'\nimport * as THREE from 'three'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco } from \"drei\";\n\nconst dummy = new THREE.Object3D();\n\nfunction initInstancedMesh(instanced, locations, lightGuide) {\n  locations.forEach((location, i) => {\n    const { position } = location\n    dummy.position.set(...position)\n    let scale = [0.015, 0.015, 0.015]\n    if (lightGuide === 'on' && !location.onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    if (lightGuide === 'off' && location.onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    dummy.scale.set(...scale)\n    dummy.lookAt(0, 0, 0)\n    dummy.rotateY( 5.6 * Math.PI / 4)\n    dummy.updateMatrix()\n    instanced.current.setMatrixAt(i, dummy.matrix)\n  })\n  instanced.current.instanceMatrix.needsUpdate = true\n}\n\nexport function FillerLights ({ locations }) {\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/laser.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  )\n\n  const instancedMeshVisor = useRef()\n  const instancedMeshLightGuideOn = useRef()\n  const instancedMeshLightGuideOff = useRef()\n  const instancedMeshLens = useRef()\n\n\n  useEffect(() => {\n    initInstancedMesh(instancedMeshVisor, locations);\n    initInstancedMesh(instancedMeshLightGuideOn, locations, 'on');\n    initInstancedMesh(instancedMeshLightGuideOff, locations, 'off');\n    initInstancedMesh(instancedMeshLens, locations);\n  }, [locations])\n\n  return (\n    <group>\n      <instancedMesh ref={instancedMeshVisor} geometry={nodes['visor'].geometry} userData={{ bloom: true }} args={[null, null, locations.length]} >\n        <meshPhysicalMaterial\n          attach=\"material\"\n          color={0xccccff}\n          roughness={0.05}\n          clearcoat={0.9}\n          metalness={0.9}\n          opacity={1}\n          transmission={0.6}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOff} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOn} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          emissive={0xaaaaff}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLens} userData={{ bloom: true }} geometry={nodes['lens'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          roughness={0.3}\n          metalness={0.5}\n          color={0xaaaaff}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n    </group>\n  )\n}\n","import React from \"react\"\nimport { Html, useProgress } from \"drei\"\nimport { IS_LIVE } from \"../constants\"\n\nexport function LoadingIndicator () {\n  const { progress, errors } = useProgress()\n  if (errors.length) console.log(errors)\n  let loadingText = `Loading ${Math.round(progress)}%`\n  if (!IS_LIVE) loadingText = 'Coming October 7th'\n  if (errors.length) loadingText = 'Error'\n  return (\n    <Html center>\n      <div className='loading'>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 500 500\">\n          <title>TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</title>\n          <defs>\n            <path d=\"M50,250c0-110.5,89.5-200,200-200s200,89.5,200,200s-89.5,200-200,200S50,360.5,50,250\" id=\"textcircle\">\n              <animateTransform\n                attributeName=\"transform\"\n                begin=\"0s\"\n                dur=\"30s\"\n                type=\"rotate\"\n                from=\"0 250 250\"\n                to=\"360 250 250\"\n                repeatCount=\"indefinite\"\n              />\n              </path>\n            </defs>\n            <text className=\"progress\" x=\"50%\" y=\"50%\" dominantBaseline=\"middle\" textAnchor=\"middle\">\n              { loadingText }\n            </text>\n            <text dy=\"70\" textLength=\"1220\">\n              <textPath className=\"circle-text\" xlinkHref=\"#textcircle\">TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</textPath>\n            </text>\n          </svg>\n        </div>\n      </Html>\n  )\n\n}\n","import { useEffect, useMemo } from 'react'\nimport * as THREE from 'three'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass })\n\nconst materials = {}\nconst darkMaterial = new THREE.MeshBasicMaterial({ color: 'black' })\nconst transparentDarkMaterial = new THREE.MeshBasicMaterial({ color: 'black', depthWrite: false })\nconst darkenNonBloomed = obj => {\n  if (obj.isMesh && !obj.userData.bloom) {\n    materials[obj.uuid] = obj.material\n    obj.material = obj.material.depthWrite ? darkMaterial : transparentDarkMaterial\n  }\n}\nconst restoreMaterial = obj => materials[obj.uuid] && ((obj.material = materials[obj.uuid]), delete materials[obj.uuid])\n\nexport function Effects() {\n  const { gl, scene, camera, size } = useThree()\n  // const bloomStrength = useControl('Bloom Strength', { type: 'number', value: 2.3 })\n  // const bloomThreshold = useControl('Bloom Threshold', { type: 'number', value: 0.2 })\n  const bloomStrength = 2.3\n  const bloomThreshold = 0.2 \n\n  const [bloom, final] = useMemo(() => {\n    const renderScene = new RenderPass(scene, camera)\n    const comp = new EffectComposer(gl)\n    comp.renderToScreen = false\n    comp.addPass(renderScene)\n    comp.addPass(new UnrealBloomPass(new THREE.Vector2(size.width, size.height), bloomStrength, 0.1, bloomThreshold))\n\n    const finalComposer = new EffectComposer(gl)\n    finalComposer.addPass(renderScene)\n    const finalPass = new ShaderPass(\n      new THREE.ShaderMaterial({\n        uniforms: { baseTexture: { value: null }, bloomTexture: { value: comp.renderTarget2.texture } },\n        vertexShader:\n          'varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }',\n        fragmentShader:\n          'uniform sampler2D baseTexture; uniform sampler2D bloomTexture; varying vec2 vUv; void main() { gl_FragColor = ( texture2D(baseTexture, vUv) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) ); }'\n      }),\n      'baseTexture'\n    )\n    finalPass.needsSwap = true\n    finalComposer.addPass(finalPass)\n    return [comp, finalComposer]\n  }, [camera, gl, scene, size.height, size.width, bloomStrength, bloomThreshold])\n\n  useEffect(() => {\n    bloom.setSize(size.width, size.height)\n    final.setSize(size.width, size.height)\n  }, [bloom, final, size])\n\n  useFrame(({ scene, camera }) => {\n    // https://github.com/mrdoob/three.js/blob/master/examples/webgl_postprocessing_unreal_bloom_selective.html\n    // this seems kinda dirty, it mutates the scene and overwrites materials\n    scene.traverse(darkenNonBloomed)\n    bloom.render()\n    scene.traverse(restoreMaterial)\n    // then writes the normal scene on top\n    final.render()\n  }, 1)\n\n  return null\n}\n\n","import React from \"react\"\nimport { useFrame } from \"react-three-fiber\"\nimport { Vector3 } from \"three\"\nimport shallow from \"zustand/shallow\"\nimport { OrbitControls } from \"drei\"\n\nimport { useStore } from \"../store\"\nimport { RADIUS, ZOOM_DURATION } from \"../constants\"\n\nexport function CameraRig () {\n  const [zoomTarget, zoomStartTime, zoomStartPosition] = useStore(state =>\n    [state.zoomTarget, state.zoomStartTime, state.zoomStartPosition], shallow)\n  const setZoomStartTime = useStore(state => state.setZoomStartTime)\n  const setZoomStartPosition = useStore(state => state.setZoomStartPosition)\n  const setZoomTarget = useStore(state => state.setZoomTarget)\n\n  useFrame(({ camera, clock }) => {\n    if (zoomTarget) {\n      if (!zoomStartTime) {\n        setZoomStartTime(clock.elapsedTime)\n        setZoomStartPosition(new Vector3().copy(camera.position)) // copy, otherwise reference is stored!\n        return\n      }\n      let zoomDurationScaledByDistance = ZOOM_DURATION\n      const distanceToZoom = zoomStartPosition.distanceTo(zoomTarget)\n      if (distanceToZoom < 0.5) zoomDurationScaledByDistance = ZOOM_DURATION / 6\n      if (distanceToZoom < 1) zoomDurationScaledByDistance = ZOOM_DURATION / 2\n      if (distanceToZoom > 3) zoomDurationScaledByDistance = ZOOM_DURATION * 1.5\n      if (!zoomDurationScaledByDistance || clock.elapsedTime > zoomStartTime + zoomDurationScaledByDistance) {\n        setZoomTarget(null)\n        setZoomStartTime(null)\n        setZoomStartPosition(null)\n        return\n      }\n      const a = (clock.elapsedTime - zoomStartTime) / zoomDurationScaledByDistance\n      const newCamPos = new Vector3().lerpVectors(zoomStartPosition, zoomTarget, a)\n      camera.position.copy(newCamPos)\n      camera.updateProjectionMatrix()\n    }\n  })\n\n\n  return (\n    <OrbitControls enableDamping minDistance={RADIUS} maxDistance={20} enablePan={false} zoomSpeed={0.2} />\n  )\n}\n","import React, { forwardRef, useMemo, useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { Vector3, Spherical, Color, AdditiveBlending, ShaderMaterial } from 'three'\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: { time: { value: 0.0 }, fade: { value: 1.0 } },\n      depthWrite: false,\n      vertexShader: `uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader: `uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`,\n    })\n  }\n}\n\n\nconst genStar = (r) => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI)) }\n\nexport const Stars = forwardRef(\n  ({ radius = 100, depth = 50, count = 5000, saturation = 0, factor = 4, fade = false }, ref) => {\n    const material = useRef()\n    const [position, color, size] = useMemo(() => {\n      const positions = []\n      const colors = []\n      const sizes = Array.from({ length: count }, () => (0.5 + 0.5 * Math.random()) * factor)\n      const color = new Color()\n      let r = radius + depth\n      const increment = depth / count\n      for (let i = 0; i < count; i++) {\n        r -= increment * Math.random()\n        positions.push(...genStar(r).toArray())\n        color.setHSL(i / count, saturation, 1)\n        colors.push(color.r, color.g, color.b)\n      }\n      return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)]\n    }, [count, depth, factor, radius, saturation])\n    useFrame((state) => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()))\n\n    const starfieldMaterial = useMemo(() => new StarfieldMaterial(), [])\n\n    return (\n      <points ref={ref}>\n        <bufferGeometry attach=\"geometry\">\n          <bufferAttribute attachObject={['attributes', 'position']} args={[position, 3]} />\n          <bufferAttribute attachObject={['attributes', 'color']} args={[color, 3]} />\n          <bufferAttribute attachObject={['attributes', 'size']} args={[size, 1]} />\n        </bufferGeometry>\n        <primitive\n          ref={material}\n          object={starfieldMaterial}\n          attach=\"material\"\n          blending={AdditiveBlending}\n          uniforms-fade-value={fade}\n          transparent\n          vertexColors\n        />\n      </points>\n    )\n  }\n)\n","import \"./styles.css\"\n\nimport React, { Suspense } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ControlsProvider } from 'react-three-gui'\nimport Credits from \"./components/Credits\"\nimport { Canvas } from \"react-three-fiber\"\nimport { CineonToneMapping } from \"three\"\nimport cities from \"./lib/cities.json\"\nimport Lights from \"./components/Lights\"\nimport { LightGlobe } from \"./components/LightGlobe/LightGlobe\"\nimport { Stats } from \"drei\"\nimport { LoadingIndicator } from \"./components/LoadingIndicator\"\nimport { BG_COLOR, IS_LIVE } from \"./constants\"\nimport { Effects } from \"./components/Effects\"\nimport { CameraRig } from \"./components/CameraRig\"\nimport { Stars } from \"./components/Stars\"\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <ControlsProvider>\n        <Canvas\n          colorManagement\n          concurrent\n          onCreated={({ gl }) => gl.setClearColor(BG_COLOR)}\n          gl={{ antialias: true, toneMapping: CineonToneMapping }}\n        >\n          <fogExp2 attach=\"fog\" args={[\"#020202\", 0.15]} />\n          <Lights />\n          {\n            IS_LIVE\n              ? (\n                <Suspense fallback={<LoadingIndicator />}>\n                  <LightGlobe cities={cities} />\n                </Suspense>\n              )\n              : <LoadingIndicator />\n          }\n          <CameraRig />\n          <Stars factor={2.5} saturation={0.3} fade />\n          <Stats />\n          <Effects />\n        </Canvas>\n      </ControlsProvider>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n"],"sourceRoot":""}