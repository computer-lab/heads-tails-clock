{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","lib/index.js","components/WebcamImageManager.js","components/LightGlobe/Headlights/EightSeriesHeadlights.js","lib/volumetric-spotlight.js","components/LightGlobe/Headlights/VolumetricSpotlight.js","components/LightGlobe/Headlights/HeadlightBeams.js","components/LightGlobe/LightGlobe.js","index.js"],"names":["className","rel","href","target","intensity","position","attach","args","color","fog","corsProxy","WebcamImageManager","src","handleUpdateCubeMap","imgRef","useRef","useFrame","newSrc","Math","floor","Date","getTime","current","useEffect","onload","inputWidth","naturalWidth","inputHeight","naturalHeight","inputImageAspectRatio","outputWidth","outputHeight","outputImage","document","createElement","width","height","getContext","drawImage","map","CubeTexture","needsUpdate","alt","style","display","crossOrigin","ref","EightSeriesHeadlights","locations","React","useState","nycCubeMap","setNycCubeMap","hkCubeMap","setHkCubeMap","nodes","useLoader","GLTFLoader","process","draco","midDetailNodes","lowDetailNodes","refs","createRef","r","lookAt","rotateY","PI","meshObjects","i","name","lightOn","envMap","scale","key","visible","geometry","roughness","envMapIntensity","clearcoat","metalness","opacity","transmission","transparent","depthWrite","distances","emissive","side","BackSide","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","THREE","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","extend","VolumetricSpotlight","MyVolumetricSpotlight","forwardRef","props","vs","spotlight","scene","useThree","angle","penumbra","distance","add","applyMatrix4","makeTranslation","parameters","makeRotationX","material","copy","clock","targetPos","getWorldPosition","x","setRef","useCallback","el","set","uniforms-lightColor-value","uniforms-attenuation-value","uniforms-anglePower-value","HeadlightBeams","rotation","beams","LightGlobe","group","setRotation","differenceInSeconds","startOfDay","y","cities","filter","c","render","lat","lng","abs","latlngToSphericalCoords","radius","inclination","azimuth","sin","cos","z","sphericalCoordsToCartesian","onDarkSide","Vector3","Matrix4","makeRotationY","blinker","blinkingOn","getSeconds","loader","center","App","Credits","colorManagement","concurrent","gl","antialias","background","Lights","fallback","enablePan","zoomSpeed","factor","saturation","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.a97b1b6a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Sunrise / Sunset\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.15} />\n      <mesh position={[-200, -10, 0]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[4, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"#FFFF99\" fog={false} />\n      </mesh>\n      <directionalLight\n        intensity={0.6}\n        position={[-1, 0, 0]}\n        color={0xffffdd}\n      />\n    </group>\n  );\n};\n","\nimport startOfDay from 'date-fns/startOfDay'\nimport differenceInSeconds from 'date-fns/differenceInSeconds'\n\nexport function sphericalCoordsToCartesian (radius, inclination, azimuth) {\n  /*\n   * Inclination is in the range [0, pi], from straight up (the zenith)\n   * Azimuth is in the range [0, 2pi], from the x axis\n   * See: https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n   */\n  const x = radius * Math.sin(inclination) * Math.cos(azimuth);\n  const z = radius * Math.sin(inclination) * Math.sin(azimuth);\n  const y = radius * Math.cos(inclination);\n  return [-x, y, z];\n}\n\nexport function latlngToSphericalCoords (lat, lng) {\n  const inclination = Math.PI * (lat > 0 ? 90 - lat : 90 + Math.abs(lat)) / 180;\n  const azimuth = 2 * Math.PI * (lng >= 0 ? lng : 360 - Math.abs(lng)) / 360; \n  return [inclination, azimuth];\n}\n\nexport function calculateAngleForTime () {\n  const secondsElapsedInDay = differenceInSeconds(\n    new Date(),\n    startOfDay(new Date()),\n  )\n\n  const dayProgress = secondsElapsedInDay / (24 * 60 * 60);\n  return dayProgress * 2 * Math.PI - (Math.PI / 4);\n}\n\n// export const citiesWhereHeadlightsOn = ['Shanghai', 'New York City', 'Berlin', 'Mexico City',  'London', 'Los Angeles', 'Mumbai', 'Sydney', 'Cairo', 'Seoul', 'Moscow', 'Buenos Aires']\nexport const citiesWhereHeadlightsOn = ['Shanghai', 'New York City', 'Berlin', 'Mexico City',  'London', 'Los Angeles', 'Mumbai', 'Sydney', 'Cairo', 'Seoul', 'Moscow', 'Buenos Aires']\n","import React, { useEffect, useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Html } from \"drei\";\nimport { CubeTexture } from \"three\";\n\nconst corsProxy = 'http://cors-anywhere.services.computerlab.io:8080';\n\nexport function WebcamImageManager ({ src, handleUpdateCubeMap }) {\n  const imgRef = useRef();\n\n  useFrame(() => {\n    const newSrc = `${corsProxy}/${src}&rand=${Math.floor(new Date().getTime() / 1000)}`\n    if (newSrc !== imgRef.current.src) imgRef.current.src = newSrc\n  })\n\n  useEffect(() => {\n    imgRef.current.onload = () => {\n      const inputWidth = imgRef.current.naturalWidth;\n      const inputHeight = imgRef.current.naturalHeight;\n\n      // const dy = inputHeight / 3;\n      // const dx = Math.floor(inputWidth / 3);\n\n      // get the aspect ratio of the input image\n      const inputImageAspectRatio = inputWidth / inputHeight;\n      const outputImageAspectRatio = 1;\n\n      // if it's bigger than our target aspect ratio\n      let outputWidth = inputWidth;\n      let outputHeight = inputHeight;\n      if (inputImageAspectRatio > outputImageAspectRatio) {\n        outputWidth = inputHeight * outputImageAspectRatio;\n      } else if (inputImageAspectRatio < outputImageAspectRatio) {\n        outputHeight = inputWidth / outputImageAspectRatio;\n      }\n\n      const outputImage = document.createElement('canvas');\n\n      // let ctx\n      // const emptySmallImage = document.createElement('canvas');\n      // emptySmallImage.width = dx;\n      // emptySmallImage.height = dx;\n      // // create a canvas that will present the output image\n      // const px = document.createElement('canvas');\n      // px.width = dx;\n      // px.height = dx;\n      // ctx = px.getContext('2d')\n      // ctx.drawImage(imgRef.current, 2 * dx, 0, dx, dx, 0, 0, dx, dx);\n      // const nx = document.createElement('canvas');\n      // nx.width = dx;\n      // nx.height = dx;\n      // ctx = nx.getContext('2d')\n      // ctx.drawImage(imgRef.current, 0, 0, dx, dx, 0, 0, dx, dx);\n      // const pz = document.createElement('canvas');\n      // pz.width = dx;\n      // pz.height = dx;\n      // ctx = pz.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const py = document.createElement('canvas');\n      // py.width = dx;\n      // py.height = dx;\n      // ctx = py.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const ny = document.createElement('canvas');\n      // ny.width = dx;\n      // ny.height = dx;\n      // ctx = ny.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 2 * dx, dx, dx, 0, 0, dx, dx);\n\n\n      // const emptyImage = document.createElement('canvas');\n\n      // set it to the same size as the image\n      outputImage.width = outputWidth;\n      outputImage.height = outputHeight;\n      // emptyImage.width = outputWidth;\n      // emptyImage.height = outputHeight;\n\n      // draw our image at position 0, 0 on the canvas\n      let ctx = outputImage.getContext('2d');\n      ctx.drawImage(imgRef.current, 0, 0);\n\n      // show both the image and the canvas\n\n      // const map = new CubeTexture(\n      //   [px, nx, emptySmallImage, emptySmallImage, pz, pz ]\n      // )\n\n      const map = new CubeTexture(\n        [outputImage, outputImage, outputImage, outputImage, outputImage, outputImage ]\n      )\n      map.needsUpdate = true;\n      handleUpdateCubeMap(map)\n    }\n  }, [handleUpdateCubeMap])\n\n\n  return (\n    <Html>\n      <img alt='nyc traffic cam' style={{ display: 'none' }} crossOrigin=\"anonymous\" ref={imgRef} src={`${corsProxy}/${src}`} />\n    </Html>\n  )\n}\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco, Detailed } from \"drei\";\nimport { BackSide } from \"three\";\nimport { WebcamImageManager } from \"../../WebcamImageManager\";\n\nconst hkSrc = 'https://tdcctv.data.one.gov.hk/K107F.JPG?';\nconst nycSrc = 'http://207.251.86.238/cctv884.jpg?'\n\nexport function EightSeriesHeadlights ({ locations }) {\n  const [nycCubeMap, setNycCubeMap] = React.useState(null)\n  const [hkCubeMap, setHkCubeMap] = React.useState(null)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-simplified.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: midDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-mid-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-very-low-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = locations.map(({ position, name, lightOn }, i) => {\n    const envMap = {\n      \"New York City\": nycCubeMap,\n      'Mexico City': nycCubeMap,\n      \"Hong Kong\": hkCubeMap,\n      \"Qingdao\": hkCubeMap,\n      \"Seoul\": hkCubeMap,\n      \"Dhaka\": hkCubeMap,\n    }\n    return (\n      <group scale={[0.02, 0.02, 0.02 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh visible geometry={nodes['visor'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            envMap={envMap[name]}\n            envMapIntensity={1.5}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transmission={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 2.5, 5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0x778899}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={midDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0x778899}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0x778899}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh>\n            <mesh visible geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={0xddeeff}\n                roughness={0.2}\n                metalness={0.8}\n                emissive={lightOn ? 0xaaaaff : 0x000000}\n                opacity={1}\n                transparent\n                transmission={0.94}\n                depthWrite={false}\n              />\n            </mesh>\n            <mesh visible geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={0xddeeff}\n                roughness={0.2}\n                metalness={0.8}\n                emissive={lightOn ? 0xaaaaff : 0x000000}\n                opacity={1}\n                transparent\n                transmission={0.4}\n                depthWrite={false}\n                side={BackSide}\n              />\n            </mesh>\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['griddy-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.2}\n              metalness={0.8}\n              emissive={lightOn ? 0xaaaaff : 0x000000}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <mesh visible geometry={nodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xaaaaff}\n            roughness={0.3}\n            metalness={0.5}\n            emissive={lightOn ? 0xaaaaff : 0x000000}\n          />\n        </mesh>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['top-light'].geometry}>\n            <meshPhysicalMaterial\n              attach=\"material\"\n              color={0xddffff}\n              roughness={0.1}\n              metalness={0.8}\n              emissive={lightOn ? 0xaaaaff : 0x000000}\n              opacity={1}\n              transparent\n              transmission={0.5}\n              depthWrite={false}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddffff}\n              roughness={0.1}\n              metalness={0.8}\n              emissive={lightOn ? 0xaaaaff : 0x000000}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['complex--inner-thing-1'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0x3333ff}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['complex--inner-thing-1'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0x3333ff}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['complex-inner-thing-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0x3333ff}\n              roughness={0.3}\n              metalness={0.5}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['complex-inner-thing-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0x3333ff}\n              roughness={0.3}\n              metalness={0.5}\n            />\n          </mesh>\n        </Detailed>\n      </group>\n    )})\n  return (\n    <group>\n      <WebcamImageManager src={nycSrc} handleUpdateCubeMap={setNycCubeMap} />\n      <WebcamImageManager src={hkSrc} handleUpdateCubeMap={setHkCubeMap} />\n      {meshObjects}\n    </group>\n  )\n}\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    // side\t\t: THREE.DoubleSide,\n    // blending\t: THREE.AdditiveBlending,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect } from \"react\";\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\n\nimport * as THREE from \"three\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\n\nextend({\n  VolumetricSpotlight\n});\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const vs = React.useRef();\n  const spotlight = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    angle = 0.2,\n    penumbra = 0.6,\n    distance = 3,\n    color,\n    intensity,\n    position,\n    target\n  } = props;\n\n  // INIT\n  useEffect(() => {\n    scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix4(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    spotlight.current.position.copy(vs.current.position);\n  }, [scene]);\n\n  useFrame(({ clock }) => {\n    spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3();\n      target.current.getWorldPosition(targetPos) ;\n      vs.current.lookAt(targetPos);\n      if  (targetPos.x < 0) {\n        // vs.current.material.uniforms.lightColor.value = new THREE.Color(0xffe7dd);\n        // vs.current.material.uniforms.lightColor.value = new THREE.Color(0xffe7dd);\n        vs.current.material.uniforms.attenuation.value = 4;\n\n      }\n      spotlight.current.target.position.copy(targetPos);\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // maps spotlight angle to volueme cylinder every frame\n  // it would be better to do it on a need-to basis\n  // but it doesn't play nice with react-spring\n  useFrame(() => {\n    const angle = spotlight.current.angle;\n\n    vs.current.scale.set(1.25 * angle, 1 * angle, 1);\n  });\n\n  return (\n    <>\n      <spotLight\n        ref={spotlight}\n        intensity={intensity}\n        angle={angle}\n        penumbra={penumbra}\n        distance={distance}\n        color={color}\n      />\n\n      <mesh ref={setRef} position={position}>\n        <cylinderGeometry args={[0.2, 15, 64, 30, 40, true]} attach=\"geometry\" />\n\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-lightColor-value={color}\n          uniforms-attenuation-value={6}\n          uniforms-anglePower-value={1.2}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, { useRef, createRef } from \"react\";\n\nimport { MyVolumetricSpotlight } from \"./VolumetricSpotlight\";\n\n\nexport function HeadlightBeams ({ locations, rotation }) {\n  const refs = useRef(locations.map(() => createRef()))\n\n  const beams = locations.map(({ position, lightOn }, i ) => {\n    if (!lightOn) return <group key={i} />\n    return (\n      <group key={i}>\n        <mesh\n          ref={refs.current[i]}\n          position={[position[0] * 10, position[1] * 10, position[2] * 10]}\n        >\n        </mesh>\n        <MyVolumetricSpotlight\n          position={[position[0] * 0.98, position[1] * 0.98, position[2] * 0.98]}\n          color={0xccccef}\n          target={refs.current[i]}\n          intensity={1}\n        />\n      </group>\n    )\n  })\n\n  return (\n    <>\n      {beams}\n    </>\n  );\n};\n","import React, { useRef, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\n\nimport { sphericalCoordsToCartesian, latlngToSphericalCoords, calculateAngleForTime } from \"../../lib\";\nimport cities from \"../../lib/cities.json\";\nimport { Vector3, Matrix4 } from 'three'\n\nimport { EightSeriesHeadlights } from \"./Headlights/EightSeriesHeadlights\";\nimport { HeadlightBeams } from \"./Headlights/HeadlightBeams\";\n\nexport function LightGlobe () {\n  const group = useRef();\n  const [rotation, setRotation] = useState()\n\n  useFrame(() => {\n    const r = calculateAngleForTime()\n    setRotation(r)\n    group.current.rotation.y = r\n  });\n\n  const RADIUS = 3;\n  const locations = cities\n    .filter(c => c.render)\n    .map(({ lat, lng, name }, i) => {\n      const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n      const position = sphericalCoordsToCartesian(RADIUS, inc, azm);\n      const pos = new Vector3(...position)\n      const worldPos = pos.applyMatrix4(new Matrix4().makeRotationY(rotation))\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const blinker = i % 3 === 0\n      const blinkingOn = new Date().getSeconds() % 10 > 5\n      let lightOn = false\n      if (onDarkSide) {\n        lightOn = blinker ? blinkingOn : true\n      }\n      return {\n        position,\n        name,\n        lightOn\n      }\n    })\n\n  return (\n    <group ref={group}>\n      <EightSeriesHeadlights locations={locations} />\n      <HeadlightBeams locations={locations} />\n    </group>\n  )\n  ;\n};\n","import \"./styles.css\";\n\nimport React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Credits from \"./components/Credits\";\nimport { Canvas } from \"react-three-fiber\";\nimport Lights from \"./components/Lights\";\nimport { LightGlobe } from \"./components/LightGlobe/LightGlobe\";\nimport { OrbitControls, Stars, Html, Stats } from \"drei\";\n\nconst loader = (\n  <Html center>\n    <div className='loading'>\n      <h1 style={{color: 'white'}}>TODAY IS NOTHING LIKE TOMORROW IS NOTHING LIKE TODAY</h1>\n      <h3 style={{color: 'white'}}>LOADING...</h3>\n    </div>\n  </Html>\n)\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <Canvas\n        colorManagement\n        concurrent\n        gl={{ antialias: true }}\n        style={{ background: '#020204' }}\n      >\n        <fog attach=\"fog\" args={[\"#020204\", 1, 15]} />\n        <Lights />\n        <Suspense fallback={loader}>\n          <LightGlobe />\n        </Suspense>\n        <OrbitControls enablePan={false} zoomSpeed={0.5} />\n        <Stars factor={2} saturation={0.7} />\n        <Stats />\n      </Canvas>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}