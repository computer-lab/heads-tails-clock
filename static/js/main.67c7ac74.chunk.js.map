{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","lib/index.js","components/WebcamImageManager.js","components/LightGlobe/Headlights/EightSeriesHeadlights.js","components/withClickToZoom.js","constants.js","components/LightGlobe/Headlights/ThreeSeriesHeadlights.js","lib/volumetric-spotlight.js","components/LightGlobe/Headlights/VolumetricSpotlight.js","components/LightGlobe/Headlights/HeadlightBeams.js","components/LightGlobe/Headlights/FillerLights.js","components/LightGlobe/LightGlobe.js","components/LoadingIndicator.js","components/Effects.js","index.js"],"names":["className","rel","href","target","intensity","position","userData","bloom","attach","args","color","fog","isIntervalActive","periodLength","intervalStart","intervalEnd","offset","t","Date","getTime","corsProxy","WebcamImageManager","src","handleUpdateCubeMap","imgRef","useRef","useFrame","newSrc","Math","floor","current","useEffect","onload","inputWidth","naturalWidth","inputHeight","naturalHeight","inputImageAspectRatio","outputWidth","outputHeight","outputImage","document","createElement","width","height","getContext","drawImage","map","CubeTexture","needsUpdate","alt","style","display","crossOrigin","ref","WrappedComponent","EightSeriesHeadlights","handleClick","locations","React","useState","nycCubeMap","setNycCubeMap","hkCubeMap","setHkCubeMap","nodes","useLoader","GLTFLoader","draco","midDetailNodes","lowDetailNodes","refs","createRef","r","lookAt","rotateY","PI","meshObjects","i","name","onDarkSide","blinkingOff","turnLightOn","envMap","scale","key","visible","geometry","onClick","roughness","envMapIntensity","clearcoat","metalness","opacity","transmission","transparent","depthWrite","distances","emissive","side","BackSide","props","zoomTarget","setZoomTarget","zoomStartTime","setZoomStartTime","zoomStartPosition","setZoomStartPosition","camera","clock","console","log","elapsedTime","a","copy","lerp","updateProjectionMatrix","useCallback","e","stopPropagation","point","getBulbEmissive","ThreeSeriesHeadlights","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","THREE","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","extend","VolumetricSpotlight","MyVolumetricSpotlight","forwardRef","vs","scene","useThree","length","angle","scaleX","geometryLength","openEnded","applyMatrix4","makeTranslation","parameters","makeRotationX","set","targetPos","getWorldPosition","rotateZ","setRef","el","uniforms-lightColor-value","uniforms-attenuation-value","uniforms-anglePower-value","HeadlightBeams","bloomRefs","beams","useMemo","lightHigh","lightLaser","lightLow","render","posScaleFactor","lightLength","dummy","initInstancedMesh","instanced","lightGuide","forEach","location","updateMatrix","setMatrixAt","matrix","instanceMatrix","FillerLights","instancedMeshVisor","instancedMeshLightGuideOn","instancedMeshLightGuideOff","instancedMeshLens","LightGlobe","cities","group","rotation","setRotation","valueOf","y","reduce","acc","cur","nearbyIdx","findIndex","c","lat","toFixed","lng","population","push","abs","latlngToSphericalCoords","radius","inclination","azimuth","x","sin","cos","z","sphericalCoordsToCartesian","RADIUS","Vector3","Matrix4","makeRotationY","filter","LoadingIndicator","progress","useProgress","center","xmlns","xmlnsXlink","viewBox","d","id","attributeName","begin","dur","from","to","repeatCount","dominantBaseline","textAnchor","round","dy","textLength","xlinkHref","EffectComposer","RenderPass","UnrealBloomPass","materials","darkMaterial","transparentDarkMaterial","darkenNonBloomed","obj","isMesh","uuid","material","restoreMaterial","Effects","gl","size","renderScene","comp","renderToScreen","addPass","finalComposer","finalPass","ShaderPass","baseTexture","bloomTexture","renderTarget2","texture","needsSwap","final","setSize","traverse","App","Credits","colorManagement","concurrent","onCreated","setClearColor","antialias","toneMapping","CineonToneMapping","Lights","fallback","enableDamping","minDistance","maxDistance","enablePan","zoomSpeed","factor","saturation","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.67c7ac74.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Sunrise / Sunset\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.6} />\n      <mesh position={[-200, -10, 0]} userData={{ bloom: true }}>\n        <sphereBufferGeometry attach=\"geometry\" args={[4, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"#EEEE88\" fog={false} />\n      </mesh>\n      <directionalLight\n        intensity={0.9}\n        position={[-1, 0, 0]}\n        color={0xfffdf2}\n      />\n    </group>\n  );\n};\n","export function sphericalCoordsToCartesian (radius, inclination, azimuth) {\n  /*\n   * Inclination is in the range [0, pi], from straight up (the zenith)\n   * Azimuth is in the range [0, 2pi], from the x axis\n   * See: https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n   */\n  const x = radius * Math.sin(inclination) * Math.cos(azimuth);\n  const z = radius * Math.sin(inclination) * Math.sin(azimuth);\n  const y = radius * Math.cos(inclination);\n  return [-x, y, z];\n}\n\nexport function latlngToSphericalCoords (lat, lng) {\n  const inclination = Math.PI * (lat > 0 ? 90 - lat : 90 + Math.abs(lat)) / 180;\n  const azimuth = 2 * Math.PI * (lng >= 0 ? lng : 360 - Math.abs(lng)) / 360; \n  return [inclination, azimuth];\n}\n\nconst SECONDS_IN_DAY = 24 * 60 * 60;\n\nexport function calculateAngleForTime () {\n  const unixEraSeconds = Math.floor(new Date().valueOf() / 1000);\n  const secondsElapsedInDay = unixEraSeconds % SECONDS_IN_DAY;\n  const dayProgress = secondsElapsedInDay / SECONDS_IN_DAY;\n  return dayProgress * 2 * Math.PI + Math.PI;\n}\n\nexport function isIntervalActive (periodLength, intervalStart, intervalEnd, offset) {\n  const t = (new Date().getTime() + offset * 1000) % (periodLength * 1000)\n  return t < intervalEnd * 1000 && t >= intervalStart * 1000;\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Html } from \"drei\";\nimport { CubeTexture } from \"three\";\n\nconst corsProxy = 'https://cors-anywhere.services.computerlab.io';\n\nexport function WebcamImageManager ({ src, handleUpdateCubeMap }) {\n  const imgRef = useRef();\n\n  useFrame(() => {\n    const newSrc = `${corsProxy}/${src}&rand=${Math.floor(new Date().getTime() / 1000)}`\n    if (newSrc !== imgRef.current.src) imgRef.current.src = newSrc\n  })\n\n  useEffect(() => {\n    imgRef.current.onload = () => {\n      const inputWidth = imgRef.current.naturalWidth;\n      const inputHeight = imgRef.current.naturalHeight;\n\n      // const dy = inputHeight / 3;\n      // const dx = Math.floor(inputWidth / 3);\n\n      // get the aspect ratio of the input image\n      const inputImageAspectRatio = inputWidth / inputHeight;\n      const outputImageAspectRatio = 1;\n\n      // if it's bigger than our target aspect ratio\n      let outputWidth = inputWidth;\n      let outputHeight = inputHeight;\n      if (inputImageAspectRatio > outputImageAspectRatio) {\n        outputWidth = inputHeight * outputImageAspectRatio;\n      } else if (inputImageAspectRatio < outputImageAspectRatio) {\n        outputHeight = inputWidth / outputImageAspectRatio;\n      }\n\n      const outputImage = document.createElement('canvas');\n\n      // let ctx\n      // const emptySmallImage = document.createElement('canvas');\n      // emptySmallImage.width = dx;\n      // emptySmallImage.height = dx;\n      // // create a canvas that will present the output image\n      // const px = document.createElement('canvas');\n      // px.width = dx;\n      // px.height = dx;\n      // ctx = px.getContext('2d')\n      // ctx.drawImage(imgRef.current, 2 * dx, 0, dx, dx, 0, 0, dx, dx);\n      // const nx = document.createElement('canvas');\n      // nx.width = dx;\n      // nx.height = dx;\n      // ctx = nx.getContext('2d')\n      // ctx.drawImage(imgRef.current, 0, 0, dx, dx, 0, 0, dx, dx);\n      // const pz = document.createElement('canvas');\n      // pz.width = dx;\n      // pz.height = dx;\n      // ctx = pz.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const py = document.createElement('canvas');\n      // py.width = dx;\n      // py.height = dx;\n      // ctx = py.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const ny = document.createElement('canvas');\n      // ny.width = dx;\n      // ny.height = dx;\n      // ctx = ny.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 2 * dx, dx, dx, 0, 0, dx, dx);\n\n\n      // const emptyImage = document.createElement('canvas');\n\n      // set it to the same size as the image\n      outputImage.width = outputWidth;\n      outputImage.height = outputHeight;\n      // emptyImage.width = outputWidth;\n      // emptyImage.height = outputHeight;\n\n      // draw our image at position 0, 0 on the canvas\n      let ctx = outputImage.getContext('2d');\n      ctx.drawImage(imgRef.current, 0, 0);\n\n      // show both the image and the canvas\n\n      // const map = new CubeTexture(\n      //   [px, nx, emptySmallImage, emptySmallImage, pz, pz ]\n      // )\n\n      const map = new CubeTexture(\n        [outputImage, outputImage, outputImage, outputImage, outputImage, outputImage ]\n      )\n      map.needsUpdate = true;\n      handleUpdateCubeMap(map)\n    }\n  }, [handleUpdateCubeMap])\n\n\n  return (\n    <Html>\n      <img alt='nyc traffic cam' style={{ display: 'none' }} crossOrigin=\"anonymous\" ref={imgRef} src={`${corsProxy}/${src}`} />\n    </Html>\n  )\n}\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco, Detailed } from \"drei\";\nimport { BackSide } from \"three\";\nimport { WebcamImageManager } from \"../../WebcamImageManager\";\nimport { PLASTIC_COLOR, HEADLIGHT_BODY_COLOR, BODY_HIGHLIGHT_COLOR, TURN_SIGNAL_COLOR } from \"../../../constants\"\nimport { withClickToZoom } from '../../withClickToZoom'\n\nconst hkSrc = 'https://tdcctv.data.one.gov.hk/K107F.JPG?';\nconst nycSrc = 'http://207.251.86.238/cctv884.jpg?';\n\nfunction EightSeriesHeadlightsUnwrapped ({ handleClick, locations }) {\n  const [nycCubeMap, setNycCubeMap] = React.useState(null)\n  const [hkCubeMap, setHkCubeMap] = React.useState(null)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-simplified.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: midDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-mid-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-very-low-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff, turnLightOn }, i) => {\n    const envMap = {\n      \"New York City\": nycCubeMap,\n      'Mexico City': nycCubeMap,\n      \"Hong Kong\": hkCubeMap,\n      \"Qingdao\": hkCubeMap,\n      \"Seoul\": hkCubeMap,\n      \"Dhaka\": hkCubeMap,\n    }\n    return (\n      <group scale={[0.02, 0.02, 0.02 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh visible geometry={nodes['visor'].geometry} onClick={handleClick}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            envMap={envMap[name] ? envMap[name] : nycCubeMap}\n            envMapIntensity={1.3}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transmission={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 2.5, 5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry} onClick={handleClick}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={midDetailNodes['headlight-simpler'].geometry} onClick={handleClick}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry} onClick={handleClick}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh>\n            <mesh visible userData={{ bloom: onDarkSide }} geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={PLASTIC_COLOR}\n                roughness={0.2}\n                metalness={0.8}\n                emissive={onDarkSide ? 0xaaaaff : 0x000000}\n                opacity={1}\n                transparent\n                transmission={0.94}\n                depthWrite={false}\n              />\n            </mesh>\n            <mesh visible userData={{ bloom: onDarkSide }} geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={PLASTIC_COLOR}\n                roughness={0.2}\n                metalness={0.8}\n                emissive={onDarkSide ? 0xaaaaff : 0x000000}\n                opacity={1}\n                transparent\n                transmission={0.4}\n                depthWrite={false}\n                side={BackSide}\n              />\n            </mesh>\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['griddy-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={PLASTIC_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n              emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <mesh visible geometry={nodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xaaaaff}\n            roughness={0.3}\n            metalness={0.5}\n            emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n          />\n        </mesh>\n        <Detailed distances={[0, 6]}>\n          <mesh visible userData={{ bloom: true }} geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              emissive={turnLightOn ? TURN_SIGNAL_COLOR : (onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000)}\n              opacity={0.7}\n              depthWrite={false}\n            />\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              emissive={turnLightOn ? TURN_SIGNAL_COLOR : (onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000)}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['complex--inner-thing-1'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['complex--inner-thing-1'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['complex-inner-thing-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.3}\n              metalness={0.5}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['complex-inner-thing-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.3}\n              metalness={0.5}\n            />\n          </mesh>\n        </Detailed>\n      </group>\n    )})\n  return (\n    <group>\n      <WebcamImageManager src={nycSrc} handleUpdateCubeMap={setNycCubeMap} />\n      <WebcamImageManager src={hkSrc} handleUpdateCubeMap={setHkCubeMap} />\n      {meshObjects}\n    </group>\n  );\n}\n\nexport const EightSeriesHeadlights = withClickToZoom(EightSeriesHeadlightsUnwrapped)\n","import React, { useCallback, useState } from 'react'\nimport { useFrame } from 'react-three-fiber'\n\nconst ZOOM_DURATION = 10\n\nexport function withClickToZoom(WrappedComponent) {\n  return function WithClickToZoomComponent(props) {\n    const [zoomTarget, setZoomTarget] = useState(null)\n    const [zoomStartTime, setZoomStartTime] = useState(null)\n    const [zoomStartPosition, setZoomStartPosition] = useState(null)\n\n    useFrame(({ camera, clock }) => {\n      if (zoomTarget) {\n          console.log('zoomStartTime + ZOOM_DURATION:', zoomStartTime + ZOOM_DURATION);\n          console.log('clock.elapsedTime:', clock.elapsedTime);\n        if (!zoomStartTime) {\n          setZoomStartTime(clock.elapsedTime)\n          setZoomStartPosition(camera.position)\n          return\n        }\n        if (clock.elapsedTime > zoomStartTime + ZOOM_DURATION) {\n          setZoomTarget(null)\n          setZoomStartTime(null)\n          setZoomStartPosition(null)\n          return\n        }\n        console.log('zoomTarget:', zoomTarget);\n        const a = (clock.elapsedTime - zoomStartTime) / ZOOM_DURATION\n        console.log('a:', a);\n        camera.position.copy(zoomTarget.lerp(zoomStartPosition, a))\n        camera.updateProjectionMatrix()\n        setZoomTarget(null)\n      }\n    })\n\n    const handleClick = useCallback((e) => {\n      e.stopPropagation();\n      setZoomTarget(e.point)\n\n    }, [])\n\n\n    return (\n      <WrappedComponent handleClick={handleClick} { ...props } />\n    )\n  }\n}\n","// colors\nexport const BG_COLOR = '';\nexport const HEADLIGHT_BODY_COLOR = 0x737b8f;\nexport const TURN_SIGNAL_COLOR = 0xF18F17;\nexport const BODY_HIGHLIGHT_COLOR = 0x0a25ad;\nexport const BODY_DARK_COLOR = 0x040509;\nexport const BEAM_COLOR_LASER = 0xEEEAFF;\nexport const BEAM_COLOR_STANDARD = 0xEAEEF8;\nexport const PLASTIC_COLOR = 0xddeeff;\n\n// geometry\nexport const RADIUS = 3;\n\n// other\nexport const DEFAULT_LAYER = 0;\nexport const BLOOM_LAYER = 1;\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco, Detailed } from \"drei\";\nimport { BackSide } from \"three\";\nimport { PLASTIC_COLOR, TURN_SIGNAL_COLOR, HEADLIGHT_BODY_COLOR, BODY_HIGHLIGHT_COLOR, BODY_DARK_COLOR } from \"../../../constants\"\n\nfunction getBulbEmissive (onDarkSide, turnLightOn) {\n  if (turnLightOn) return TURN_SIGNAL_COLOR\n  if (onDarkSide) return 0xaaaaff\n  return 0x000000\n}\n\nexport function ThreeSeriesHeadlights ({ locations }) {\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/series-3.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/series-3-low-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5.65 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff, turnLightOn }, i) => {\n    return (\n      <group scale={[0.018, 0.018, 0.018 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh visible geometry={lowDetailNodes['visor'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh visible userData={{ bloom: true }} geometry={nodes['bulbs_0'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.1}\n            metalness={0.8}\n            color={0xaaaaff}\n            transparent\n            opacity={0.6}\n            emissive={getBulbEmissive(onDarkSide, turnLightOn)}\n          />\n        </mesh>\n        <mesh userData={{ bloom: true }} visible geometry={nodes['bulbs_1'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.1}\n            metalness={0.8}\n            color={0xaaaaff}\n            transparent\n            opacity={0.6}\n            emissive={onDarkSide ? 0xaaaaff : null}\n          />\n        </mesh>\n        <mesh visible userData={{ bloom: true }} geometry={nodes['bulbs_2'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.1}\n            metalness={0.8}\n            color={0xaaaaff}\n            transparent\n            opacity={0.6}\n            emissive={getBulbEmissive(onDarkSide, turnLightOn)}\n          />\n        </mesh>\n        <Detailed distances={[0, 5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n        </Detailed>\n        <mesh userData={{ bloom: onDarkSide }} visible geometry={nodes['griddy-thing'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={PLASTIC_COLOR}\n            roughness={0.2}\n            metalness={0.8}\n            emissive={onDarkSide ? 0xaaaaff : 0x000000}\n            opacity={1}\n            transparent\n            transmission={0.94}\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh userData={{ bloom: onDarkSide }} visible geometry={nodes['griddy-thing'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={PLASTIC_COLOR}\n            roughness={0.2}\n            metalness={0.8}\n            emissive={onDarkSide ? 0xaaaaff : 0x000000}\n            opacity={1}\n            transparent\n            transmission={0.4}\n            side={BackSide}\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 3]}>\n          <mesh visible userData={{ bloom: true }} geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['griddy-thing-case'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n              // map={nodes['griddy-thing-case'].material.map}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['griddy-thing-case'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              roughness={0.1}\n              metalness={0.8}\n              color={BODY_HIGHLIGHT_COLOR}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n      </group>\n    )})\n  return (\n    <group>\n      {meshObjects}\n    </group>\n  );\n}\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side\t\t: THREE.DoubleSide,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect } from \"react\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\nimport * as THREE from \"three\";\n\nextend({\n  VolumetricSpotlight\n});\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const vs = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    color,\n    length = 6,\n    position,\n    target,\n    angle = 1.2,\n    scaleX = 1,\n    geometryLength = 8,\n    openEnded\n  } = props;\n\n  // INIT\n  useEffect(() => {\n    // scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix4(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    // vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    // spotlight.current.position.copy(vs.current.position);\n    // spotlight.current.position.copy(vs.current.position);\n    // // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    // if (target && target.current) {\n    //   const targetPos = new THREE.Vector3();\n    //   target.current.getWorldPosition(targetPos) ;\n    //   vs.current.lookAt(targetPos);\n    //   spotlight.current.target.position.copy(targetPos);\n    // }\n  }, [scene]);\n\n  useFrame(({ clock }) => {\n    // spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    vs.current.scale.set(scaleX, 1, 1)\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3()\n      target.current.getWorldPosition(targetPos)\n      vs.current.lookAt(targetPos)\n      vs.current.rotateZ(Math.PI / 12)\n      vs.current.rotateY(Math.PI / 12)\n      vs.current.visible = true // prevent glitch on load\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // // maps spotlight angle to volueme cylinder every frame\n  // // it would be better to do it on a need-to basis\n  // // but it doesn't play nice with react-spring\n  // useFrame(() => {\n  //   // const angle = spotlight.current.angle;\n\n  // });\n\n  return (\n    <>\n      {/* <spotLight */}\n      {/*   ref={spotlight} */}\n      {/*   intensity={initialized ? intensity : 0} */}\n      {/*   angle={angle} */}\n      {/*   penumbra={penumbra} */}\n      {/*   distance={distance} */}\n      {/*   color={color} */}\n      {/* /> */}\n      <mesh visible={false} ref={setRef} position={position}>\n        <cylinderGeometry args={[0.05, 0.25, geometryLength, 12, 1, openEnded]} attach=\"geometry\" />\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-lightColor-value={color}\n          uniforms-attenuation-value={length} // as porportion to height of cylinder\n          uniforms-anglePower-value={angle}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, { useRef, createRef, useMemo } from \"react\";\n\nimport { MyVolumetricSpotlight } from \"./VolumetricSpotlight\";\nimport { BEAM_COLOR_LASER, BEAM_COLOR_STANDARD } from \"../../../constants\";\n\n\nexport function HeadlightBeams ({ locations }) {\n  const refs = useRef(locations.map(() => createRef()))\n  const bloomRefs = useRef(locations.map(() => createRef()))\n\n  const beams = useMemo(() => locations.map(({\n    position,\n    onDarkSide,\n    blinkingOff,\n    lightHigh,\n    lightLow,\n    lightLaser,\n    render\n  }, i ) => {\n    if (!onDarkSide) return <group key={i} />\n    const posScaleFactor = render ? 0.98 : 0.995\n    let lightLength = 4\n    if (lightLaser) lightLength = 6\n    if (lightHigh) lightLength = 5\n    return (\n      <group key={i}>\n        <mesh\n          ref={refs.current[i]}\n          position={[position[0] * 10, position[1] * 10, position[2] * 10]}\n        />\n        <mesh\n          ref={bloomRefs.current[i]}\n          position={[position[0] * 2, position[1] * 2, position[2] * 2]}\n        />\n        <MyVolumetricSpotlight\n          position={[position[0] * posScaleFactor, position[1] * posScaleFactor, position[2] * posScaleFactor]}\n          color={lightLaser ? BEAM_COLOR_LASER : BEAM_COLOR_STANDARD}\n          length={lightLength}\n          target={refs.current[i]}\n          angle={lightLaser ? 1.3 : 1.2}\n          scaleX={lightLaser ? 1.5 : 3}\n          openEnded\n        />\n        {render && (\n          <MyVolumetricSpotlight\n            position={[position[0] * 1.02, position[1] * 1.02, position[2] * 1.02]}\n            color={lightLaser ? BEAM_COLOR_LASER : BEAM_COLOR_STANDARD}\n            length={3.9}\n            geometryLength={1}\n            target={bloomRefs.current[i]}\n            angle={lightLaser ? 1.4 : 1.1}\n            scaleX={3.5}\n            openEnded={true}\n          />\n        )}\n      </group>\n    )\n  }), [locations])\n\n  return (\n    <>\n      {beams}\n    </>\n  );\n};\n","import React, { useRef, useEffect } from 'react'\nimport * as THREE from 'three'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco } from \"drei\";\n\nconst dummy = new THREE.Object3D();\n\nfunction initInstancedMesh(instanced, locations, lightGuide) {\n  locations.forEach((location, i) => {\n    const { position } = location\n    dummy.position.set(...position)\n    let scale = [0.015, 0.015, 0.015]\n    if (lightGuide === 'on' && !location.onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    if (lightGuide === 'off' && location.onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    dummy.scale.set(...scale)\n    dummy.lookAt(0, 0, 0)\n    dummy.rotateY( 5.6 * Math.PI / 4)\n    dummy.updateMatrix()\n    instanced.current.setMatrixAt(i, dummy.matrix)\n  })\n  instanced.current.instanceMatrix.needsUpdate = true\n}\n\nexport function FillerLights ({ locations }) {\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/laser.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  )\n\n  const instancedMeshVisor = useRef()\n  const instancedMeshLightGuideOn = useRef()\n  const instancedMeshLightGuideOff = useRef()\n  const instancedMeshLens = useRef()\n\n\n  useEffect(() => {\n    initInstancedMesh(instancedMeshVisor, locations);\n    initInstancedMesh(instancedMeshLightGuideOn, locations, 'on');\n    initInstancedMesh(instancedMeshLightGuideOff, locations, 'off');\n    initInstancedMesh(instancedMeshLens, locations);\n  }, [locations])\n\n  return (\n    <group>\n      <instancedMesh ref={instancedMeshVisor} geometry={nodes['visor'].geometry} userData={{ bloom: true }} args={[null, null, locations.length]} >\n        <meshPhysicalMaterial\n          attach=\"material\"\n          color={0xccccff}\n          roughness={0.05}\n          clearcoat={0.9}\n          metalness={0.9}\n          opacity={1}\n          transmission={0.6}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOff} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOn} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          emissive={0xaaaaff}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLens} userData={{ bloom: true }} geometry={nodes['lens'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          roughness={0.3}\n          metalness={0.5}\n          color={0xaaaaff}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n    </group>\n  )\n}\n","import React, { useRef, useState, useMemo } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Vector3, Matrix4 } from 'three';\n\nimport {\n  sphericalCoordsToCartesian,\n  latlngToSphericalCoords,\n  calculateAngleForTime,\n  isIntervalActive\n} from \"../../lib\";\nimport { EightSeriesHeadlights } from \"./Headlights/EightSeriesHeadlights\";\nimport { ThreeSeriesHeadlights } from \"./Headlights/ThreeSeriesHeadlights\";\nimport { HeadlightBeams } from \"./Headlights/HeadlightBeams\";\nimport { FillerLights } from \"./Headlights/FillerLights\";\nimport { RADIUS } from '../../constants';\n\nconst PRECISION = 1\n\nexport function LightGlobe ({ cities }) {\n  const group = useRef();\n  const [rotation, setRotation] = useState()\n\n  useFrame(() => {\n    const r = calculateAngleForTime()\n    if (r === rotation) return\n    setRotation(r)\n    group.current.rotation.y = r\n  });\n\n  const dedupedLocations = useMemo(() =>\n    cities.reduce((acc, cur) => {\n      const nearbyIdx = acc.findIndex(c => cur.lat.toFixed(PRECISION) === c.lat.toFixed(PRECISION) || cur.lng.toFixed(PRECISION) === c.lng.toFixed(PRECISION))\n      if (nearbyIdx > 0 && cur.population > acc[nearbyIdx].population) {\n        acc[nearbyIdx] = cur\n        return acc\n      }\n      acc.push(cur)\n      return acc\n    }, []),\n    [cities]\n  )\n\n  const locations = dedupedLocations \n    .map(({ lat, lng, name, render }, i) => {\n      const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n      const position = sphericalCoordsToCartesian(render ? RADIUS : RADIUS - 0.2, inc, azm);\n      const pos = new Vector3(...position)\n      const worldPos = pos.applyMatrix4(new Matrix4().makeRotationY(rotation))\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const lightLow = isIntervalActive(120, 0, 40, i)\n      const lightHigh = isIntervalActive(120, 40, 70, i)\n      const lightLaser = isIntervalActive(120, 70, 120, i)\n      const turnLightOn = isIntervalActive(60, 0, 20, i) && isIntervalActive(2, 0, 1, i)\n      // TODO:\n      // 1. turn signals blinks on and off for thirty seconds\n      // 2. goes from hi-beam to low-beam on one minute interval\n      // 3. angles down 20 degrees for fifteen seconds\n      return {\n        render,\n        position,\n        name,\n        onDarkSide,\n        turnLightOn,\n        lightLow,\n        lightHigh,\n        lightLaser\n      }\n    })\n\n  return (\n    <group ref={group}>\n      <EightSeriesHeadlights locations={locations.filter(({ render }) => render === 'EightSeries')} />\n      <ThreeSeriesHeadlights locations={locations.filter(({ render }) => render === 'ThreeSeries')} />\n      <FillerLights locations={locations.filter(({ render }) => !render)} />\n      <HeadlightBeams locations={locations} />\n    </group>\n  );\n};\n","import React from 'react';\nimport { Html, useProgress } from \"drei\";\n\nexport function LoadingIndicator () {\n  const { progress } = useProgress()\n  return (\n    <Html center>\n      <div className='loading'>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 500 500\">\n          <title>TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</title>\n          <defs>\n            <path d=\"M50,250c0-110.5,89.5-200,200-200s200,89.5,200,200s-89.5,200-200,200S50,360.5,50,250\" id=\"textcircle\">\n              <animateTransform\n                attributeName=\"transform\"\n                begin=\"0s\"\n                dur=\"30s\"\n                type=\"rotate\"\n                from=\"0 250 250\"\n                to=\"360 250 250\"\n                repeatCount=\"indefinite\" \n              />\n              </path>\n            </defs>\n            <text className=\"progress\" x=\"50%\" y=\"50%\" dominantBaseline=\"middle\" textAnchor=\"middle\">Loading {Math.round(progress)}%</text>    \n            <text dy=\"70\" textLength=\"1220\">\n              <textPath className=\"circle-text\" xlinkHref=\"#textcircle\">TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</textPath>\n            </text>\n          </svg>\n        </div>\n      </Html>\n  )\n\n}\n","import { useEffect, useMemo } from 'react'\nimport * as THREE from 'three'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass })\n\nconst materials = {}\nconst darkMaterial = new THREE.MeshBasicMaterial({ color: 'black' })\nconst transparentDarkMaterial = new THREE.MeshBasicMaterial({ color: 'black', depthWrite: false })\nconst darkenNonBloomed = obj => {\n  if (obj.isMesh && !obj.userData.bloom) {\n    materials[obj.uuid] = obj.material\n    obj.material = obj.material.depthWrite ? darkMaterial : transparentDarkMaterial\n  }\n}\nconst restoreMaterial = obj => materials[obj.uuid] && ((obj.material = materials[obj.uuid]), delete materials[obj.uuid])\n\nexport function Effects() {\n  const { gl, scene, camera, size } = useThree()\n  // const bloomStrength = useControl('Bloom Strength', { type: 'number', value: 2.3 })\n  // const bloomThreshold = useControl('Bloom Threshold', { type: 'number', value: 0.2 })\n  const bloomStrength = 2.3\n  const bloomThreshold = 0.2 \n\n  const [bloom, final] = useMemo(() => {\n    const renderScene = new RenderPass(scene, camera)\n    const comp = new EffectComposer(gl)\n    comp.renderToScreen = false\n    comp.addPass(renderScene)\n    comp.addPass(new UnrealBloomPass(new THREE.Vector2(size.width, size.height), bloomStrength, 0.1, bloomThreshold))\n\n    const finalComposer = new EffectComposer(gl)\n    finalComposer.addPass(renderScene)\n    const finalPass = new ShaderPass(\n      new THREE.ShaderMaterial({\n        uniforms: { baseTexture: { value: null }, bloomTexture: { value: comp.renderTarget2.texture } },\n        vertexShader:\n          'varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }',\n        fragmentShader:\n          'uniform sampler2D baseTexture; uniform sampler2D bloomTexture; varying vec2 vUv; void main() { gl_FragColor = ( texture2D(baseTexture, vUv) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) ); }'\n      }),\n      'baseTexture'\n    )\n    finalPass.needsSwap = true\n    finalComposer.addPass(finalPass)\n    return [comp, finalComposer]\n  }, [camera, gl, scene, size.height, size.width, bloomStrength, bloomThreshold])\n\n  useEffect(() => {\n    bloom.setSize(size.width, size.height)\n    final.setSize(size.width, size.height)\n  }, [bloom, final, size])\n\n  useFrame(({ scene, camera }) => {\n    // https://github.com/mrdoob/three.js/blob/master/examples/webgl_postprocessing_unreal_bloom_selective.html\n    // this seems kinda dirty, it mutates the scene and overwrites materials\n    scene.traverse(darkenNonBloomed)\n    bloom.render()\n    scene.traverse(restoreMaterial)\n    // then writes the normal scene on top\n    final.render()\n  }, 1)\n\n  return null\n}\n\n","import \"./styles.css\";\n\nimport React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Credits from \"./components/Credits\";\nimport { Canvas } from \"react-three-fiber\";\nimport { CineonToneMapping } from \"three\";\nimport cities from \"./lib/cities.json\";\nimport Lights from \"./components/Lights\";\nimport { LightGlobe } from \"./components/LightGlobe/LightGlobe\";\nimport { OrbitControls, Stars, Stats } from \"drei\";\nimport { LoadingIndicator } from './components/LoadingIndicator';\nimport { RADIUS, BG_COLOR } from \"./constants\"\nimport { Effects } from \"./components/Effects\"\nimport { ControlsProvider, Controls } from 'react-three-gui'\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <ControlsProvider>\n        <Canvas\n          colorManagement\n          concurrent\n          onCreated={({ gl }) => gl.setClearColor(BG_COLOR)}\n          gl={{ antialias: true, toneMapping: CineonToneMapping }}\n        >\n          <fogExp2 attach=\"fog\" args={[\"#020202\", 0.15]} />\n          <Lights />\n          <Suspense fallback={<LoadingIndicator />}>\n            <LightGlobe cities={cities} />\n          </Suspense>\n          <OrbitControls enableDamping minDistance={RADIUS + 0.27} maxDistance={20} enablePan={false} zoomSpeed={0.3} />\n          <Stars factor={1.3} saturation={0.4} />\n          <Stats />\n          <Effects />\n        </Canvas>\n        <Controls />\n      </ControlsProvider>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n"],"sourceRoot":""}