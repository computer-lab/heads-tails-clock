{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","lib/index.js","components/WebcamImageManager.js","constants.js","store.js","components/LightGlobe/Headlights/EightSeriesHeadlights.js","components/LightGlobe/Headlights/ThreeSeriesHeadlights.js","lib/volumetric-spotlight.js","components/LightGlobe/Headlights/VolumetricSpotlight.js","components/LightGlobe/Headlights/HeadlightBeams.js","components/LightGlobe/Headlights/FillerLights.js","components/LightGlobe/Oceans.js","components/LightGlobe/LightGlobe.js","components/LoadingIndicator.js","components/Effects.js","components/CameraRig.js","components/Stars.js","index.js"],"names":["className","rel","href","target","intensity","position","userData","bloom","attach","args","color","fog","isIntervalActive","periodLength","intervalStart","intervalEnd","offset","t","Date","getTime","corsProxy","WebcamImageManager","src","handleUpdateCubeMap","imgRef","useRef","useFrame","newSrc","Math","floor","current","useEffect","onload","inputWidth","naturalWidth","inputHeight","naturalHeight","inputImageAspectRatio","outputWidth","outputHeight","outputImage","document","createElement","width","height","getContext","drawImage","map","CubeTexture","needsUpdate","alt","style","display","crossOrigin","ref","useStore","create","set","zoomTarget","zoomStartTime","zoomStartPosition","setZoomTarget","state","setZoomStartTime","setZoomStartPosition","zoomToMesh","e","stopPropagation","object","updateMatrixWorld","worldPos","Vector3","headlightPos","getWorldPosition","x","y","z","console","log","multiplyScalar","handleHoverMesh","getElementById","innerHTML","handleUnhoverMesh","EightSeriesHeadlights","locations","React","useState","nycCubeMap","setNycCubeMap","hkCubeMap","setHkCubeMap","shallow","nodes","useLoader","GLTFLoader","lowDetailNodes","refs","createRef","r","lookAt","rotateY","PI","meshObjects","i","name","onDarkSide","blinkingOff","turnLightOn","envMap","scale","key","visible","geometry","onClick","onPointerOver","onPointerOut","roughness","envMapIntensity","clearcoat","metalness","opacity","transmission","transparent","depthWrite","distances","emissive","side","BackSide","getBulbEmissive","ThreeSeriesHeadlights","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","THREE","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","extend","VolumetricSpotlight","MyVolumetricSpotlight","forwardRef","props","vs","scene","useThree","length","angle","scaleX","geometryLength","openEnded","applyMatrix4","makeTranslation","parameters","makeRotationX","clock","targetPos","rotateZ","setRef","useCallback","el","uniforms-lightColor-value","uniforms-attenuation-value","uniforms-anglePower-value","HeadlightBeams","bloomRefs","beams","useMemo","lightHigh","lightLaser","lightLow","render","posScaleFactor","lightLength","dummy","initInstancedMesh","instanced","lightGuide","forEach","location","updateMatrix","setMatrixAt","matrix","instanceMatrix","FillerLights","draco","instancedMeshVisor","instancedMeshLightGuideOn","instancedMeshLightGuideOff","instancedMeshLens","Oceans","radius","topo","useTextureLoader","Vector2","wrapS","RepeatWrapping","alphaMap","DoubleSide","LightGlobe","cities","group","rotation","setRotation","valueOf","reduce","acc","cur","nearbyIdx","findIndex","c","lat","toFixed","lng","population","push","abs","latlngToSphericalCoords","inclination","azimuth","sin","cos","sphericalCoordsToCartesian","RADIUS","Matrix4","makeRotationY","filter","LoadingIndicator","useProgress","progress","errors","center","xmlns","xmlnsXlink","viewBox","d","id","attributeName","begin","dur","from","to","repeatCount","dominantBaseline","textAnchor","round","dy","textLength","xlinkHref","EffectComposer","RenderPass","UnrealBloomPass","materials","darkMaterial","transparentDarkMaterial","darkenNonBloomed","obj","isMesh","uuid","material","restoreMaterial","Effects","gl","camera","size","renderScene","comp","renderToScreen","addPass","finalComposer","finalPass","ShaderPass","baseTexture","bloomTexture","renderTarget2","texture","needsSwap","final","setSize","traverse","CameraRig","elapsedTime","copy","zoomDurationScaledByDistance","distanceToZoom","distanceTo","ZOOM_DURATION","a","newCamPos","lerpVectors","updateProjectionMatrix","enableDamping","minDistance","maxDistance","enablePan","zoomSpeed","StarfieldMaterial","time","fade","ShaderMaterial","genStar","setFromSpherical","Spherical","acos","random","Stars","depth","count","saturation","factor","positions","colors","sizes","Array","Color","increment","toArray","setHSL","g","b","Float32Array","getElapsedTime","starfieldMaterial","attachObject","blending","AdditiveBlending","uniforms-fade-value","vertexColors","App","Credits","colorManagement","concurrent","onCreated","setClearColor","antialias","toneMapping","CineonToneMapping","Lights","fallback","rootElement","ReactDOM"],"mappings":"s4zCAEe,aACb,OACE,yBAAKA,UAAU,WACb,uBACEC,IAAI,sBACJC,KAAK,8DACLC,OAAO,UAHT,oBAOA,6BACA,uBACEF,IAAI,sBACJC,KAAK,8DACLC,OAAO,UAHT,wB,uBCXS,aACb,OACE,+BACE,kCAAcC,UAAW,KACzB,0BAAMC,SAAU,EAAE,KAAM,GAAI,GAAIC,SAAU,CAAEC,OAAO,IACjD,0CAAsBC,OAAO,WAAWC,KAAM,CAAC,EAAG,GAAI,MACtD,uCAAmBD,OAAO,WAAWE,MAAM,UAAUC,KAAK,KAE5D,sCACEP,UAAW,GACXC,SAAU,EAAE,EAAG,EAAG,GAClBK,MAAO,a,uBCcR,SAASE,EAAkBC,EAAcC,EAAeC,EAAaC,GAC1E,IAAMC,IAAK,IAAIC,MAAOC,UAAqB,IAATH,IAAiC,IAAfH,GACpD,OAAOI,EAAkB,IAAdF,GAAsBE,GAAqB,IAAhBH,E,6CCxBlCM,EAAY,gDAEX,SAASC,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,oBACnCC,EAASC,mBAyFf,OAvFAC,aAAS,WACP,IAAMC,EAAM,UAAMP,EAAN,YAAmBE,EAAnB,iBAA+BM,KAAKC,OAAM,IAAIX,MAAOC,UAAY,MACzEQ,IAAWH,EAAOM,QAAQR,MAAKE,EAAOM,QAAQR,IAAMK,MAG1DI,qBAAU,WACRP,EAAOM,QAAQE,OAAS,WACtB,IAAMC,EAAaT,EAAOM,QAAQI,aAC5BC,EAAcX,EAAOM,QAAQM,cAM7BC,EAAwBJ,EAAaE,EAIvCG,EAAcL,EACdM,EAAeJ,EACfE,EAL2B,EAM7BC,EAN6B,EAMfH,EACLE,EAPoB,IAQ7BE,EAAeN,EARc,GAW/B,IAAMO,EAAcC,SAASC,cAAc,UAqC3CF,EAAYG,MAAQL,EACpBE,EAAYI,OAASL,EAKXC,EAAYK,WAAW,MAC7BC,UAAUtB,EAAOM,QAAS,EAAG,GAQjC,IAAMiB,EAAM,IAAIC,cACd,CAACR,EAAaA,EAAaA,EAAaA,EAAaA,EAAaA,IAEpEO,EAAIE,aAAc,EAClB1B,EAAoBwB,MAErB,CAACxB,IAIF,kBAAC,IAAD,KACE,yBAAK2B,IAAI,kBAAkBC,MAAO,CAAEC,QAAS,QAAUC,YAAY,YAAYC,IAAK9B,EAAQF,IAAG,UAAKF,EAAL,YAAkBE,MClGhH,I,QCEMiC,EAAWC,aAAO,SAAAC,GAAG,MAAK,CACrCC,WAAY,KACZC,cAAe,KACfC,kBAAmB,KACnBC,cAAe,SAACH,GAAD,OAAgBD,GAAI,SAAAK,GAAK,MAAK,CAAEJ,kBAC/CK,iBAAkB,SAACJ,GAAD,OAAmBF,GAAI,SAAAK,GAAK,MAAK,CAAEH,qBACrDK,qBAAsB,SAACJ,GAAD,OAAuBH,GAAI,SAAAK,GAAK,MAAK,CAAEF,yBAC7DK,WAAY,SAACC,GACXA,EAAEC,kBACFD,EAAEE,OAAOC,oBACT,IAAMC,EAAW,IAAIC,UACfC,EAAeN,EAAEE,OAAOK,iBAAiBH,GAC/C,OAAuB,IAAnBE,EAAaE,GAA8B,IAAnBF,EAAaG,GAA8B,IAAnBH,EAAaI,EAAgBC,QAAQC,IAAI,QACtFrB,GAAI,SAAAK,GAAK,MAAK,CACnBJ,WAAYc,EAAaO,eAAe,UAG5CC,gBAAiB,SAACd,GAChBA,EAAEC,kBACFD,EAAEE,OAAOC,oBACT,IAAMC,EAAW,IAAIC,UACfC,EAAeN,EAAEE,OAAOK,iBAAiBH,GAC/C,GAAuB,IAAnBE,EAAaE,GAA8B,IAAnBF,EAAaG,GAA8B,IAAnBH,EAAaI,EAAS,OAAOC,QAAQC,IAAI,QAC7FrC,SAASwC,eAAe,gBAAgBC,UAAY,4BAEtDC,kBAAmB,SAACjB,GAClBA,EAAEC,kBACF1B,SAASwC,eAAe,gBAAgBC,UAAY,QCjBjD,SAASE,EAAT,GAAgD,IAAdC,EAAa,EAAbA,UAAa,EAChBC,IAAMC,SAAS,MADC,mBAC7CC,EAD6C,KACjCC,EADiC,OAElBH,IAAMC,SAAS,MAFG,mBAE7CG,EAF6C,KAElCC,EAFkC,OAGKpC,GAAS,SAAAO,GAAK,MAAI,CACzEA,EAAMG,WACNH,EAAMkB,gBACNlB,EAAMqB,qBACLS,KAPiD,mBAG7C3B,EAH6C,KAGjCe,EAHiC,KAGhBG,EAHgB,KAS5CU,EAAUC,YAChBC,IACyB,8BAFnBF,MAKOG,EAAmBF,YAChCC,IACyB,6BAFnBF,MAKFI,EAAOxE,iBAAO4D,EAAUtC,KAAI,kBAAMmD,0BAExCnE,qBAAU,WAAO,IAAD,gBACEkE,EAAKnE,SADP,IACd,2BAA8B,CAAC,IAApBqE,EAAmB,QAC5BA,EAAErE,QAAQsE,OAAO,EAAE,EAAE,GAErBD,EAAErE,QAAQuE,QAAS,EAAIzE,KAAK0E,GAAK,IAJrB,iCAOb,IAEH,IAAMC,EAAclB,EAAUtC,KAAI,WAA2DyD,GAAO,IAA/DnG,EAA8D,EAA9DA,SAAUoG,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,YACtEC,EAAS,CACb,gBAAiBrB,EACjB,cAAeA,EACf,YAAaE,EACb,QAAWA,EACX,MAASA,EACT,MAASA,GAEX,OACE,2BAAOoB,MAAO,CAAC,IAAM,IAAM,KAAQC,IAAKN,EAAMpG,SAAUA,EAAUiD,IAAK2C,EAAKnE,QAAQ0E,IAClF,0BACEQ,SAAO,EACPC,SAAUpB,EAAK,MAAUoB,SACzBC,QAASjD,EACTkD,cAAenC,EACfoC,aAAcjC,GAEd,0CACE3E,OAAO,WACPE,MAAO,SACP2G,UAAW,IACXR,OAAQA,EAAOJ,GAAQI,EAAOJ,GAAQjB,EACtC8B,gBAAiB,IACjBC,UAAW,GACXC,UAAW,GACXC,QAAS,EACTC,aAAc,GACdC,aAAW,EACXC,YAAY,KAGhB,kBAAC,IAAD,CAAUC,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAACC,SAAUpB,EAAM,qBAAqBoB,UACjD,0CACEzG,OAAO,WACPE,MF7EsB,QE8EtB2G,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACC,SAAUjB,EAAe,qBAAqBiB,UAC1D,0CACEzG,OAAO,WACPE,MFrFsB,QEsFtB2G,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,8BACE,0BAAMb,SAAO,EAAC1G,SAAU,CAAEC,MAAOmG,GAAcO,SAAUpB,EAAM,gBAAgBoB,UAC7E,0CACEzG,OAAO,WACPE,MF1Fa,SE2Fb2G,UAAW,GACXG,UAAW,GACXM,SAAUpB,EAAa,SAAW,EAClCe,QAAS,EACTE,aAAW,EACXD,aAAc,IACdE,YAAY,KAGhB,0BAAMZ,SAAO,EAAC1G,SAAU,CAAEC,MAAOmG,GAAcO,SAAUpB,EAAM,gBAAgBoB,UAC7E,0CACEzG,OAAO,WACPE,MFvGa,SEwGb2G,UAAW,GACXG,UAAW,GACXM,SAAUpB,EAAa,SAAW,EAClCe,QAAS,EACTE,aAAW,EACXD,aAAc,GACdE,YAAY,EACZG,KAAMC,eAIZ,0BAAMhB,SAAO,EAAC1G,SAAU,CAAEC,OAAO,GAAQ0G,SAAUjB,EAAe,gBAAgBiB,UAChF,0CACEzG,OAAO,WACPE,MFtHe,SEuHf2G,UAAW,GACXG,UAAW,GACXM,SAAUpB,IAAeC,EAAc,SAAW,EAClDiB,YAAY,MAIlB,0BAAMZ,SAAO,EAACC,SAAUpB,EAAK,MAAUoB,UACrC,0CACEzG,OAAO,WACPE,MAAO,SACP2G,UAAW,GACXG,UAAW,GACXM,SAAUpB,IAAeC,EAAc,SAAW,KAGtD,kBAAC,IAAD,CAAUkB,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAAC1G,SAAU,CAAEC,OAAO,GAAQ0G,SAAUpB,EAAM,aAAaoB,UACpE,0CACEzG,OAAO,WACPE,MAAO,SACP2G,UAAW,GACXG,UAAW,GACXM,SAAUlB,EFnJS,SEmJ0BF,IAAeC,EAAc,SAAW,EACrFc,QAAS,GACTG,YAAY,KAGhB,0BAAMZ,SAAO,EAAC1G,SAAU,CAAEC,OAAO,GAAQ0G,SAAUjB,EAAe,aAAaiB,UAC7E,0CACEzG,OAAO,WACPE,MAAO,SACP2G,UAAW,GACXG,UAAW,GACXM,SAAUlB,EF9JS,SE8J0BF,IAAeC,EAAc,SAAW,EACrFiB,YAAY,MAIhB,0BAAMZ,SAAO,EAACC,SAAUpB,EAAM,eAAeoB,UAC3C,0CACEzG,OAAO,WACPE,MFrKsB,OEsKtB2G,UAAW,GACXG,UAAW,UAKvB,OACE,+BACE,kBAACnG,EAAD,CAAoBC,IAvKX,qCAuKwBC,oBAAqBkE,IACtD,kBAACpE,EAAD,CAAoBC,IAzKZ,4CAyKwBC,oBAAqBoE,IACpDY,GC3KP,SAAS0B,EAAiBvB,EAAYE,GACpC,OAAIA,EHP2B,SGQ3BF,EAAmB,SAChB,EAGF,SAASwB,EAAT,GAAgD,IAAd7C,EAAa,EAAbA,UAAa,EACK9B,GAAS,SAAAO,GAAK,MAAI,CACzEA,EAAMG,WACNH,EAAMkB,gBACNlB,EAAMqB,qBACLS,KALiD,mBAC7C3B,EAD6C,KACjCe,EADiC,KAChBG,EADgB,KAO5CU,EAAUC,YAChBC,IACyB,8BAFnBF,MAKOG,EAAmBF,YAChCC,IACyB,6BAFnBF,MAKFI,EAAOxE,iBAAO4D,EAAUtC,KAAI,kBAAMmD,0BAExCnE,qBAAU,WAAO,IAAD,gBACEkE,EAAKnE,SADP,IACd,2BAA8B,CAAC,IAApBqE,EAAmB,QAC5BA,EAAErE,QAAQsE,OAAO,EAAE,EAAE,GAErBD,EAAErE,QAAQuE,QAAS,KAAOzE,KAAK0E,GAAK,IAJxB,iCAOb,IAEH,IAAMC,EAAclB,EAAUtC,KAAI,WAA2DyD,GAAO,IAA/DnG,EAA8D,EAA9DA,SAAUoG,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,WAAyBE,GAAqB,EAAlCD,YAAkC,EAArBC,aAC5E,OACE,2BAAOE,MAAO,CAAC,KAAO,KAAO,MAASC,IAAKN,EAAMpG,SAAUA,EAAUiD,IAAK2C,EAAKnE,QAAQ0E,IACrF,0BACEQ,SAAO,EACPC,SAAUjB,EAAc,MAAUiB,SAClCC,QAASjD,EACTkD,cAAenC,EACfoC,aAAcjC,GAEd,0CACE3E,OAAO,WACPE,MAAO,SACP2G,UAAW,IACXE,UAAW,GACXC,UAAW,GACXC,QAAS,EACTE,aAAW,EACXC,YAAY,KAGhB,0BAAMZ,SAAO,EAAC1G,SAAU,CAAEC,OAAO,GAAQ0G,SAAUpB,EAAK,MAAUoB,UAChE,0CACEzG,OAAO,WACP6G,UAAW,GACXG,UAAW,GACX9G,MAAO,SACPiH,aAAW,EACXF,QAAS,GACTK,SAAUG,EAAgBvB,EAAYE,MAG1C,kBAAC,IAAD,CAAUiB,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAACC,SAAUpB,EAAM,qBAAqBoB,UACjD,0CACEzG,OAAO,WACPE,MH7EsB,QG8EtB2G,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACC,SAAUjB,EAAe,qBAAqBiB,UAC1D,0CACEzG,OAAO,WACPE,MHrFsB,QGsFtB2G,UAAW,GACXG,UAAW,OAIjB,0BAAMlH,SAAU,CAAEC,MAAOmG,GAAcM,SAAO,EAACC,SAAUpB,EAAM,gBAAgBoB,UAC7E,0CACEzG,OAAO,WACPE,MHxFiB,SGyFjB2G,UAAW,GACXG,UAAW,GACXM,SAAUpB,EAAa,SAAW,EAClCe,QAAS,EACTE,aAAW,EACXD,aAAc,IACdE,YAAY,KAGhB,0BAAMtH,SAAU,CAAEC,MAAOmG,GAAcM,SAAO,EAACC,SAAUpB,EAAM,gBAAgBoB,UAC7E,0CACEzG,OAAO,WACPE,MHrGiB,SGsGjB2G,UAAW,GACXG,UAAW,GACXM,SAAUpB,EAAa,SAAW,EAClCe,QAAS,EACTE,aAAW,EACXD,aAAc,GACdK,KAAMC,WACNJ,YAAY,KAGhB,kBAAC,IAAD,CAAUC,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAAC1G,SAAU,CAAEC,OAAO,GAAQ0G,SAAUpB,EAAM,aAAaoB,UACpE,0CACEzG,OAAO,WACPE,MAAO,SACP2G,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAAC1G,SAAU,CAAEC,OAAO,GAAQ0G,SAAUjB,EAAe,aAAaiB,UAC7E,0CACEzG,OAAO,WACPE,MAAO,SACP2G,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAACC,SAAUpB,EAAM,eAAeoB,UAC3C,0CACEzG,OAAO,WACPE,MAAO,SACP2G,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACC,SAAUjB,EAAe,eAAeiB,UACpD,0CACEzG,OAAO,WACPE,MAAO,SACP2G,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAACC,SAAUpB,EAAM,eAAeoB,UAC3C,0CACEzG,OAAO,WACPE,MH3JiB,OG4JjB2G,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACC,SAAUjB,EAAe,eAAeiB,UACpD,0CACEzG,OAAO,WACPE,MHnKiB,OGoKjB2G,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAACC,SAAUpB,EAAK,OAAWoB,UACtC,0CACEzG,OAAO,WACPE,MH9KsB,OG+KtB2G,UAAW,GACXG,UAAW,MAGf,0BAAMR,SAAO,EAACC,SAAUjB,EAAc,OAAWiB,UAC/C,0CACEzG,OAAO,WACPE,MHtLsB,OGuLtB2G,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAACC,SAAUpB,EAAM,qBAAqBoB,UACjD,0CACEzG,OAAO,WACPE,MHlMsB,QGmMtB2G,UAAW,GACXG,UAAW,MAIf,0BAAMR,SAAO,EAACC,SAAUjB,EAAe,qBAAqBiB,UAC1D,0CACEzG,OAAO,WACPE,MH3MsB,QG4MtB2G,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMb,SAAO,EAACC,SAAUpB,EAAM,cAAcoB,UAC1C,0CACEzG,OAAO,WACP6G,UAAW,GACXG,UAAW,GACX9G,MHrNsB,UGwN1B,0BAAMsG,SAAO,EAACC,SAAUjB,EAAe,cAAciB,UACnD,0CACEzG,OAAO,WACPE,MH3NsB,OG4NtB2G,UAAW,GACXG,UAAW,WAMvB,OACE,+BACGjB,GClOP,IAoFe4B,EApFqB,WAElC,IAAIC,EAAe,CACjB,wBACA,+BAEA,eACA,uBACA,mDAEA,6DACA,yCAEA,qBACA,6EACA,KACAC,KAAK,MACHC,EAAiB,CACnB,2BACA,kCAEA,8BAEA,gCAEA,gCACA,+BAEA,eACA,mBAKA,mEACA,iDAKA,6DACA,+EACA,2CAQA,gDACA,KACAD,KAAK,MA6BP,OAzBe,IAAIE,iBAAqB,CACtCC,SAAU,CACRC,YAAa,CACXC,KAAM,IACNC,MAAO,GAETC,WAAY,CACVF,KAAM,IACNC,MAAO,KAETE,aAAc,CACZH,KAAM,KACNC,MAAO,IAAIJ,UAAc,EAAG,EAAG,IAEjCO,WAAY,CACVJ,KAAM,IACNC,MAAO,IAAIJ,QAAY,UAG3BH,aAAcA,EACdE,eAAgBA,EAChBP,KAAQQ,aACRZ,aAAa,EACbC,YAAY,KC/EhBmB,YAAO,CACLC,wBAGK,IAAMC,EAAwB3D,IAAM4D,YAAW,SAA+BC,EAAO7F,GAC1F,IAAM8F,EAAK9D,IAAM7D,SAET4H,EAAUC,cAAVD,MAGN3I,EAQEyI,EARFzI,MAN6F,EAc3FyI,EAPFI,cAP6F,MAOpF,EAPoF,EAQ7FlJ,EAME8I,EANF9I,SACAF,EAKEgJ,EALFhJ,OAT6F,EAc3FgJ,EAJFK,aAV6F,MAUrF,IAVqF,IAc3FL,EAHFM,cAX6F,MAWpF,EAXoF,IAc3FN,EAFFO,sBAZ6F,MAY5E,EAZ4E,EAa7FC,EACER,EADFQ,UAIF5H,qBAAU,WAGR,IAAMkF,EAAWmC,EAAGtH,QAAQmF,SAE5BA,EAAS2C,cACP,IAAIrB,WAAgBsB,gBAAgB,GAAI5C,EAAS6C,WAAWlH,OAAS,EAAG,IAE1EqE,EAAS2C,cAAa,IAAIrB,WAAgBwB,eAAenI,KAAK0E,GAAK,MAgBlE,CAAC+C,IAEJ3H,aAAS,YAAe,EAAZsI,MAOV,GADAZ,EAAGtH,QAAQgF,MAAMrD,IAAIgG,EAAQ,EAAG,GAC5BtJ,GAAUA,EAAO2B,QAAS,CAC5B,IAAMmI,EAAY,IAAI1B,UACtBpI,EAAO2B,QAAQ2C,iBAAiBwF,GAChCb,EAAGtH,QAAQsE,OAAO6D,GAClBb,EAAGtH,QAAQoI,QAAQtI,KAAK0E,GAAK,IAC7B8C,EAAGtH,QAAQuE,QAAQzE,KAAK0E,GAAK,IAC7B8C,EAAGtH,QAAQkF,SAAU,MAIzB,IAAMmD,EAAS7E,IAAM8E,aAAY,SAAgBC,GAC/CjB,EAAGtH,QAAUuI,EAET/G,IACFA,EAAIxB,QAAUuI,KAEf,CAAC/G,IAUJ,OACE,oCASE,0BAAM0D,SAAS,EAAO1D,IAAK6G,EAAQ9J,SAAUA,GAC3C,sCAAkBI,KAAM,CAAC,IAAM,IAAMiJ,EAAgB,GAAI,EAAGC,GAAYnJ,OAAO,aAC/E,yCACEA,OAAO,WACP8J,4BAA2B5J,EAC3B6J,6BAA4BhB,EAC5BiB,4BAA2BhB,SCjG9B,SAASiB,EAAT,GAAyC,IAAdpF,EAAa,EAAbA,UAC1BY,EAAOxE,iBAAO4D,EAAUtC,KAAI,kBAAMmD,0BAClCwE,EAAYjJ,iBAAO4D,EAAUtC,KAAI,kBAAMmD,0BAEvCyE,EAAQC,mBAAQ,kBAAMvF,EAAUtC,KAAI,WAQvCyD,GAAQ,IAPTnG,EAOQ,EAPRA,SACAqG,EAMQ,EANRA,WAEAmE,GAIQ,EALRlE,YAKQ,EAJRkE,WAEAC,GAEQ,EAHRC,SAGQ,EAFRD,YACAE,EACQ,EADRA,OAEA,IAAKtE,EAAY,OAAO,2BAAOK,IAAKP,IACpC,IAAMyE,EAAiBD,EAAS,IAAO,KACnCE,EAAc,EAGlB,OAFIJ,IAAYI,EAAc,GAC1BL,IAAWK,EAAc,GAE3B,2BAAOnE,IAAKP,GACV,0BACElD,IAAK2C,EAAKnE,QAAQ0E,GAClBnG,SAAU,CAAe,GAAdA,EAAS,GAAuB,GAAdA,EAAS,GAAuB,GAAdA,EAAS,MAE1D,0BACEiD,IAAKoH,EAAU5I,QAAQ0E,GACvBnG,SAAU,CAAe,EAAdA,EAAS,GAAsB,EAAdA,EAAS,GAAsB,EAAdA,EAAS,MAExD,kBAAC,EAAD,CACEA,SAAU,CAACA,EAAS,GAAK4K,EAAgB5K,EAAS,GAAK4K,EAAgB5K,EAAS,GAAK4K,GACrFvK,MAAOoK,EN9Be,SACG,SM8BzBvB,OAAQ2B,EACR/K,OAAQ8F,EAAKnE,QAAQ0E,GACrBgD,MAAOsB,EAAa,IAAM,IAC1BrB,OAAQqB,EAAa,IAAM,EAC3BnB,WAAS,IAEVqB,GACC,kBAAC,EAAD,CACE3K,SAAU,CAAe,KAAdA,EAAS,GAAyB,KAAdA,EAAS,GAAyB,KAAdA,EAAS,IAC5DK,MAAOoK,ENxCa,SACG,SMwCvBvB,OAAQ,IACRG,eAAgB,EAChBvJ,OAAQuK,EAAU5I,QAAQ0E,GAC1BgD,MAAOsB,EAAa,IAAM,IAC1BrB,OAAQ,IACRE,WAAS,UAKf,CAACtE,IAEL,OACE,oCACGsF,GCvDP,IAAMQ,EAAQ,IAAI5C,WAElB,SAAS6C,EAAkBC,EAAWhG,EAAWiG,GAC/CjG,EAAUkG,SAAQ,SAACC,EAAUhF,GAAO,IAAD,IACzBnG,EAAamL,EAAbnL,UACR,EAAA8K,EAAM9K,UAASoD,IAAf,oBAAsBpD,IACtB,IAAIyG,EAAQ,CAAC,KAAO,KAAO,MACR,OAAfwE,GAAwBE,EAAS9E,aACnCI,EAAQ,CAAC,EAAG,EAAG,IAEE,QAAfwE,GAAwBE,EAAS9E,aACnCI,EAAQ,CAAC,EAAG,EAAG,KAEjB,EAAAqE,EAAMrE,OAAMrD,IAAZ,oBAAmBqD,IACnBqE,EAAM/E,OAAO,EAAG,EAAG,GACnB+E,EAAM9E,QAAS,IAAMzE,KAAK0E,GAAK,GAC/B6E,EAAMM,eACNJ,EAAUvJ,QAAQ4J,YAAYlF,EAAG2E,EAAMQ,WAEzCN,EAAUvJ,QAAQ8J,eAAe3I,aAAc,EAG1C,SAAS4I,EAAT,GAAuC,IAAdxG,EAAa,EAAbA,UACtBQ,EAAUC,YAChBC,IACyB,aACzB+F,YAA+B,iBAHzBjG,MAMFkG,EAAqBtK,mBACrBuK,EAA4BvK,mBAC5BwK,EAA6BxK,mBAC7ByK,EAAoBzK,mBAU1B,OAPAM,qBAAU,WACRqJ,EAAkBW,EAAoB1G,GACtC+F,EAAkBY,EAA2B3G,EAAW,MACxD+F,EAAkBa,EAA4B5G,EAAW,OACzD+F,EAAkBc,EAAmB7G,KACpC,CAACA,IAGF,+BACE,mCAAe/B,IAAKyI,EAAoB9E,SAAUpB,EAAK,MAAUoB,SAAU3G,SAAU,CAAEC,OAAO,GAAQE,KAAM,CAAC,KAAM,KAAM4E,EAAUkE,SACjI,0CACE/I,OAAO,WACPE,MAAO,SACP2G,UAAW,IACXE,UAAW,GACXC,UAAW,GACXC,QAAS,EACTC,aAAc,GACdC,aAAW,EACXC,YAAY,KAGhB,mCAAetE,IAAK2I,EAA4B3L,SAAU,CAAEC,OAAO,GAAQ0G,SAAUpB,EAAM,eAAeoB,SAAUxG,KAAM,CAAC,KAAM,KAAM4E,EAAUkE,SAC/I,0CACE/I,OAAO,WACPE,MAAO,SACP2G,UAAW,GACXG,UAAW,GACXC,QAAS,GACTE,aAAW,EACXC,YAAY,KAGhB,mCAAetE,IAAK0I,EAA2B1L,SAAU,CAAEC,OAAO,GAAQ0G,SAAUpB,EAAM,eAAeoB,SAAUxG,KAAM,CAAC,KAAM,KAAM4E,EAAUkE,SAC9I,0CACE/I,OAAO,WACPE,MAAO,SACP2G,UAAW,GACXG,UAAW,GACXM,SAAU,SACVL,QAAS,GACTE,aAAW,EACXC,YAAY,KAGhB,mCAAetE,IAAK4I,EAAmB5L,SAAU,CAAEC,OAAO,GAAQ0G,SAAUpB,EAAK,KAASoB,SAAUxG,KAAM,CAAC,KAAM,KAAM4E,EAAUkE,SAC/H,0CACE/I,OAAO,WACP6G,UAAW,GACXG,UAAW,GACX9G,MAAO,SACP+G,QAAS,GACTE,aAAW,EACXC,YAAY,MCvFf,SAASuE,EAAT,GAA8B,IAAXC,EAAU,EAAVA,OAClBC,EAAOC,YAAiB,YAG9B,OAFAD,EAAKrL,OAAS,IAAIuL,UAAQ,GAAK,GAC/BF,EAAKG,MAAQC,iBAEX,8BACE,0CAAsBhM,KAAM,CAAC2L,EAAS,GATrB,GACC,MASlB,uCACE1L,MAAO,SACPgM,SAAUL,EACV1E,aAAW,EACXI,KAAM4E,aACN/E,YAAY,KCAb,SAASgF,EAAT,GAAkC,IAAXC,EAAU,EAAVA,OACtBC,EAAQrL,mBADwB,EAEN8D,qBAFM,mBAE/BwH,EAF+B,KAErBC,EAFqB,KAItCtL,aAAS,WACP,IAAMyE,EXHevE,KAAKC,OAAM,IAAIX,MAAO+L,UAAY,KAHpC,YAMA,EAAIrL,KAAK0E,GAAK1E,KAAK0E,GWClCH,IAAM4G,IACVC,EAAY7G,GACZ2G,EAAMhL,QAAQiL,SAASpI,EAAIwB,MAG7B,IAaMd,EAbmBuF,mBAAQ,kBAC/BiC,EAAOK,QAAO,SAACC,EAAKC,GAClB,IAAMC,EAAYF,EAAIG,WAAU,SAAAC,GAAC,OAAIH,EAAII,IAAIC,QAfjC,KAewDF,EAAEC,IAAIC,QAf9D,IAeoFL,EAAIM,IAAID,QAf5F,KAemHF,EAAEG,IAAID,QAfzH,MAgBZ,OAAIJ,EAAY,GAAKD,EAAIO,WAAaR,EAAIE,GAAWM,YACnDR,EAAIE,GAAaD,EACVD,IAETA,EAAIS,KAAKR,GACFD,KACN,MACH,CAACN,IAIA9J,KAAI,WAA6ByD,GAAO,IAAjCgH,EAAgC,EAAhCA,IAAKE,EAA2B,EAA3BA,IAAKjH,EAAsB,EAAtBA,KAAMuE,EAAgB,EAAhBA,OAAgB,EXhCrC,SAAkCwC,EAAKE,GAG5C,MAAO,CAFa9L,KAAK0E,IAAMkH,EAAM,EAAI,GAAKA,EAAM,GAAK5L,KAAKiM,IAAIL,IAAQ,IAC1D,EAAI5L,KAAK0E,IAAMoH,GAAO,EAAIA,EAAM,IAAM9L,KAAKiM,IAAIH,IAAQ,KW+B/CI,CAAwBN,EAAKE,GADX,mBAEhCrN,EX9CL,SAAqC+L,EAAQ2B,EAAaC,GAM/D,IAAMtJ,EAAI0H,EAASxK,KAAKqM,IAAIF,GAAenM,KAAKsM,IAAIF,GAC9CpJ,EAAIwH,EAASxK,KAAKqM,IAAIF,GAAenM,KAAKqM,IAAID,GAEpD,MAAO,EAAEtJ,EADC0H,EAASxK,KAAKsM,IAAIH,GACbnJ,GWqCMuJ,CAA2BnD,ETnC5B,ESmC8CoD,IAFxB,WAKhC1H,KAFG,YAAOnC,UAAP,YAAkBlE,IACNuJ,cAAa,IAAIyE,WAAUC,cAAcvB,IAC/BrI,EAAI,IAC7BqG,EAAWnK,EAAiB,IAAK,EAAG,GAAI4F,GACxCqE,EAAYjK,EAAiB,IAAK,GAAI,GAAI4F,GAC1CsE,EAAalK,EAAiB,IAAK,GAAI,IAAK4F,GAMlD,MAAO,CACLwE,SACA3K,WACAoG,OACAC,aACAE,YAVkBhG,EAAiB,GAAI,EAAG,GAAI4F,IAAM5F,EAAiB,EAAG,EAAG,EAAG4F,GAW9EuE,WACAF,YACAC,iBAIN,OACE,2BAAOxH,IAAKwJ,GACV,kBAAC1H,EAAD,CAAuBC,UAAWA,EAAUkJ,QAAO,kBAA2B,gBAA3B,EAAGvD,YACtD,kBAAC9C,EAAD,CAAuB7C,UAAWA,EAAUkJ,QAAO,kBAA2B,gBAA3B,EAAGvD,YACtD,kBAACa,EAAD,CAAcxG,UAAWA,EAAUkJ,QAAO,qBAAGvD,YAC7C,kBAACP,EAAD,CAAgBpF,UAAWA,IAC3B,kBAAC8G,EAAD,CAAQC,OTjEQ,KURf,SAASoC,IAAqB,IAAD,EACLC,cAArBC,EAD0B,EAC1BA,SAAUC,EADgB,EAChBA,OAElB,OADIA,EAAOpF,QAAQ1E,QAAQC,IAAI6J,GAE7B,kBAAC,IAAD,CAAMC,QAAM,GACV,yBAAK5O,UAAU,WACb,yBAAK6O,MAAM,6BAA6BC,WAAW,+BAA+BC,QAAQ,eACxF,2FACA,8BACE,0BAAMC,EAAE,sFAAsFC,GAAG,cAC/F,sCACEC,cAAc,YACdC,MAAM,KACNC,IAAI,MACJ1G,KAAK,SACL2G,KAAK,YACLC,GAAG,cACHC,YAAY,iBAIhB,0BAAMvP,UAAU,WAAW0E,EAAE,MAAMC,EAAE,MAAM6K,iBAAiB,SAASC,WAAW,UAE5Ed,GAAUA,EAAOpF,OACZoF,EAAO,GADZ,kBAEe/M,KAAK8N,MAAMhB,GAF1B,MAKJ,0BAAMiB,GAAG,KAAKC,WAAW,QACvB,8BAAU5P,UAAU,cAAc6P,UAAU,eAA5C,gE,sCCxBd9G,YAAO,CAAE+G,mBAAgBC,eAAYC,sBAErC,IAAMC,EAAY,GACZC,EAAe,IAAI3H,oBAAwB,CAAE7H,MAAO,UACpDyP,EAA0B,IAAI5H,oBAAwB,CAAE7H,MAAO,QAASkH,YAAY,IACpFwI,EAAmB,SAAAC,GACnBA,EAAIC,SAAWD,EAAI/P,SAASC,QAC9B0P,EAAUI,EAAIE,MAAQF,EAAIG,SAC1BH,EAAIG,SAAWH,EAAIG,SAAS5I,WAAasI,EAAeC,IAGtDM,EAAkB,SAAAJ,GAAG,OAAIJ,EAAUI,EAAIE,QAAWF,EAAIG,SAAWP,EAAUI,EAAIE,aAAeN,EAAUI,EAAIE,QAE3G,SAASG,IAAW,IAAD,EACYpH,cAA5BqH,EADgB,EAChBA,GAAItH,EADY,EACZA,MAAOuH,EADK,EACLA,OAAQC,EADH,EACGA,KADH,EAODjG,mBAAQ,WAC7B,IAAMkG,EAAc,IAAIf,IAAW1G,EAAOuH,GACpCG,EAAO,IAAIjB,IAAea,GAChCI,EAAKC,gBAAiB,EACtBD,EAAKE,QAAQH,GACbC,EAAKE,QAAQ,IAAIjB,IAAgB,IAAIzH,UAAcsI,EAAKlO,MAAOkO,EAAKjO,QARhD,IAQwE,GAPvE,KASrB,IAAMsO,EAAgB,IAAIpB,IAAea,GACzCO,EAAcD,QAAQH,GACtB,IAAMK,EAAY,IAAIC,IACpB,IAAI7I,iBAAqB,CACvBC,SAAU,CAAE6I,YAAa,CAAE1I,MAAO,MAAQ2I,aAAc,CAAE3I,MAAOoI,EAAKQ,cAAcC,UACpFpJ,aACE,wHACFE,eACE,oMAEJ,eAIF,OAFA6I,EAAUM,WAAY,EACtBP,EAAcD,QAAQE,GACf,CAACJ,EAAMG,KACb,CAACN,EAAQD,EAAItH,EAAOwH,EAAKjO,OAAQiO,EAAKlO,MAzBnB,IACC,KALC,mBAOjBpC,EAPiB,KAOVmR,EAPU,KA8CxB,OAfA3P,qBAAU,WACRxB,EAAMoR,QAAQd,EAAKlO,MAAOkO,EAAKjO,QAC/B8O,EAAMC,QAAQd,EAAKlO,MAAOkO,EAAKjO,UAC9B,CAACrC,EAAOmR,EAAOb,IAElBnP,aAAS,YAAwB,IAArB2H,EAAoB,EAApBA,MAAoB,EAAbuH,OAGjBvH,EAAMuI,SAASxB,GACf7P,EAAMyK,SACN3B,EAAMuI,SAASnB,GAEfiB,EAAM1G,WACL,GAEI,KC1DF,SAAS6G,IAAc,IAAD,EAC4BtO,GAAS,SAAAO,GAAK,MACnE,CAACA,EAAMJ,WAAYI,EAAMH,cAAeG,EAAMF,qBAAoBgC,KAFzC,mBACpBlC,EADoB,KACRC,EADQ,KACOC,EADP,KAGrBG,EAAmBR,GAAS,SAAAO,GAAK,OAAIA,EAAMC,oBAC3CC,EAAuBT,GAAS,SAAAO,GAAK,OAAIA,EAAME,wBAC/CH,EAAgBN,GAAS,SAAAO,GAAK,OAAIA,EAAMD,iBA4B9C,OA1BAnC,aAAS,YAAwB,IAArBkP,EAAoB,EAApBA,OAAQ5G,EAAY,EAAZA,MAClB,GAAItG,EAAY,CACd,IAAKC,EAGH,OAFAI,EAAiBiG,EAAM8H,kBACvB9N,GAAqB,IAAIO,WAAUwN,KAAKnB,EAAOvQ,WAGjD,IAAI2R,EZPmB,IYQjBC,EAAiBrO,EAAkBsO,WAAWxO,GAIpD,GAHIuO,EAAiB,KAAKD,EAA+BG,KACrDF,EAAiB,IAAGD,EAA+BG,KACnDF,EAAiB,IAAGD,EAA+BG,OAClDH,GAAgChI,EAAM8H,YAAcnO,EAAgBqO,EAIvE,OAHAnO,EAAc,MACdE,EAAiB,WACjBC,EAAqB,MAGvB,IAAMoO,GAAKpI,EAAM8H,YAAcnO,GAAiBqO,EAC1CK,GAAY,IAAI9N,WAAU+N,YAAY1O,EAAmBF,EAAY0O,GAC3ExB,EAAOvQ,SAAS0R,KAAKM,GACrBzB,EAAO2B,6BAMT,kBAAC,IAAD,CAAeC,eAAa,EAACC,YZhCX,EYgCgCC,YAAa,GAAIC,WAAW,EAAOC,UAAW,K,yBCvC9FC,E,kDACJ,aAAe,uCACP,CACJrK,SAAU,CAAEsK,KAAM,CAAEnK,MAAO,GAAOoK,KAAM,CAAEpK,MAAO,IACjDf,YAAY,EACZQ,aAAa,sWASbE,eAAe,sW,UAdW0K,kBA8B1BC,EAAU,SAAC9M,GACf,OAAO,IAAI5B,WAAU2O,iBAAiB,IAAIC,YAAUhN,EAAGvE,KAAKwR,KAAK,EAAoB,EAAhBxR,KAAKyR,UAA+B,EAAhBzR,KAAKyR,SAAezR,KAAK0E,MAEvGgN,GAAQpK,sBACnB,WAAuF5F,GAAS,IAAD,IAA5F8I,cAA4F,MAAnF,IAAmF,MAA9EmH,aAA8E,MAAtE,GAAsE,MAAlEC,aAAkE,MAA1D,IAA0D,MAApDC,kBAAoD,MAAvC,EAAuC,MAApCC,cAAoC,MAA3B,EAA2B,MAAxBX,YAAwB,SACvFvC,EAAW/O,mBAD4E,EAE7DmJ,mBAAQ,WAOtC,IANA,IAAM+I,EAAY,GACZC,EAAS,GACTC,EAAQC,MAAMzE,KAAK,CAAE9F,OAAQiK,IAAS,kBAAO,GAAM,GAAM5R,KAAKyR,UAAYK,KAC1EhT,EAAQ,IAAIqT,QACd5N,EAAIiG,EAASmH,EACXS,EAAYT,EAAQC,EACjBhN,EAAI,EAAGA,EAAIgN,EAAOhN,IACzBL,GAAK6N,EAAYpS,KAAKyR,SACtBM,EAAU/F,KAAV,MAAA+F,EAAS,YAASV,EAAQ9M,GAAG8N,YAC7BvT,EAAMwT,OAAO1N,EAAIgN,EAAOC,EAAY,GACpCG,EAAOhG,KAAKlN,EAAMyF,EAAGzF,EAAMyT,EAAGzT,EAAM0T,GAEtC,MAAO,CAAC,IAAIC,aAAaV,GAAY,IAAIU,aAAaT,GAAS,IAAIS,aAAaR,MAC/E,CAACL,EAAOD,EAAOG,EAAQtH,EAAQqH,IAhB2D,mBAEtFpT,EAFsF,KAE5EK,EAF4E,KAErEmQ,EAFqE,KAiB7FnP,aAAS,SAACoC,GAAD,OAAW0M,EAAS1O,UAAY0O,EAAS1O,QAAQ0G,SAASsK,KAAKnK,MAAQ7E,EAAMkG,MAAMsK,qBAE5F,IAAMC,EAAoB3J,mBAAQ,kBAAM,IAAIiI,IAAqB,IAEjE,OACE,4BAAQvP,IAAKA,GACX,oCAAgB9C,OAAO,YACrB,qCAAiBgU,aAAc,CAAC,aAAc,YAAa/T,KAAM,CAACJ,EAAU,KAC5E,qCAAiBmU,aAAc,CAAC,aAAc,SAAU/T,KAAM,CAACC,EAAO,KACtE,qCAAiB8T,aAAc,CAAC,aAAc,QAAS/T,KAAM,CAACoQ,EAAM,MAEtE,+BACEvN,IAAKkN,EACLpM,OAAQmQ,EACR/T,OAAO,WACPiU,SAAUC,mBACVC,sBAAqB5B,EACrBpL,aAAW,EACXiN,cAAY,QCvDtB,SAASC,KACP,OACE,oCACE,kBAACC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,iBAAe,EACfC,YAAU,EACVC,UAAW,qBAAGtE,GAAYuE,cdzBZ,Kc0BdvE,GAAI,CAAEwE,WAAW,EAAMC,YAAaC,sBAEpC,6BAAS7U,OAAO,MAAMC,KAAM,CAAC,UAAW,OACxC,kBAAC6U,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,kBAAC/G,EAAD,OAClB,kBAAC5B,EAAD,CAAYC,OAAQA,KAEtB,kBAACgF,EAAD,MACA,kBAACyB,GAAD,CAAOI,OAAQ,IAAKD,WAAY,GAAKV,MAAI,IACzC,kBAAC,IAAD,MACA,kBAACrC,EAAD,SAOV,IAAM8E,GAAc/S,SAASwC,eAAe,QAC5CwQ,IAASzK,OAAO,kBAAC6J,GAAD,MAASW,M","file":"static/js/main.52394af4.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Sunrise / Sunset\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.6} />\n      <mesh position={[-200, -10, 0]} userData={{ bloom: true }}>\n        <sphereBufferGeometry attach=\"geometry\" args={[4, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"#EEEE88\" fog={false} />\n      </mesh>\n      <directionalLight\n        intensity={0.9}\n        position={[-1, 0, 0]}\n        color={0xfffdf2}\n      />\n    </group>\n  );\n};\n","export function sphericalCoordsToCartesian (radius, inclination, azimuth) {\n  /*\n   * Inclination is in the range [0, pi], from straight up (the zenith)\n   * Azimuth is in the range [0, 2pi], from the x axis\n   * See: https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n   */\n  const x = radius * Math.sin(inclination) * Math.cos(azimuth);\n  const z = radius * Math.sin(inclination) * Math.sin(azimuth);\n  const y = radius * Math.cos(inclination);\n  return [-x, y, z];\n}\n\nexport function latlngToSphericalCoords (lat, lng) {\n  const inclination = Math.PI * (lat > 0 ? 90 - lat : 90 + Math.abs(lat)) / 180;\n  const azimuth = 2 * Math.PI * (lng >= 0 ? lng : 360 - Math.abs(lng)) / 360; \n  return [inclination, azimuth];\n}\n\nconst SECONDS_IN_DAY = 24 * 60 * 60;\n\nexport function calculateAngleForTime () {\n  const unixEraSeconds = Math.floor(new Date().valueOf() / 1000);\n  const secondsElapsedInDay = unixEraSeconds % SECONDS_IN_DAY;\n  const dayProgress = secondsElapsedInDay / SECONDS_IN_DAY;\n  return dayProgress * 2 * Math.PI + Math.PI;\n}\n\nexport function isIntervalActive (periodLength, intervalStart, intervalEnd, offset) {\n  const t = (new Date().getTime() + offset * 1000) % (periodLength * 1000)\n  return t < intervalEnd * 1000 && t >= intervalStart * 1000;\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Html } from \"drei\";\nimport { CubeTexture } from \"three\";\n\nconst corsProxy = 'https://cors-anywhere.services.computerlab.io';\n\nexport function WebcamImageManager ({ src, handleUpdateCubeMap }) {\n  const imgRef = useRef();\n\n  useFrame(() => {\n    const newSrc = `${corsProxy}/${src}&rand=${Math.floor(new Date().getTime() / 1000)}`\n    if (newSrc !== imgRef.current.src) imgRef.current.src = newSrc\n  })\n\n  useEffect(() => {\n    imgRef.current.onload = () => {\n      const inputWidth = imgRef.current.naturalWidth;\n      const inputHeight = imgRef.current.naturalHeight;\n\n      // const dy = inputHeight / 3;\n      // const dx = Math.floor(inputWidth / 3);\n\n      // get the aspect ratio of the input image\n      const inputImageAspectRatio = inputWidth / inputHeight;\n      const outputImageAspectRatio = 1;\n\n      // if it's bigger than our target aspect ratio\n      let outputWidth = inputWidth;\n      let outputHeight = inputHeight;\n      if (inputImageAspectRatio > outputImageAspectRatio) {\n        outputWidth = inputHeight * outputImageAspectRatio;\n      } else if (inputImageAspectRatio < outputImageAspectRatio) {\n        outputHeight = inputWidth / outputImageAspectRatio;\n      }\n\n      const outputImage = document.createElement('canvas');\n\n      // let ctx\n      // const emptySmallImage = document.createElement('canvas');\n      // emptySmallImage.width = dx;\n      // emptySmallImage.height = dx;\n      // // create a canvas that will present the output image\n      // const px = document.createElement('canvas');\n      // px.width = dx;\n      // px.height = dx;\n      // ctx = px.getContext('2d')\n      // ctx.drawImage(imgRef.current, 2 * dx, 0, dx, dx, 0, 0, dx, dx);\n      // const nx = document.createElement('canvas');\n      // nx.width = dx;\n      // nx.height = dx;\n      // ctx = nx.getContext('2d')\n      // ctx.drawImage(imgRef.current, 0, 0, dx, dx, 0, 0, dx, dx);\n      // const pz = document.createElement('canvas');\n      // pz.width = dx;\n      // pz.height = dx;\n      // ctx = pz.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const py = document.createElement('canvas');\n      // py.width = dx;\n      // py.height = dx;\n      // ctx = py.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const ny = document.createElement('canvas');\n      // ny.width = dx;\n      // ny.height = dx;\n      // ctx = ny.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 2 * dx, dx, dx, 0, 0, dx, dx);\n\n\n      // const emptyImage = document.createElement('canvas');\n\n      // set it to the same size as the image\n      outputImage.width = outputWidth;\n      outputImage.height = outputHeight;\n      // emptyImage.width = outputWidth;\n      // emptyImage.height = outputHeight;\n\n      // draw our image at position 0, 0 on the canvas\n      let ctx = outputImage.getContext('2d');\n      ctx.drawImage(imgRef.current, 0, 0);\n\n      // show both the image and the canvas\n\n      // const map = new CubeTexture(\n      //   [px, nx, emptySmallImage, emptySmallImage, pz, pz ]\n      // )\n\n      const map = new CubeTexture(\n        [outputImage, outputImage, outputImage, outputImage, outputImage, outputImage ]\n      )\n      map.needsUpdate = true;\n      handleUpdateCubeMap(map)\n    }\n  }, [handleUpdateCubeMap])\n\n\n  return (\n    <Html>\n      <img alt='nyc traffic cam' style={{ display: 'none' }} crossOrigin=\"anonymous\" ref={imgRef} src={`${corsProxy}/${src}`} />\n    </Html>\n  )\n}\n","// colors\nexport const BG_COLOR = ''\nexport const HEADLIGHT_BODY_COLOR = 0x838b9f\nexport const TURN_SIGNAL_COLOR = 0xF18F17\nexport const BODY_HIGHLIGHT_COLOR = 0x0a25ad\nexport const BODY_DARK_COLOR = 0x040509\nexport const BEAM_COLOR_LASER = 0xEEEAFF\nexport const BEAM_COLOR_STANDARD = 0xEAEEF8\nexport const PLASTIC_COLOR = 0xddeeff\n\n// geometry\nexport const RADIUS = 3\n\n// other\nexport const DEFAULT_LAYER = 0\nexport const BLOOM_LAYER = 1\nexport const ZOOM_DURATION = 1.5\n","import create from 'zustand'\nimport { Vector3 } from \"three\"\n\nexport const useStore = create(set => ({\n  zoomTarget: null,\n  zoomStartTime: null,\n  zoomStartPosition: null,\n  setZoomTarget: (zoomTarget) => set(state => ({ zoomTarget })),\n  setZoomStartTime: (zoomStartTime) => set(state => ({ zoomStartTime })),\n  setZoomStartPosition: (zoomStartPosition) => set(state => ({ zoomStartPosition })),\n  zoomToMesh: (e) => {\n    e.stopPropagation();\n    e.object.updateMatrixWorld()\n    const worldPos = new Vector3()\n    const headlightPos = e.object.getWorldPosition(worldPos)\n    if (headlightPos.x === 0 && headlightPos.y === 0 && headlightPos.z === 0) return console.log('zero')\n    return set(state => ({\n      zoomTarget: headlightPos.multiplyScalar(1.1)\n    }))\n  },\n  handleHoverMesh: (e) => {\n    e.stopPropagation();\n    e.object.updateMatrixWorld()\n    const worldPos = new Vector3()\n    const headlightPos = e.object.getWorldPosition(worldPos)\n    if (headlightPos.x === 0 && headlightPos.y === 0 && headlightPos.z === 0) return console.log('zero')\n    document.getElementById('cursor-style').innerHTML = 'body { cursor: pointer }'\n  },\n  handleUnhoverMesh: (e) => {\n    e.stopPropagation();\n    document.getElementById('cursor-style').innerHTML = ''\n  },\n\n}))\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Detailed } from \"drei\";\nimport { BackSide } from \"three\";\nimport shallow from \"zustand/shallow\"\nimport { WebcamImageManager } from \"../../WebcamImageManager\";\nimport { PLASTIC_COLOR, HEADLIGHT_BODY_COLOR, BODY_HIGHLIGHT_COLOR, TURN_SIGNAL_COLOR } from \"../../../constants\"\nimport { useStore } from '../../../store'\n\nconst hkSrc = 'https://tdcctv.data.one.gov.hk/K107F.JPG?';\nconst nycSrc = 'http://207.251.86.238/cctv884.jpg?';\n\nexport function EightSeriesHeadlights ({ locations }) {\n  const [nycCubeMap, setNycCubeMap] = React.useState(null)\n  const [hkCubeMap, setHkCubeMap] = React.useState(null)\n  const [zoomToMesh, handleHoverMesh, handleUnhoverMesh] = useStore(state => [\n    state.zoomToMesh,\n    state.handleHoverMesh,\n    state.handleUnhoverMesh\n  ], shallow)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-high-lod.glb\",\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-low-lod.glb\",\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff, turnLightOn }, i) => {\n    const envMap = {\n      \"New York City\": nycCubeMap,\n      'Mexico City': nycCubeMap,\n      \"Hong Kong\": hkCubeMap,\n      \"Qingdao\": hkCubeMap,\n      \"Seoul\": hkCubeMap,\n      \"Dhaka\": hkCubeMap,\n    }\n    return (\n      <group scale={[0.02, 0.02, 0.02 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh\n          visible\n          geometry={nodes['visor'].geometry}\n          onClick={zoomToMesh}\n          onPointerOver={handleHoverMesh}\n          onPointerOut={handleUnhoverMesh}\n        >\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            envMap={envMap[name] ? envMap[name] : nycCubeMap}\n            envMapIntensity={1.3}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transmission={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 4]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.4}\n              metalness={0.9}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh>\n            <mesh visible userData={{ bloom: onDarkSide }} geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={PLASTIC_COLOR}\n                roughness={0.2}\n                metalness={0.8}\n                emissive={onDarkSide ? 0xaaaaff : 0x000000}\n                opacity={1}\n                transparent\n                transmission={0.94}\n                depthWrite={false}\n              />\n            </mesh>\n            <mesh visible userData={{ bloom: onDarkSide }} geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={PLASTIC_COLOR}\n                roughness={0.2}\n                metalness={0.8}\n                emissive={onDarkSide ? 0xaaaaff : 0x000000}\n                opacity={1}\n                transparent\n                transmission={0.4}\n                depthWrite={false}\n                side={BackSide}\n              />\n            </mesh>\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['griddy-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={PLASTIC_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n              emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <mesh visible geometry={nodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xaaaaff}\n            roughness={0.3}\n            metalness={0.5}\n            emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n          />\n        </mesh>\n        <Detailed distances={[0, 4]}>\n          <mesh visible userData={{ bloom: true }} geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              emissive={turnLightOn ? TURN_SIGNAL_COLOR : (onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000)}\n              opacity={0.7}\n              depthWrite={false}\n            />\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              emissive={turnLightOn ? TURN_SIGNAL_COLOR : (onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000)}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n          <mesh visible geometry={nodes['inner-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n      </group>\n    )})\n  return (\n    <group>\n      <WebcamImageManager src={nycSrc} handleUpdateCubeMap={setNycCubeMap} />\n      <WebcamImageManager src={hkSrc} handleUpdateCubeMap={setHkCubeMap} />\n      {meshObjects}\n    </group>\n  );\n}\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Detailed } from \"drei\";\nimport { BackSide } from \"three\";\nimport shallow from \"zustand/shallow\"\nimport { PLASTIC_COLOR, TURN_SIGNAL_COLOR, HEADLIGHT_BODY_COLOR, BODY_HIGHLIGHT_COLOR, BODY_DARK_COLOR } from \"../../../constants\"\nimport { useStore } from \"../../../store\"\n\nfunction getBulbEmissive (onDarkSide, turnLightOn) {\n  if (turnLightOn) return TURN_SIGNAL_COLOR\n  if (onDarkSide) return 0xaaaaff\n  return 0x000000\n}\n\nexport function ThreeSeriesHeadlights ({ locations }) {\n  const [zoomToMesh, handleHoverMesh, handleUnhoverMesh] = useStore(state => [\n    state.zoomToMesh,\n    state.handleHoverMesh,\n    state.handleUnhoverMesh\n  ], shallow)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/three-series-high-lod.glb\",\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/three-series-low-lod.glb\",\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5.65 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff, turnLightOn }, i) => {\n    return (\n      <group scale={[0.018, 0.018, 0.018 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh\n          visible\n          geometry={lowDetailNodes['visor'].geometry}\n          onClick={zoomToMesh}\n          onPointerOver={handleHoverMesh}\n          onPointerOut={handleUnhoverMesh}\n        >\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh visible userData={{ bloom: true }} geometry={nodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.1}\n            metalness={0.8}\n            color={0xaaaaff}\n            transparent\n            opacity={0.6}\n            emissive={getBulbEmissive(onDarkSide, turnLightOn)}\n          />\n        </mesh>\n        <Detailed distances={[0, 4]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n        </Detailed>\n        <mesh userData={{ bloom: onDarkSide }} visible geometry={nodes['griddy-thing'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={PLASTIC_COLOR}\n            roughness={0.2}\n            metalness={0.8}\n            emissive={onDarkSide ? 0xaaaaff : 0x000000}\n            opacity={1}\n            transparent\n            transmission={0.94}\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh userData={{ bloom: onDarkSide }} visible geometry={nodes['griddy-thing'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={PLASTIC_COLOR}\n            roughness={0.2}\n            metalness={0.8}\n            emissive={onDarkSide ? 0xaaaaff : 0x000000}\n            opacity={1}\n            transparent\n            transmission={0.4}\n            side={BackSide}\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 3]}>\n          <mesh visible userData={{ bloom: true }} geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 4]}>\n          <mesh visible geometry={nodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 4]}>\n          <mesh visible geometry={nodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['griddy-thing-case'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n              // map={nodes['griddy-thing-case'].material.map}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['griddy-thing-case'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              roughness={0.1}\n              metalness={0.8}\n              color={BODY_HIGHLIGHT_COLOR}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n      </group>\n    )})\n  return (\n    <group>\n      {meshObjects}\n    </group>\n  );\n}\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side\t\t: THREE.DoubleSide,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect } from \"react\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\nimport * as THREE from \"three\";\n\nextend({\n  VolumetricSpotlight\n});\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const vs = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    color,\n    length = 6,\n    position,\n    target,\n    angle = 1.2,\n    scaleX = 1,\n    geometryLength = 8,\n    openEnded\n  } = props;\n\n  // INIT\n  useEffect(() => {\n    // scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix4(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    // vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    // spotlight.current.position.copy(vs.current.position);\n    // spotlight.current.position.copy(vs.current.position);\n    // // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    // if (target && target.current) {\n    //   const targetPos = new THREE.Vector3();\n    //   target.current.getWorldPosition(targetPos) ;\n    //   vs.current.lookAt(targetPos);\n    //   spotlight.current.target.position.copy(targetPos);\n    // }\n  }, [scene]);\n\n  useFrame(({ clock }) => {\n    // spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    vs.current.scale.set(scaleX, 1, 1)\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3()\n      target.current.getWorldPosition(targetPos)\n      vs.current.lookAt(targetPos)\n      vs.current.rotateZ(Math.PI / 12)\n      vs.current.rotateY(Math.PI / 12)\n      vs.current.visible = true // prevent glitch on load\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // // maps spotlight angle to volueme cylinder every frame\n  // // it would be better to do it on a need-to basis\n  // // but it doesn't play nice with react-spring\n  // useFrame(() => {\n  //   // const angle = spotlight.current.angle;\n\n  // });\n\n  return (\n    <>\n      {/* <spotLight */}\n      {/*   ref={spotlight} */}\n      {/*   intensity={initialized ? intensity : 0} */}\n      {/*   angle={angle} */}\n      {/*   penumbra={penumbra} */}\n      {/*   distance={distance} */}\n      {/*   color={color} */}\n      {/* /> */}\n      <mesh visible={false} ref={setRef} position={position}>\n        <cylinderGeometry args={[0.05, 0.25, geometryLength, 12, 1, openEnded]} attach=\"geometry\" />\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-lightColor-value={color}\n          uniforms-attenuation-value={length} // as porportion to height of cylinder\n          uniforms-anglePower-value={angle}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, { useRef, createRef, useMemo } from \"react\";\n\nimport { MyVolumetricSpotlight } from \"./VolumetricSpotlight\";\nimport { BEAM_COLOR_LASER, BEAM_COLOR_STANDARD } from \"../../../constants\";\n\n\nexport function HeadlightBeams ({ locations }) {\n  const refs = useRef(locations.map(() => createRef()))\n  const bloomRefs = useRef(locations.map(() => createRef()))\n\n  const beams = useMemo(() => locations.map(({\n    position,\n    onDarkSide,\n    blinkingOff,\n    lightHigh,\n    lightLow,\n    lightLaser,\n    render\n  }, i ) => {\n    if (!onDarkSide) return <group key={i} />\n    const posScaleFactor = render ? 0.98 : 0.995\n    let lightLength = 4\n    if (lightLaser) lightLength = 6\n    if (lightHigh) lightLength = 5\n    return (\n      <group key={i}>\n        <mesh\n          ref={refs.current[i]}\n          position={[position[0] * 10, position[1] * 10, position[2] * 10]}\n        />\n        <mesh\n          ref={bloomRefs.current[i]}\n          position={[position[0] * 2, position[1] * 2, position[2] * 2]}\n        />\n        <MyVolumetricSpotlight\n          position={[position[0] * posScaleFactor, position[1] * posScaleFactor, position[2] * posScaleFactor]}\n          color={lightLaser ? BEAM_COLOR_LASER : BEAM_COLOR_STANDARD}\n          length={lightLength}\n          target={refs.current[i]}\n          angle={lightLaser ? 1.3 : 1.2}\n          scaleX={lightLaser ? 1.5 : 3}\n          openEnded\n        />\n        {render && (\n          <MyVolumetricSpotlight\n            position={[position[0] * 1.02, position[1] * 1.02, position[2] * 1.02]}\n            color={lightLaser ? BEAM_COLOR_LASER : BEAM_COLOR_STANDARD}\n            length={3.9}\n            geometryLength={1}\n            target={bloomRefs.current[i]}\n            angle={lightLaser ? 1.4 : 1.1}\n            scaleX={3.5}\n            openEnded\n          />\n        )}\n      </group>\n    )\n  }), [locations])\n\n  return (\n    <>\n      {beams}\n    </>\n  );\n};\n","import React, { useRef, useEffect } from 'react'\nimport * as THREE from 'three'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco } from \"drei\";\n\nconst dummy = new THREE.Object3D();\n\nfunction initInstancedMesh(instanced, locations, lightGuide) {\n  locations.forEach((location, i) => {\n    const { position } = location\n    dummy.position.set(...position)\n    let scale = [0.015, 0.015, 0.015]\n    if (lightGuide === 'on' && !location.onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    if (lightGuide === 'off' && location.onDarkSide) {\n      scale = [0, 0, 0]\n    }\n    dummy.scale.set(...scale)\n    dummy.lookAt(0, 0, 0)\n    dummy.rotateY( 5.6 * Math.PI / 4)\n    dummy.updateMatrix()\n    instanced.current.setMatrixAt(i, dummy.matrix)\n  })\n  instanced.current.instanceMatrix.needsUpdate = true\n}\n\nexport function FillerLights ({ locations }) {\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/laser.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  )\n\n  const instancedMeshVisor = useRef()\n  const instancedMeshLightGuideOn = useRef()\n  const instancedMeshLightGuideOff = useRef()\n  const instancedMeshLens = useRef()\n\n\n  useEffect(() => {\n    initInstancedMesh(instancedMeshVisor, locations);\n    initInstancedMesh(instancedMeshLightGuideOn, locations, 'on');\n    initInstancedMesh(instancedMeshLightGuideOff, locations, 'off');\n    initInstancedMesh(instancedMeshLens, locations);\n  }, [locations])\n\n  return (\n    <group>\n      <instancedMesh ref={instancedMeshVisor} geometry={nodes['visor'].geometry} userData={{ bloom: true }} args={[null, null, locations.length]} >\n        <meshPhysicalMaterial\n          attach=\"material\"\n          color={0xccccff}\n          roughness={0.05}\n          clearcoat={0.9}\n          metalness={0.9}\n          opacity={1}\n          transmission={0.6}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOff} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLightGuideOn} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={0xddeeff}\n          roughness={0.2}\n          metalness={0.8}\n          emissive={0xaaaaff}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n      <instancedMesh ref={instancedMeshLens} userData={{ bloom: true }} geometry={nodes['lens'].geometry} args={[null, null, locations.length]} >\n        <meshStandardMaterial\n          attach=\"material\"\n          roughness={0.3}\n          metalness={0.5}\n          color={0xaaaaff}\n          opacity={0.4}\n          transparent\n          depthWrite={false}\n        />\n      </instancedMesh>\n    </group>\n  )\n}\n","import React from \"react\"\nimport { useTextureLoader } from \"drei\"\nimport { Vector2, RepeatWrapping, DoubleSide } from \"three\"\n\nconst WIDTH_SEGMENTS = 20\nconst HEIGHT_SEGMENTS = 20\n\nexport function Oceans ({ radius }) {\n  const topo = useTextureLoader('topo.png')\n  topo.offset = new Vector2(0.5, 0)\n  topo.wrapS = RepeatWrapping\n  return (\n    <mesh>\n      <sphereBufferGeometry args={[radius - 0.1, WIDTH_SEGMENTS, HEIGHT_SEGMENTS]} />\n      <meshPhongMaterial\n        color={0xeeeeff}\n        alphaMap={topo}\n        transparent\n        side={DoubleSide}\n        depthWrite={false}\n      />\n    </mesh>\n  )\n}\n","import React, { useRef, useState, useMemo } from \"react\"\nimport { useFrame } from \"react-three-fiber\"\nimport { Vector3, Matrix4 } from \"three\"\n\nimport {\n  sphericalCoordsToCartesian,\n  latlngToSphericalCoords,\n  calculateAngleForTime,\n  isIntervalActive\n} from \"../../lib\"\nimport { EightSeriesHeadlights } from \"./Headlights/EightSeriesHeadlights\"\nimport { ThreeSeriesHeadlights } from \"./Headlights/ThreeSeriesHeadlights\"\nimport { HeadlightBeams } from \"./Headlights/HeadlightBeams\"\nimport { FillerLights } from \"./Headlights/FillerLights\"\nimport { Oceans } from \"./Oceans\"\nimport { RADIUS } from \"../../constants\"\n\nconst PRECISION = 1\n\nexport function LightGlobe ({ cities }) {\n  const group = useRef()\n  const [rotation, setRotation] = useState()\n\n  useFrame(() => {\n    const r = calculateAngleForTime()\n    if (r === rotation) return\n    setRotation(r)\n    group.current.rotation.y = r\n  })\n\n  const dedupedLocations = useMemo(() =>\n    cities.reduce((acc, cur) => {\n      const nearbyIdx = acc.findIndex(c => cur.lat.toFixed(PRECISION) === c.lat.toFixed(PRECISION) || cur.lng.toFixed(PRECISION) === c.lng.toFixed(PRECISION))\n      if (nearbyIdx > 0 && cur.population > acc[nearbyIdx].population) {\n        acc[nearbyIdx] = cur\n        return acc\n      }\n      acc.push(cur)\n      return acc\n    }, []),\n    [cities]\n  )\n\n  const locations = dedupedLocations \n    .map(({ lat, lng, name, render }, i) => {\n      const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n      const position = sphericalCoordsToCartesian(render ? RADIUS : RADIUS - 0.1, inc, azm);\n      const pos = new Vector3(...position)\n      const worldPos = pos.applyMatrix4(new Matrix4().makeRotationY(rotation))\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const lightLow = isIntervalActive(120, 0, 40, i)\n      const lightHigh = isIntervalActive(120, 40, 70, i)\n      const lightLaser = isIntervalActive(120, 70, 120, i)\n      const turnLightOn = isIntervalActive(60, 0, 20, i) && isIntervalActive(2, 0, 1, i)\n      // TODO:\n      // 1. turn signals blinks on and off for thirty seconds\n      // 2. goes from hi-beam to low-beam on one minute interval\n      // 3. angles down 20 degrees for fifteen seconds\n      return {\n        render,\n        position,\n        name,\n        onDarkSide,\n        turnLightOn,\n        lightLow,\n        lightHigh,\n        lightLaser\n      }\n    })\n\n  return (\n    <group ref={group}>\n      <EightSeriesHeadlights locations={locations.filter(({ render }) => render === 'EightSeries')} />\n      <ThreeSeriesHeadlights locations={locations.filter(({ render }) => render === 'ThreeSeries')} />\n      <FillerLights locations={locations.filter(({ render }) => !render)} />\n      <HeadlightBeams locations={locations} />\n      <Oceans radius={RADIUS} />\n    </group>\n  );\n};\n","import React from 'react';\nimport { Html, useProgress } from \"drei\";\n\nexport function LoadingIndicator () {\n  const { progress, errors } = useProgress()\n  if (errors.length) console.log(errors)\n  return (\n    <Html center>\n      <div className='loading'>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 500 500\">\n          <title>TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</title>\n          <defs>\n            <path d=\"M50,250c0-110.5,89.5-200,200-200s200,89.5,200,200s-89.5,200-200,200S50,360.5,50,250\" id=\"textcircle\">\n              <animateTransform\n                attributeName=\"transform\"\n                begin=\"0s\"\n                dur=\"30s\"\n                type=\"rotate\"\n                from=\"0 250 250\"\n                to=\"360 250 250\"\n                repeatCount=\"indefinite\" \n              />\n              </path>\n            </defs>\n            <text className=\"progress\" x=\"50%\" y=\"50%\" dominantBaseline=\"middle\" textAnchor=\"middle\">\n              {\n                errors && errors.length \n                  ?  errors[0]\n                  : `Loading ${Math.round(progress)}%`\n              }\n            </text>    \n            <text dy=\"70\" textLength=\"1220\">\n              <textPath className=\"circle-text\" xlinkHref=\"#textcircle\">TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</textPath>\n            </text>\n          </svg>\n        </div>\n      </Html>\n  )\n\n}\n","import { useEffect, useMemo } from 'react'\nimport * as THREE from 'three'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass })\n\nconst materials = {}\nconst darkMaterial = new THREE.MeshBasicMaterial({ color: 'black' })\nconst transparentDarkMaterial = new THREE.MeshBasicMaterial({ color: 'black', depthWrite: false })\nconst darkenNonBloomed = obj => {\n  if (obj.isMesh && !obj.userData.bloom) {\n    materials[obj.uuid] = obj.material\n    obj.material = obj.material.depthWrite ? darkMaterial : transparentDarkMaterial\n  }\n}\nconst restoreMaterial = obj => materials[obj.uuid] && ((obj.material = materials[obj.uuid]), delete materials[obj.uuid])\n\nexport function Effects() {\n  const { gl, scene, camera, size } = useThree()\n  // const bloomStrength = useControl('Bloom Strength', { type: 'number', value: 2.3 })\n  // const bloomThreshold = useControl('Bloom Threshold', { type: 'number', value: 0.2 })\n  const bloomStrength = 2.3\n  const bloomThreshold = 0.2 \n\n  const [bloom, final] = useMemo(() => {\n    const renderScene = new RenderPass(scene, camera)\n    const comp = new EffectComposer(gl)\n    comp.renderToScreen = false\n    comp.addPass(renderScene)\n    comp.addPass(new UnrealBloomPass(new THREE.Vector2(size.width, size.height), bloomStrength, 0.1, bloomThreshold))\n\n    const finalComposer = new EffectComposer(gl)\n    finalComposer.addPass(renderScene)\n    const finalPass = new ShaderPass(\n      new THREE.ShaderMaterial({\n        uniforms: { baseTexture: { value: null }, bloomTexture: { value: comp.renderTarget2.texture } },\n        vertexShader:\n          'varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }',\n        fragmentShader:\n          'uniform sampler2D baseTexture; uniform sampler2D bloomTexture; varying vec2 vUv; void main() { gl_FragColor = ( texture2D(baseTexture, vUv) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) ); }'\n      }),\n      'baseTexture'\n    )\n    finalPass.needsSwap = true\n    finalComposer.addPass(finalPass)\n    return [comp, finalComposer]\n  }, [camera, gl, scene, size.height, size.width, bloomStrength, bloomThreshold])\n\n  useEffect(() => {\n    bloom.setSize(size.width, size.height)\n    final.setSize(size.width, size.height)\n  }, [bloom, final, size])\n\n  useFrame(({ scene, camera }) => {\n    // https://github.com/mrdoob/three.js/blob/master/examples/webgl_postprocessing_unreal_bloom_selective.html\n    // this seems kinda dirty, it mutates the scene and overwrites materials\n    scene.traverse(darkenNonBloomed)\n    bloom.render()\n    scene.traverse(restoreMaterial)\n    // then writes the normal scene on top\n    final.render()\n  }, 1)\n\n  return null\n}\n\n","import React from \"react\"\nimport { useFrame } from \"react-three-fiber\"\nimport { Vector3 } from \"three\"\nimport shallow from \"zustand/shallow\"\nimport { OrbitControls } from \"drei\"\n\nimport { useStore } from \"../store\"\nimport { RADIUS, ZOOM_DURATION } from \"../constants\"\n\nexport function CameraRig () {\n  const [zoomTarget, zoomStartTime, zoomStartPosition] = useStore(state =>\n    [state.zoomTarget, state.zoomStartTime, state.zoomStartPosition], shallow)\n  const setZoomStartTime = useStore(state => state.setZoomStartTime)\n  const setZoomStartPosition = useStore(state => state.setZoomStartPosition)\n  const setZoomTarget = useStore(state => state.setZoomTarget)\n\n  useFrame(({ camera, clock }) => {\n    if (zoomTarget) {\n      if (!zoomStartTime) {\n        setZoomStartTime(clock.elapsedTime)\n        setZoomStartPosition(new Vector3().copy(camera.position)) // copy, otherwise reference is stored!\n        return\n      }\n      let zoomDurationScaledByDistance = ZOOM_DURATION\n      const distanceToZoom = zoomStartPosition.distanceTo(zoomTarget)\n      if (distanceToZoom < 0.5) zoomDurationScaledByDistance = ZOOM_DURATION / 6\n      if (distanceToZoom < 1) zoomDurationScaledByDistance = ZOOM_DURATION / 2\n      if (distanceToZoom > 3) zoomDurationScaledByDistance = ZOOM_DURATION * 1.5\n      if (!zoomDurationScaledByDistance || clock.elapsedTime > zoomStartTime + zoomDurationScaledByDistance) {\n        setZoomTarget(null)\n        setZoomStartTime(null)\n        setZoomStartPosition(null)\n        return\n      }\n      const a = (clock.elapsedTime - zoomStartTime) / zoomDurationScaledByDistance\n      const newCamPos = new Vector3().lerpVectors(zoomStartPosition, zoomTarget, a)\n      camera.position.copy(newCamPos)\n      camera.updateProjectionMatrix()\n    }\n  })\n\n\n  return (\n    <OrbitControls enableDamping minDistance={RADIUS} maxDistance={20} enablePan={false} zoomSpeed={0.2} />\n  )\n}\n","import React, { forwardRef, useMemo, useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { Vector3, Spherical, Color, AdditiveBlending, ShaderMaterial } from 'three'\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: { time: { value: 0.0 }, fade: { value: 1.0 } },\n      depthWrite: false,\n      vertexShader: `uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader: `uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`,\n    })\n  }\n}\n\n\nconst genStar = (r) => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI)) }\n\nexport const Stars = forwardRef(\n  ({ radius = 100, depth = 50, count = 5000, saturation = 0, factor = 4, fade = false }, ref) => {\n    const material = useRef()\n    const [position, color, size] = useMemo(() => {\n      const positions = []\n      const colors = []\n      const sizes = Array.from({ length: count }, () => (0.5 + 0.5 * Math.random()) * factor)\n      const color = new Color()\n      let r = radius + depth\n      const increment = depth / count\n      for (let i = 0; i < count; i++) {\n        r -= increment * Math.random()\n        positions.push(...genStar(r).toArray())\n        color.setHSL(i / count, saturation, 1)\n        colors.push(color.r, color.g, color.b)\n      }\n      return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)]\n    }, [count, depth, factor, radius, saturation])\n    useFrame((state) => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()))\n\n    const starfieldMaterial = useMemo(() => new StarfieldMaterial(), [])\n\n    return (\n      <points ref={ref}>\n        <bufferGeometry attach=\"geometry\">\n          <bufferAttribute attachObject={['attributes', 'position']} args={[position, 3]} />\n          <bufferAttribute attachObject={['attributes', 'color']} args={[color, 3]} />\n          <bufferAttribute attachObject={['attributes', 'size']} args={[size, 1]} />\n        </bufferGeometry>\n        <primitive\n          ref={material}\n          object={starfieldMaterial}\n          attach=\"material\"\n          blending={AdditiveBlending}\n          uniforms-fade-value={fade}\n          transparent\n          vertexColors\n        />\n      </points>\n    )\n  }\n)\n","import \"./styles.css\"\n\nimport React, { Suspense } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ControlsProvider } from 'react-three-gui'\nimport Credits from \"./components/Credits\"\nimport { Canvas } from \"react-three-fiber\"\nimport { CineonToneMapping } from \"three\"\nimport cities from \"./lib/cities.json\"\nimport Lights from \"./components/Lights\"\nimport { LightGlobe } from \"./components/LightGlobe/LightGlobe\"\nimport { Stats } from \"drei\"\nimport { LoadingIndicator } from \"./components/LoadingIndicator\"\nimport { BG_COLOR } from \"./constants\"\nimport { Effects } from \"./components/Effects\"\nimport { CameraRig } from \"./components/CameraRig\"\nimport { Stars } from \"./components/Stars\"\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <ControlsProvider>\n        <Canvas\n          colorManagement\n          concurrent\n          onCreated={({ gl }) => gl.setClearColor(BG_COLOR)}\n          gl={{ antialias: true, toneMapping: CineonToneMapping }}\n        >\n          <fogExp2 attach=\"fog\" args={[\"#020202\", 0.15]} />\n          <Lights />\n          <Suspense fallback={<LoadingIndicator />}>\n            <LightGlobe cities={cities} />\n          </Suspense>\n          <CameraRig />\n          <Stars factor={2.5} saturation={0.3} fade />\n          <Stats />\n          <Effects />\n        </Canvas>\n      </ControlsProvider>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n"],"sourceRoot":""}