{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","lib/index.js","constants.js","store.js","components/LightGlobe/Headlights/EightSeriesHeadlights.js","components/LightGlobe/Headlights/ThreeSeriesHeadlights.js","lib/volumetric-spotlight.js","components/LightGlobe/Headlights/VolumetricSpotlight.js","components/LightGlobe/Headlights/HeadlightBeams.js","components/LightGlobe/Headlights/FillerLightsNonInstanced.js","components/WebcamImageManager.js","components/LightGlobe/Oceans.js","components/LightGlobe/LightGlobe.js","components/LoadingIndicator.js","components/Effects.js","components/CameraRig.js","components/Stars.js","index.js"],"names":["className","rel","href","target","intensity","position","layers","userData","bloom","attach","args","color","fog","calculateAngleForTime","Math","floor","Date","valueOf","PI","isIntervalActive","periodLength","intervalStart","intervalEnd","offset","t","getTime","OFFSETS","Array","from","cities","length","map","random","getLightState","i","lightLow","lightHigh","lightLaser","turnLightOn","HEADLIGHT_BODY_COLOR","Color","TURN_SIGNAL_COLOR","BEAM_COLOR_LASER","BEAM_COLOR_STANDARD","EMISSIVE_COLOR_LASER","EMISSIVE_COLOR_STANDARD","EMISSIVE_COLOR_LOW","EMISSIVE_COLOR_OFF","useStore","create","set","zoomTarget","zoomStartTime","zoomStartPosition","envMap","setZoomTarget","state","setZoomStartTime","setZoomStartPosition","zoomToMesh","e","stopPropagation","object","updateMatrixWorld","worldPos","Vector3","headlightPos","getWorldPosition","x","y","z","console","log","multiplyScalar","handleHoverMesh","document","getElementById","innerHTML","handleUnhoverMesh","setEnvMap","EightSeriesHeadlights","locations","shallow","nodes","useLoader","GLTFLoader","lowDetailNodes","refs","useRef","createRef","griddyThingRefs","griddyThingInsideRefs","griddyThingLowDetailRefs","topLightRefs","useEffect","current","r","lookAt","rotateY","useFrame","onDarkSide","emissiveColor","griddyThing","material","emissive","griddyThingInside","griddyThingLowDetail","topLightLOD","children","meshObjects","name","scale","key","ref","visible","geometry","onClick","onPointerOver","onPointerOut","roughness","envMapIntensity","metalness","opacity","transparent","depthWrite","distances","side","BackSide","ThreeSeriesHeadlights","draco","highLod","lowLod","bulbRefs","bulbs","blinkingOff","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","THREE","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","extend","VolumetricSpotlight","MyVolumetricSpotlight","React","forwardRef","props","vs","scene","useThree","index","angle","geometryLength","openEnded","wide","clock","useState","elapsedTime","startTime","applyMatrix4","makeTranslation","parameters","height","makeRotationX","targetPos","rotateZ","lightLength","setRef","useCallback","el","uniforms-attenuation-value","uniforms-anglePower-value","HeadlightBeams","targetRefs","bloomRefs","beams","render","posScaleFactor","FillerLights","lights","corsProxy","WebcamImageManager","edgeBlur","useTextureLoader","WebGLCubeRenderTarget","generateMipmaps","renderTarget","cubeCamera","webcams","src","location","find","l","interval","aspect","size","imgRefs","billboardRefs","gl","shouldUpdate","camera","newSrc","update","rotation","texture","onload","tex","Texture","needsUpdate","billboards","alphaMap","images","alt","style","display","crossOrigin","Oceans","radius","topo","ocean","specular","Vector2","wrapS","RepeatWrapping","specularMap","LightGlobe","group","useMemo","reduce","acc","cur","localMaxCity","a","c","abs","lat","lng","population","concat","latlngToSphericalCoords","inclination","azimuth","sin","cos","sphericalCoordsToCartesian","RADIUS","filter","LoadingIndicator","useProgress","progress","errors","loadingText","round","center","xmlns","xmlnsXlink","viewBox","d","id","attributeName","begin","dur","to","repeatCount","dominantBaseline","textAnchor","dy","textLength","xlinkHref","EffectComposer","RenderPass","UnrealBloomPass","materials","darkMaterial","transparentDarkMaterial","darkenNonBloomed","obj","isMesh","uuid","restoreMaterial","Effects","renderScene","comp","renderToScreen","addPass","width","finalComposer","finalPass","ShaderPass","baseTexture","bloomTexture","renderTarget2","needsSwap","final","setSize","traverse","CameraRig","orbitControlsRef","cameraDistance","zoomSpeed","rotateSpeed","copy","zoomDurationScaledByDistance","distanceToZoom","distanceTo","ZOOM_DURATION","newCamPos","lerpVectors","updateProjectionMatrix","dampingFactor","enableDamping","minDistance","maxDistance","enablePan","StarfieldMaterial","time","fade","ShaderMaterial","genStar","setFromSpherical","Spherical","acos","Stars","depth","count","saturation","factor","positions","colors","sizes","increment","push","toArray","setHSL","g","b","Float32Array","getElapsedTime","starfieldMaterial","attachObject","blending","AdditiveBlending","uniforms-fade-value","vertexColors","App","Credits","colorManagement","concurrent","onCreated","setClearColor","antialias","Lights","fallback","rootElement","ReactDOM"],"mappings":"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","file":"static/js/main.9f3420b2.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        className=\"title\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.frieze.com/madeline-hollander-2020-sunrise-sunset\"\n        target=\"_blank\"\n      >\n        Sunrise / Sunset\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://www.frieze.com/madeline-hollander-2020-sunrise-sunset\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n      <br />\n      <a\n        className=\"subtitle\"\n        rel=\"noopener noreferrer\"\n        href=\"https://www.frieze.com/madeline-hollander-2020-sunrise-sunset\"\n        target=\"_blank\"\n      >\n        BMW Open Work 2020 by Frieze\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.4} />\n      <mesh position={[-200, -10, 0]} layers={[0, 11]} userData={{ bloom: true }}>\n        <sphereBufferGeometry attach=\"geometry\" args={[4, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"#EEEE88\" fog={false} />\n      </mesh>\n      <directionalLight\n        intensity={1.5}\n        position={[-1, 0, 0]}\n        color={0xffffe4}\n      />\n    </group>\n  );\n};\n","import cities from \"./cities.json\"\nexport function sphericalCoordsToCartesian (radius, inclination, azimuth) {\n  /*\n   * Inclination is in the range [0, pi], from straight up (the zenith)\n   * Azimuth is in the range [0, 2pi], from the x axis\n   * See: https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n   */\n  const x = radius * Math.sin(inclination) * Math.cos(azimuth);\n  const z = radius * Math.sin(inclination) * Math.sin(azimuth);\n  const y = radius * Math.cos(inclination);\n  return [-x, y, z];\n}\n\nexport function latlngToSphericalCoords (lat, lng) {\n  const inclination = Math.PI * (lat > 0 ? 90 - lat : 90 + Math.abs(lat)) / 180;\n  const azimuth = 2 * Math.PI * (lng >= 0 ? lng : 360 - Math.abs(lng)) / 360; \n  return [inclination, azimuth];\n}\n\nconst SECONDS_IN_DAY = 24 * 60 * 60;\n\nexport function calculateAngleForTime () {\n  const unixEraSeconds = Math.floor(new Date().valueOf() / 1000);\n  const secondsElapsedInDay = unixEraSeconds % SECONDS_IN_DAY;\n  const dayProgress = secondsElapsedInDay / SECONDS_IN_DAY;\n  return dayProgress * 2 * Math.PI + Math.PI;\n}\n\nexport function isIntervalActive (periodLength, intervalStart, intervalEnd, offset) {\n  const t = (new Date().getTime() + offset) % (periodLength)\n  return t < intervalEnd && t >= intervalStart;\n}\n\nconst OFFSETS = Array.from(Array(cities.length)).map(() => Math.random() * 120 * 1000)\n\nexport function getLightState (i) {\n  const offset = OFFSETS[i]\n  const lightLow = isIntervalActive(120 * 1000, 0, 40 * 1000, offset)\n  const lightHigh = isIntervalActive(120 * 1000, 40 * 1000, 70 * 1000, offset)\n  const lightLaser = isIntervalActive(120 * 1000, 70 * 1000, 120 * 1000, offset)\n  const turnLightOn = isIntervalActive(60 * 1000, 0, 20 * 1000, offset) && isIntervalActive(1 * 1500, 0, 750, offset)\n  return {\n    lightLow,\n    lightHigh,\n    lightLaser,\n    turnLightOn\n  }\n}\n","import { Color } from 'three'\n// colors\nexport const BG_COLOR = ''\nexport const HEADLIGHT_BODY_COLOR = new Color(0x838b9f)\nexport const TURN_SIGNAL_COLOR = new Color(0xF18F17)\nexport const BODY_HIGHLIGHT_COLOR = 0x0a25ad\nexport const BODY_DARK_COLOR = 0x646579\nexport const BEAM_COLOR_LASER = new Color(0xE9E0FF)\nexport const BEAM_COLOR_STANDARD = new Color(0xEAEEF8)\nexport const EMISSIVE_COLOR_LASER = new Color(0x9999ff)\nexport const EMISSIVE_COLOR_STANDARD = new Color(0xadaacc)\nexport const EMISSIVE_COLOR_LOW = new Color(0x666677)\nexport const EMISSIVE_COLOR_OFF = new Color(0x000000)\nexport const PLASTIC_COLOR = 0xddeeff\n\n// geometry\nexport const RADIUS = 3\n\n// other\nexport const DEFAULT_LAYER = 0\nexport const BLOOM_LAYER = 1\nexport const ZOOM_DURATION = 1.5\nexport const IS_LIVE = true\n","import create from 'zustand'\nimport { Vector3 } from \"three\"\n\nexport const useStore = create(set => ({\n  zoomTarget: null,\n  zoomStartTime: null,\n  zoomStartPosition: null,\n  envMap: null,\n  setZoomTarget: (zoomTarget) => set(state => ({ zoomTarget })),\n  setZoomStartTime: (zoomStartTime) => set(state => ({ zoomStartTime })),\n  setZoomStartPosition: (zoomStartPosition) => set(state => ({ zoomStartPosition })),\n  zoomToMesh: (e) => {\n    e.stopPropagation();\n    e.object.updateMatrixWorld()\n    const worldPos = new Vector3()\n    const headlightPos = e.object.getWorldPosition(worldPos)\n    if (headlightPos.x === 0 && headlightPos.y === 0 && headlightPos.z === 0) return console.log('zero')\n    return set(state => ({\n      zoomTarget: headlightPos.multiplyScalar(1.09)\n    }))\n  },\n  handleHoverMesh: (e) => {\n    e.stopPropagation();\n    e.object.updateMatrixWorld()\n    const worldPos = new Vector3()\n    const headlightPos = e.object.getWorldPosition(worldPos)\n    if (headlightPos.x === 0 && headlightPos.y === 0 && headlightPos.z === 0) return console.log('zero')\n    document.getElementById('cursor-style').innerHTML = 'body { cursor: pointer }'\n  },\n  handleUnhoverMesh: (e) => {\n    e.stopPropagation();\n    document.getElementById('cursor-style').innerHTML = ''\n  },\n  setEnvMap: envMap => set(state => ({ envMap }))\n}))\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Detailed } from \"drei\";\nimport { BackSide, Vector3 } from \"three\";\nimport shallow from \"zustand/shallow\"\nimport {\n  PLASTIC_COLOR,\n  HEADLIGHT_BODY_COLOR,\n  BODY_HIGHLIGHT_COLOR,\n  TURN_SIGNAL_COLOR,\n  EMISSIVE_COLOR_LASER,\n  EMISSIVE_COLOR_STANDARD,\n  EMISSIVE_COLOR_OFF,\n  EMISSIVE_COLOR_LOW\n} from \"../../../constants\"\nimport { useStore } from '../../../store'\nimport { getLightState } from \"../../../lib\"\n\n\nexport function EightSeriesHeadlights ({ locations }) {\n  const [zoomToMesh, handleHoverMesh, handleUnhoverMesh] = useStore(state => [\n    state.zoomToMesh,\n    state.handleHoverMesh,\n    state.handleUnhoverMesh,\n  ], shallow)\n  const envMap = useStore(state => state.envMap)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-high-lod.glb\",\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-low-lod.glb\",\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n  const griddyThingRefs = useRef(locations.map(() => createRef()))\n  const griddyThingInsideRefs = useRef(locations.map(() => createRef()))\n  const griddyThingLowDetailRefs = useRef(locations.map(() => createRef()))\n  const topLightRefs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  useFrame(() => {\n    let worldPos = new Vector3()\n    for (let i = 0; i < locations.length; i++) {\n      const headlight = refs.current[i].current;\n      headlight.getWorldPosition(worldPos)\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const { lightLaser, turnLightOn, lightLow } = getLightState(i)\n      const emissiveColor = lightLaser ? EMISSIVE_COLOR_LASER : lightLow ? EMISSIVE_COLOR_LOW : EMISSIVE_COLOR_STANDARD\n      const griddyThing = griddyThingRefs.current[i].current\n      griddyThing.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThing.userData = { bloom: onDarkSide }\n      const griddyThingInside = griddyThingInsideRefs.current[i].current\n      griddyThingInside.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThingInside.userData = { bloom: onDarkSide }\n      const griddyThingLowDetail = griddyThingLowDetailRefs.current[i].current\n      griddyThingLowDetail.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThingLowDetail.userData = { bloom: onDarkSide }\n      const topLightLOD = topLightRefs.current[i].current\n      topLightLOD.children[0].material.emissive = turnLightOn ? TURN_SIGNAL_COLOR : onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      topLightLOD.children[1].material.emissive = turnLightOn ? TURN_SIGNAL_COLOR : onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      topLightLOD.children[0].userData = { bloom: turnLightOn ? true : onDarkSide }\n      topLightLOD.children[1].userData = { bloom: turnLightOn ? true : onDarkSide }\n    }\n  })\n\n  const meshObjects = locations.map(({ position, name }, i) => {\n    return (\n      <group scale={[0.02, 0.02, 0.02 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh\n          visible\n          geometry={lowDetailNodes['visor'].geometry}\n          onClick={zoomToMesh}\n          onPointerOver={handleHoverMesh}\n          onPointerOut={handleUnhoverMesh}\n        >\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.09}\n            envMap={envMap}\n            envMapIntensity={1.5}\n            metalness={0.9}\n            opacity={0.7}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 3.5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.4}\n              metalness={0.9}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.2}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 1.75]}>\n          <mesh>\n            <mesh ref={griddyThingRefs.current[i]} visible geometry={lowDetailNodes['griddy-thing'].geometry}>\n              <meshStandardMaterial\n                attach=\"material\"\n                color={PLASTIC_COLOR}\n                roughness={0.1}\n                metalness={0.9}\n                opacity={0.3}\n                transparent\n                depthWrite={false}\n              />\n            </mesh>\n            <mesh ref={griddyThingInsideRefs.current[i]} visible geometry={nodes['griddy-thing'].geometry}>\n              <meshStandardMaterial\n                attach=\"material\"\n                color={PLASTIC_COLOR}\n                roughness={0.1}\n                metalness={0.9}\n                opacity={0.4}\n                transparent\n                depthWrite={false}\n                side={BackSide}\n              />\n            </mesh>\n          </mesh>\n          <mesh visible ref={griddyThingLowDetailRefs.current[i]} geometry={lowDetailNodes['griddy-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={PLASTIC_COLOR}\n              roughness={0.1}\n              metalness={0.9}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <mesh visible geometry={lowDetailNodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xaaaaff}\n            roughness={0.3}\n            metalness={0.5}\n            emissive={0xffffff}\n          />\n        </mesh>\n        <Detailed ref={topLightRefs.current[i]} distances={[0, 2.5]}>\n          <mesh visible geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              opacity={0.7}\n              depthWrite={false}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.1}\n              metalness={0.8}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n          <mesh visible geometry={nodes['inner-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n      </group>\n    )})\n  return (\n    <group>\n      {meshObjects}\n    </group>\n  );\n}\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Vector3 } from \"three\"\nimport { Detailed, draco } from \"drei\"\nimport shallow from \"zustand/shallow\"\nimport {\n  PLASTIC_COLOR,\n  TURN_SIGNAL_COLOR,\n  HEADLIGHT_BODY_COLOR,\n  BODY_HIGHLIGHT_COLOR,\n  BODY_DARK_COLOR,\n  EMISSIVE_COLOR_LASER,\n  EMISSIVE_COLOR_STANDARD,\n  EMISSIVE_COLOR_LOW,\n  EMISSIVE_COLOR_OFF\n} from \"../../../constants\"\nimport { useStore } from \"../../../store\"\nimport { getLightState } from \"../../../lib/index\"\n\nexport function ThreeSeriesHeadlights ({ locations }) {\n  const [zoomToMesh, handleHoverMesh, handleUnhoverMesh] = useStore(state => [\n    state.zoomToMesh,\n    state.handleHoverMesh,\n    state.handleUnhoverMesh\n  ], shallow)\n\n  const [highLod, lowLod] = useLoader(\n    GLTFLoader,\n    [process.env.PUBLIC_URL + \"/three-series-high-lod.glb\", process.env.PUBLIC_URL + \"/three-series-low-lod.glb\"],\n    draco(\"https://www.gstatic.com/draco/v1/decoders/\")\n  );\n  const { nodes } = highLod\n  const { nodes: lowDetailNodes } = lowLod\n\n  const refs = useRef(locations.map(() => createRef()))\n  const griddyThingRefs = useRef(locations.map(() => createRef()))\n  const topLightRefs = useRef(locations.map(() => createRef()))\n  const bulbRefs = useRef(locations.map(() => createRef()))\n  const envMap = useStore(state => state.envMap)\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5.65 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  useFrame(() => {\n    let worldPos = new Vector3()\n    for (let i = 0; i < locations.length; i++) {\n      const headlight = refs.current[i].current;\n      headlight.getWorldPosition(worldPos)\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const { lightLaser, turnLightOn, lightLow } = getLightState(i)\n      const emissiveColor = lightLaser ? EMISSIVE_COLOR_LASER : lightLow ? EMISSIVE_COLOR_LOW : EMISSIVE_COLOR_STANDARD\n      const griddyThing = griddyThingRefs.current[i].current\n      griddyThing.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThing.userData = { bloom: onDarkSide }\n      const topLightLOD = topLightRefs.current[i].current\n      topLightLOD.children[0].material.emissive =  onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      topLightLOD.children[1].material.emissive =  onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      topLightLOD.children[0].userData = { bloom: onDarkSide }\n      topLightLOD.children[1].userData = { bloom: onDarkSide }\n      const bulbs = bulbRefs.current[i].current\n      bulbs.material.emissive = turnLightOn ? TURN_SIGNAL_COLOR : onDarkSide ? emissiveColor : EMISSIVE_COLOR_OFF\n      bulbs.userData = { bloom: turnLightOn ? true : onDarkSide }\n    }\n  })\n\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff, turnLightOn }, i) => {\n    return (\n      <mesh scale={[0.018, 0.018, 0.018 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh\n          visible\n          geometry={lowDetailNodes['visor'].geometry}\n          onClick={zoomToMesh}\n          onPointerOver={handleHoverMesh}\n          onPointerOut={handleUnhoverMesh}\n        >\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.1}\n            metalness={0.95}\n            opacity={0.7}\n            transparent\n            depthWrite={false}\n            envMap={envMap}\n            envMapIntensity={1.5}\n          />\n        </mesh>\n        <mesh visible ref={bulbRefs.current[i]} geometry={nodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.1}\n            metalness={0.8}\n            color={0xaaaaff}\n            transparent\n            opacity={0.6}\n          />\n        </mesh>\n        <Detailed distances={[0, 3.5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n        </Detailed>\n        <mesh ref={griddyThingRefs.current[i]} visible geometry={nodes['griddy-thing'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={PLASTIC_COLOR}\n            roughness={0.2}\n            metalness={0.8}\n            opacity={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed ref={topLightRefs.current[i]} distances={[0, 2]}>\n          <mesh visible userData={{ bloom: true }} geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible userData={{ bloom: true }} geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 2]}>\n          <mesh visible geometry={nodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3.2]}>\n          <mesh visible geometry={nodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3.5]}>\n          <mesh visible geometry={nodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 1]}>\n          <mesh visible geometry={nodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              roughness={0.1}\n              metalness={0.8}\n              color={BODY_HIGHLIGHT_COLOR}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n      </mesh>\n    )})\n  return (\n    <group>\n      {meshObjects}\n    </group>\n  );\n}\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side\t\t: THREE.DoubleSide,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect, useState } from \"react\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\nimport { BEAM_COLOR_LASER, BEAM_COLOR_STANDARD } from \"../../../constants\"\nimport * as THREE from \"three\";\nimport { getLightState } from \"../../../lib\"\n\nextend({\n  VolumetricSpotlight\n});\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const vs = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    length,\n    position,\n    target,\n    index,\n    angle = 1.2,\n    geometryLength = 8,\n    openEnded,\n    wide\n  } = props;\n  const { clock } = useThree()\n\n  const [startTime] = useState(clock.elapsedTime)\n  // INIT\n  useEffect(() => {\n    // scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix4(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    // vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    // spotlight.current.position.copy(vs.current.position);\n    // spotlight.current.position.copy(vs.current.position);\n    // // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    // if (target && target.current) {\n    //   const targetPos = new THREE.Vector3();\n    //   target.current.getWorldPosition(targetPos) ;\n    //   vs.current.lookAt(targetPos);\n    //   spotlight.current.target.position.copy(targetPos);\n    // }\n  }, [scene]);\n\n  useFrame(({ clock }) => {\n    // spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3()\n      target.current.getWorldPosition(targetPos)\n      vs.current.lookAt(targetPos)\n      vs.current.rotateZ(Math.PI / 12)\n      vs.current.rotateY(Math.PI / 12)\n      const onDarkSide = !!(targetPos.x > 0.1)\n      const { lightLaser, lightHigh } = getLightState(index)\n      vs.current.visible = onDarkSide && clock.elapsedTime - startTime > 2\n      if (!onDarkSide) return\n      vs.current.material.uniforms.lightColor.value = lightLaser ? BEAM_COLOR_LASER : BEAM_COLOR_STANDARD\n      if (wide) {\n        vs.current.material.uniforms.anglePower.value = lightLaser ? 1.4 : 1.2\n        vs.current.scale.set(lightLaser ? 2 : 3.5, 1, 1)\n        vs.current.material.uniforms.attenuation.value = 3.9\n      } else {\n        let lightLength = 4\n        if (lightLaser) lightLength = 6\n        if (lightHigh) lightLength = 5\n        vs.current.material.uniforms.attenuation.value = lightLength\n        vs.current.material.uniforms.anglePower.value = lightLaser ? 1.3 : 1.2\n        vs.current.scale.set(lightLaser ? 1.5 : 3, 1, 1)\n      }\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // // maps spotlight angle to volueme cylinder every frame\n  // // it would be better to do it on a need-to basis\n  // // but it doesn't play nice with react-spring\n  // useFrame(() => {\n  //   // const angle = spotlight.current.angle;\n\n  // });\n\n  return (\n    <>\n      {/* <spotLight */}\n      {/*   ref={spotlight} */}\n      {/*   intensity={initialized ? intensity : 0} */}\n      {/*   angle={angle} */}\n      {/*   penumbra={penumbra} */}\n      {/*   distance={distance} */}\n      {/*   color={color} */}\n      {/* /> */}\n      <mesh visible={false} ref={setRef} position={position}>\n        <cylinderGeometry args={[0.05, 0.25, geometryLength, 12, 1, openEnded]} attach=\"geometry\" />\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-attenuation-value={length} // as porportion to height of cylinder\n          uniforms-anglePower-value={angle}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, { useRef, createRef } from \"react\";\n\nimport { MyVolumetricSpotlight } from \"./VolumetricSpotlight\";\n\n\nexport function HeadlightBeams ({ locations }) {\n  const targetRefs = useRef(locations.map(() => createRef()))\n  const bloomRefs = useRef(locations.map(() => createRef()))\n\n  const beams = locations.map(({\n    position,\n    render\n  }, i ) => {\n    const posScaleFactor = render ? 0.98 : 0.995\n    return (\n      <group key={i}>\n        <mesh\n          ref={targetRefs.current[i]}\n          position={[position[0] * 10, position[1] * 10, position[2] * 10]}\n        />\n        <mesh\n          ref={bloomRefs.current[i]}\n          position={[position[0] * 2, position[1] * 2, position[2] * 2]}\n        />\n        <MyVolumetricSpotlight\n          position={[position[0] * posScaleFactor, position[1] * posScaleFactor, position[2] * posScaleFactor]}\n          index={i}\n          target={targetRefs.current[i]}\n          openEnded\n        />\n        {render && (\n          <MyVolumetricSpotlight\n            position={[position[0] * 1.02, position[1] * 1.02, position[2] * 1.02]}\n            length={3.9}\n            wide\n            index={i}\n            geometryLength={1}\n            target={bloomRefs.current[i]}\n            openEnded\n          />\n        )}\n      </group>\n    )\n  })\n\n  return (\n    <>\n      {beams}\n    </>\n  );\n};\n","import React, { useRef, useEffect, createRef } from 'react'\nimport * as THREE from 'three'\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport {\n  PLASTIC_COLOR,\n  EMISSIVE_COLOR_LASER,\n  EMISSIVE_COLOR_STANDARD,\n  EMISSIVE_COLOR_LOW\n} from \"../../../constants\"\nimport { getLightState } from \"../../../lib\"\n\nexport function FillerLights ({ locations }) {\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/laser.glb\"\n  )\n  const refs = useRef(locations.map(() => createRef()))\n  const griddyThingRefs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      r.current.rotateY(5.6 * Math.PI / 4)\n    }\n  }, [])\n\n  useFrame(({ clock }) => {\n    let worldPos = new THREE.Vector3()\n    for (let i = 0; i < locations.length; i++) {\n      const headlight = refs.current[i].current;\n      headlight.getWorldPosition(worldPos)\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const { lightLaser, lightLow } = getLightState(i)\n      const emissiveColor = lightLaser ? EMISSIVE_COLOR_LASER : lightLow ? EMISSIVE_COLOR_LOW : EMISSIVE_COLOR_STANDARD\n      const griddyThing = griddyThingRefs.current[i].current\n      griddyThing.material.emissive = onDarkSide ? emissiveColor : false\n      griddyThing.userData = { bloom: onDarkSide }\n    }\n  })\n\n  const lights = locations.map(({ position }, i) => {\n    return (\n      <group scale={[0.015, 0.015, 0.015]} position={position} ref={refs.current[i]}>\n        <mesh geometry={nodes['visor'].geometry} >\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xcccccc}\n            roughness={0.05}\n            metalness={0.9}\n            opacity={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh ref={griddyThingRefs.current[i]} userData={{ bloom: true }} geometry={nodes['light-guide'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={PLASTIC_COLOR}\n            roughness={0.2}\n            metalness={0.8}\n            opacity={0.4}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh geometry={nodes['lens'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.3}\n            metalness={0.5}\n            color={0xaaaaee}\n            depthWrite={false}\n            opacity={0.5}\n            transparent\n          />\n        </mesh>\n      </group>\n    )\n  })\n\n  return (\n    <group>\n      {lights}\n    </group>\n  )\n}\n","import React, { useEffect, useRef, useState, createRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Html, useTextureLoader } from \"drei\";\nimport { WebGLCubeRenderTarget, Texture } from \"three\";\nimport {\n  calculateAngleForTime,\n} from \"../lib\"\nimport { useStore } from \"../store\"\n\nconst corsProxy = 'https://cors-anywhere.services.computerlab.io';\n\nexport function WebcamImageManager ({ locations }) {\n  const edgeBlur = useTextureLoader(process.env.PUBLIC_URL + '/edge-blur.png')\n  const [renderTarget] = useState(new WebGLCubeRenderTarget(1024, { generateMipmaps: true }))\n  const cubeCamera = useRef()\n  const setEnvMap = useStore(state => state.setEnvMap)\n\n  const webcams = [\n    {\n      src: 'http://207.251.86.238/cctv884.jpg?',\n      location: locations.find(l => l.name === 'New York City'),\n      interval: 1.5,\n      aspect: 1.46,\n      size: 6\n    },\n    {\n      src: 'https://tdcctv.data.one.gov.hk/K121F.JPG?',\n      location: locations.find(l => l.name === 'Shenzhen'),\n      interval: 30,\n      aspect: 1.22,\n      size: 6\n    },\n    {\n      src: 'https://s3-eu-west-1.amazonaws.com/jamcams.tfl.gov.uk/00001.01445.jpg?',\n      location: locations.find(l => l.name === 'Moscow'),\n      interval: 30,\n      aspect: 1.22,\n      size: 3.5\n    },\n  ]\n  const imgRefs = useRef(webcams.map(() => createRef()))\n  const billboardRefs = useRef(webcams.map(() => createRef()))\n\n  useFrame(({ gl, scene, camera }) => {\n    let shouldUpdate = false\n    for (let i = 0; i < webcams.length; i++) {\n      const { src, interval } = webcams[i]\n      webcams[i].newSrc = `${corsProxy}/${src}&rand=${Math.floor(new Date().getTime() / (interval * 1000))}`\n      if (webcams[i].newSrc !== imgRefs.current[i].current.src) {\n        shouldUpdate = true\n        cubeCamera.current.update(gl, scene)\n        imgRefs.current[i].current.src = webcams[i].newSrc\n      }\n    }\n    if (shouldUpdate) {\n      cubeCamera.current.rotation.y = - calculateAngleForTime()\n      cubeCamera.current.update(gl, scene)\n      setEnvMap(renderTarget.texture)\n      for (let i = 0; i < webcams.length; i++) {\n        if (webcams[i].newSrc !== imgRefs.current[i].current.src) {\n          imgRefs.current[i].current.src = webcams[i].newSrc\n        }\n      }\n    }\n  })\n\n  useEffect(() => {\n    for (let i = 0; i < webcams.length; i++) {\n      billboardRefs.current[i].current.lookAt(0, 0, 0)\n      imgRefs.current[i].current.onload = () => {\n        const tex = new Texture(imgRefs.current[i].current)\n        tex.needsUpdate = true\n        billboardRefs.current[i].current.material.map = tex\n        // billboardRefs.current[i].current.needsUpdate = true\n      }\n    }\n\n  }, [webcams.length])\n\n  const billboards = webcams.map(({ location, size, aspect }, i) => (\n      <mesh\n        key={i}\n        layers={[11]}\n        ref={billboardRefs.current[i]}\n        position={[location.position[0] * 1.1, location.position[1] * 1.1, location.position[2] * 1.1]}\n      >\n         <planeGeometry args={[size * aspect, size]} />\n         <meshBasicMaterial alphaMap={edgeBlur} depthWrite={false} transparent color={0xbbbbbb} />\n      </mesh>\n  ))\n\n  const images = webcams.map(({ location, src }, i) => (\n    <img\n      key={i}\n      alt='traffic cam'\n      style={{ display: 'none' }}\n      crossOrigin=\"anonymous\"\n      ref={imgRefs.current[i]}\n      src={`${corsProxy}/${src}`}\n    />\n  ))\n\n  return (\n    <>\n      <cubeCamera\n        layers={[11]}\n        name=\"cubeCamera\"\n        ref={cubeCamera}\n        position={[0, 0, 0]}\n        // i. notice how the renderTarget is passed as a constructor argument of the cubeCamera object\n        args={[0.1, 25, renderTarget]}\n      />\n      {billboards}\n      <Html>\n        {images}\n      </Html>\n    </>\n  )\n}\n","import React from \"react\"\nimport { useTextureLoader } from \"drei\"\nimport { Vector2, RepeatWrapping } from \"three\"\n\nconst WIDTH_SEGMENTS = 26\nconst HEIGHT_SEGMENTS = 26\n\nexport function Oceans ({ radius }) {\n  const topo = useTextureLoader(process.env.PUBLIC_URL + '/topo.png')\n  const ocean = useTextureLoader(process.env.PUBLIC_URL + '/ocean-texture.png')\n  const specular = useTextureLoader(process.env.PUBLIC_URL + '/specular.png')\n  topo.offset = new Vector2(0.5, 0)\n  topo.wrapS = RepeatWrapping\n  ocean.offset = new Vector2(0.5, 0)\n  ocean.wrapS = RepeatWrapping\n  specular.offset = new Vector2(0.5, 0)\n  specular.wrapS = RepeatWrapping\n  return (\n    <mesh>\n      <sphereBufferGeometry args={[radius - 0.1, WIDTH_SEGMENTS, HEIGHT_SEGMENTS]} />\n      <meshPhongMaterial\n        color={0xeeeeff}\n        alphaMap={topo}\n        map={ocean}\n        specularMap={specular}\n        transparent\n        depthWrite={false}\n      />\n    </mesh>\n  )\n}\n","import React, { useRef, useMemo } from \"react\"\nimport { useFrame } from \"react-three-fiber\"\n\nimport {\n  sphericalCoordsToCartesian,\n  latlngToSphericalCoords,\n  calculateAngleForTime,\n} from \"../../lib\"\nimport { EightSeriesHeadlights } from \"./Headlights/EightSeriesHeadlights\"\nimport { ThreeSeriesHeadlights } from \"./Headlights/ThreeSeriesHeadlights\"\nimport { HeadlightBeams } from \"./Headlights/HeadlightBeams\"\nimport { FillerLights } from \"./Headlights/FillerLightsNonInstanced\"\nimport { WebcamImageManager } from \"../WebcamImageManager\"\nimport { Oceans } from \"./Oceans\"\nimport { RADIUS } from \"../../constants\"\n\nconst PRECISION = 7.5\n\nexport function LightGlobe ({ cities }) {\n  const group = useRef()\n\n  useFrame(() => {\n    const r = calculateAngleForTime()\n    group.current.rotation.y = r\n  })\n\n  const locations = useMemo(() =>\n    cities\n      .reduce((acc, cur) => {\n          const localMaxCity = acc.reduce((a, c) => (\n            (Math.abs(a.lat - c.lat) < PRECISION && Math.abs(a.lng - c.lng) < PRECISION) && c.population > a.population\n            ? c\n            : a\n          ), cur)\n          if (localMaxCity && !acc.find(c => c === localMaxCity)) return acc.concat(localMaxCity)\n          return acc\n        }, [])\n      .map(({ lat, lng, name, render }, i) => {\n        const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n        const position = sphericalCoordsToCartesian(render ? RADIUS : RADIUS - 0.03, inc, azm);\n        return {\n          render,\n          position,\n          name,\n        }\n      }),\n    [cities]\n  )\n\n  return (\n    <group ref={group}>\n      <EightSeriesHeadlights locations={locations.filter(({ render }) => render === 'EightSeries')} />\n      <ThreeSeriesHeadlights locations={locations.filter(({ render }) => render === 'ThreeSeries')} />\n      <FillerLights locations={locations.filter(({ render }) => !render)} />\n      <HeadlightBeams locations={locations} />\n      <WebcamImageManager locations={locations} />\n      <Oceans radius={RADIUS} />\n    </group>\n  );\n};\n","import React from \"react\"\nimport { Html, useProgress } from \"drei\"\nimport { IS_LIVE } from \"../constants\"\n\nexport function LoadingIndicator () {\n  const { progress, errors } = useProgress()\n  if (errors.length) console.log(errors)\n  let loadingText = `Loading ${Math.round(progress)}%`\n  if (!IS_LIVE) loadingText = 'Coming October 7th'\n  if (errors.length) loadingText = 'Error'\n  return (\n    <Html center>\n      <div className='loading'>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 500 500\">\n          <title>TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</title>\n          <defs>\n            <path d=\"M50,250c0-110.5,89.5-200,200-200s200,89.5,200,200s-89.5,200-200,200S50,360.5,50,250\" id=\"textcircle\">\n              <animateTransform\n                attributeName=\"transform\"\n                begin=\"0s\"\n                dur=\"30s\"\n                type=\"rotate\"\n                from=\"0 250 250\"\n                to=\"360 250 250\"\n                repeatCount=\"indefinite\"\n              />\n              </path>\n            </defs>\n            <text className=\"progress\" x=\"50%\" y=\"50%\" dominantBaseline=\"middle\" textAnchor=\"middle\">\n              { loadingText }\n            </text>\n            <text dy=\"70\" textLength=\"1220\">\n              <textPath className=\"circle-text\" xlinkHref=\"#textcircle\">TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</textPath>\n            </text>\n          </svg>\n        </div>\n      </Html>\n  )\n\n}\n","import { useEffect, useMemo } from 'react'\nimport * as THREE from 'three'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass })\n\nconst materials = {}\nconst darkMaterial = new THREE.MeshBasicMaterial({ color: 'black' })\nconst transparentDarkMaterial = new THREE.MeshBasicMaterial({ color: 'black', depthWrite: false })\nconst darkenNonBloomed = obj => {\n  if (obj.isMesh && !obj.userData.bloom) {\n    materials[obj.uuid] = obj.material\n    obj.material = obj.material.depthWrite ? darkMaterial : transparentDarkMaterial\n  }\n}\nconst restoreMaterial = obj => materials[obj.uuid] && ((obj.material = materials[obj.uuid]), delete materials[obj.uuid])\n\nexport function Effects() {\n  const { gl, scene, camera, size } = useThree()\n  const bloomStrength = 1.8\n  const bloomThreshold = 0.23\n\n  const [bloom, final] = useMemo(() => {\n    const renderScene = new RenderPass(scene, camera)\n    const comp = new EffectComposer(gl)\n    comp.renderToScreen = false\n    comp.addPass(renderScene)\n    comp.addPass(new UnrealBloomPass(new THREE.Vector2(size.width / 2, size.height / 2), bloomStrength, 0, bloomThreshold))\n\n    const finalComposer = new EffectComposer(gl)\n    finalComposer.addPass(renderScene)\n    const finalPass = new ShaderPass(\n      new THREE.ShaderMaterial({\n        uniforms: { baseTexture: { value: null }, bloomTexture: { value: comp.renderTarget2.texture } },\n        vertexShader:\n          'varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }',\n        fragmentShader:\n          'uniform sampler2D baseTexture; uniform sampler2D bloomTexture; varying vec2 vUv; void main() { gl_FragColor = ( texture2D(baseTexture, vUv) + vec4( 1.0 ) * texture2D( bloomTexture, vUv ) ); }'\n      }),\n      'baseTexture'\n    )\n    finalPass.needsSwap = true\n    finalComposer.addPass(finalPass)\n    return [comp, finalComposer]\n  }, [camera, gl, scene, size.height, size.width, bloomStrength, bloomThreshold])\n\n  useEffect(() => {\n    bloom.setSize(size.width, size.height)\n    final.setSize(size.width, size.height)\n  }, [bloom, final, size])\n\n  useFrame(({ scene, camera }) => {\n    // https://github.com/mrdoob/three.js/blob/master/examples/webgl_postprocessing_unreal_bloom_selective.html\n    // this seems kinda dirty, it mutates the scene and overwrites materials\n    scene.traverse(darkenNonBloomed)\n    bloom.render()\n    scene.traverse(restoreMaterial)\n    // then writes the normal scene on top\n    final.render()\n  }, 1)\n\n  return null\n}\n\n","import React, { useRef } from \"react\"\nimport { useFrame } from \"react-three-fiber\"\nimport { Vector3 } from \"three\"\nimport shallow from \"zustand/shallow\"\nimport { OrbitControls } from \"drei\"\n\nimport { useStore } from \"../store\"\nimport { RADIUS, ZOOM_DURATION } from \"../constants\"\n\nexport function CameraRig () {\n  const [zoomTarget, zoomStartTime, zoomStartPosition] = useStore(state =>\n    [state.zoomTarget, state.zoomStartTime, state.zoomStartPosition], shallow)\n  const setZoomStartTime = useStore(state => state.setZoomStartTime)\n  const setZoomStartPosition = useStore(state => state.setZoomStartPosition)\n  const setZoomTarget = useStore(state => state.setZoomTarget)\n  const orbitControlsRef = useRef()\n\n  useFrame(({ camera, clock }) => {\n    const cameraDistance = camera.position.length()\n    if (cameraDistance < 3.5) {\n      orbitControlsRef.current.zoomSpeed = 0.1\n      orbitControlsRef.current.rotateSpeed = 0.3\n    } else if (cameraDistance < 5.5) {\n      orbitControlsRef.current.zoomSpeed = 0.2\n      orbitControlsRef.current.rotateSpeed = 0.8\n    } else {\n      orbitControlsRef.current.zoomSpeed = 0.3\n      orbitControlsRef.current.rotateSpeed = 1\n    }\n    if (zoomTarget) {\n      if (!zoomStartTime) {\n        setZoomStartTime(clock.elapsedTime)\n        setZoomStartPosition(new Vector3().copy(camera.position)) // copy, otherwise reference is stored!\n        return\n      }\n      let zoomDurationScaledByDistance = ZOOM_DURATION\n      const distanceToZoom = zoomStartPosition.distanceTo(zoomTarget)\n      if (distanceToZoom < 0.5) zoomDurationScaledByDistance = ZOOM_DURATION / 6\n      if (distanceToZoom < 1) zoomDurationScaledByDistance = ZOOM_DURATION / 2\n      if (distanceToZoom > 3) zoomDurationScaledByDistance = ZOOM_DURATION * 1.5\n      if (!zoomDurationScaledByDistance || clock.elapsedTime > zoomStartTime + zoomDurationScaledByDistance) {\n        setZoomTarget(null)\n        setZoomStartTime(null)\n        setZoomStartPosition(null)\n        return\n      }\n      const a = (clock.elapsedTime - zoomStartTime) / zoomDurationScaledByDistance\n      const newCamPos = new Vector3().lerpVectors(zoomStartPosition, zoomTarget, a)\n      camera.position.copy(newCamPos)\n      camera.updateProjectionMatrix()\n    }\n  })\n\n\n  return (\n    <OrbitControls ref={orbitControlsRef} dampingFactor={0.1} enableDamping minDistance={RADIUS + 0.2} maxDistance={20} enablePan={false} zoomSpeed={0.2} />\n  )\n}\n","import React, { forwardRef, useMemo, useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { Vector3, Spherical, Color, AdditiveBlending, ShaderMaterial } from 'three'\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: { time: { value: 0.0 }, fade: { value: 1.0 } },\n      depthWrite: false,\n      vertexShader: `uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader: `uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n      }`,\n    })\n  }\n}\n\n\nconst genStar = (r) => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI)) }\n\nexport const Stars = forwardRef(\n  ({ radius = 100, depth = 50, count = 5000, saturation = 0, factor = 4, fade = false }, ref) => {\n    const material = useRef()\n    const [position, color, size] = useMemo(() => {\n      const positions = []\n      const colors = []\n      const sizes = Array.from({ length: count }, () => (0.5 + 0.5 * Math.random()) * factor)\n      const color = new Color()\n      let r = radius + depth\n      const increment = depth / count\n      for (let i = 0; i < count; i++) {\n        r -= increment * Math.random()\n        positions.push(...genStar(r).toArray())\n        color.setHSL(i / count, saturation, 1)\n        colors.push(color.r, color.g, color.b)\n      }\n      return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)]\n    }, [count, depth, factor, radius, saturation])\n    useFrame((state) => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime()))\n\n    const starfieldMaterial = useMemo(() => new StarfieldMaterial(), [])\n\n    return (\n      <points ref={ref}>\n        <bufferGeometry attach=\"geometry\">\n          <bufferAttribute attachObject={['attributes', 'position']} args={[position, 3]} />\n          <bufferAttribute attachObject={['attributes', 'color']} args={[color, 3]} />\n          <bufferAttribute attachObject={['attributes', 'size']} args={[size, 1]} />\n        </bufferGeometry>\n        <primitive\n          ref={material}\n          object={starfieldMaterial}\n          attach=\"material\"\n          blending={AdditiveBlending}\n          uniforms-fade-value={fade}\n          transparent\n          vertexColors\n        />\n      </points>\n    )\n  }\n)\n","import \"./styles.css\"\n\nimport React, { Suspense } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Credits from \"./components/Credits\"\nimport { Canvas } from \"react-three-fiber\"\nimport cities from \"./lib/cities.json\"\nimport Lights from \"./components/Lights\"\nimport { LightGlobe } from \"./components/LightGlobe/LightGlobe\"\n// import { Stats } from \"drei\"\nimport { LoadingIndicator } from \"./components/LoadingIndicator\"\nimport { BG_COLOR, IS_LIVE } from \"./constants\"\nimport { Effects } from \"./components/Effects\"\nimport { CameraRig } from \"./components/CameraRig\"\nimport { Stars } from \"./components/Stars\"\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <Canvas\n        colorManagement\n        concurrent\n        onCreated={({ gl }) => gl.setClearColor(BG_COLOR)}\n        gl={{ antialias: true }}\n      >\n        <fogExp2 attach=\"fog\" args={[\"#020202\", 0.1]} />\n        <Lights />\n        {\n          IS_LIVE\n            ? (\n              <Suspense fallback={<LoadingIndicator />}>\n                <LightGlobe cities={cities} />\n              </Suspense>\n            )\n            : <LoadingIndicator />\n        }\n        <CameraRig />\n        <Stars factor={2.2} saturation={0.3} fade />\n        {/* <Stats /> */}\n        <Effects />\n      </Canvas>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n"],"sourceRoot":""}