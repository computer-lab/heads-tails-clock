{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","lib/volumetric-spotlight.js","components/LightGlobe/Light/VolumetricSpotlight.js","components/LightGlobe/Light/Light.js","lib/index.js","components/LightGlobe/Light/EightSeriesHeadlight.js","components/LightGlobe/index.js","index.js"],"names":["Credits","react_default","a","createElement","className","rel","href","target","Lights","intensity","position","castShadow","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","THREE","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","transparent","depthWrite","extend","VolumetricSpotlight","MyVolumetricSpotlight","React","forwardRef","props","ref","vs","useRef","spotlight","scene","useThree","_props$angle","angle","_props$penumbra","penumbra","_props$distance","distance","color","useEffect","add","current","geometry","applyMatrix","makeTranslation","parameters","height","makeRotationX","Math","PI","material","copy","useFrame","_ref","clock","targetPos","getWorldPosition","lookAt","x","setRef","useCallback","el","scale","set","Fragment","args","attach","uniforms-lightColor-value","uniforms-attenuation-value","uniforms-anglePower-value","Light","name","mesh","spotlightTarget","time","_useState","useState","isActive","Object","slicedToArray","isActiveRef","y","sin","includes","VolumetricSpotlight_MyVolumetricSpotlight","sphericalCoordsToCartesian","radius","inclination","azimuth","cos","z","latlngToSphericalCoords","lat","lng","abs","EightSeriesHeadlight","positions","meshes","useLoader","GLTFLoader","children","merged","BufferGeometryUtils","mergeBufferGeometries","map","m","center","refs","createRef","_step","_iterator","createForOfIteratorHelper","s","n","done","r","rotateX","rotateY","rotateZ","err","e","f","meshObjects","p","i","key","visible","roughness","metalness","opacity","LightGlobe","group","rotation","cities","_latlngToSphericalCoo","_latlngToSphericalCoo2","lights","_ref2","coords","_coords","inc","azm","concat","spotlightTargetPosition","RADIUS","react","fallback","App","web","style","background","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.834f131c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Heads / Tails Clock\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.4} />\n      <directionalLight\n        intensity={0.9}\n        position={[-1, -1, 0]}\n        castShadow\n      />\n    </group>\n  );\n};\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    // side\t\t: THREE.DoubleSide,\n    // blending\t: THREE.AdditiveBlending,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect } from \"react\";\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\n\nimport * as THREE from \"three\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\n\nextend({\n  VolumetricSpotlight\n});\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const vs = React.useRef();\n  const spotlight = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    angle = 0.2,\n    penumbra = 0.6,\n    distance = 1,\n    color,\n    intensity,\n    position,\n    target\n  } = props;\n\n  // INIT\n  useEffect(() => {\n    scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    spotlight.current.position.copy(vs.current.position);\n  }, [scene, color, position]);\n\n  useFrame(({ clock }) => {\n    spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3();\n      target.current.getWorldPosition(targetPos) ;\n      vs.current.lookAt(targetPos);\n      if  (targetPos.x < 0) {\n        vs.current.material.uniforms.lightColor.value = new THREE.Color(0xffd7aa);\n      }\n      spotlight.current.target.position.copy(targetPos);\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // maps spotlight angle to volueme cylinder every frame\n  // it would be better to do it on a need-to basis\n  // but it doesn't play nice with react-spring\n  useFrame(() => {\n    const angle = spotlight.current.angle;\n\n    vs.current.scale.set(1 * angle, 1 * angle, 1);\n  });\n\n  return (\n    <>\n      <spotLight\n        castShadow\n        ref={spotlight}\n        intensity={intensity}\n        angle={angle}\n        penumbra={penumbra}\n        distance={distance}\n        color={color}\n      />\n\n      <mesh ref={setRef} position={position}>\n        <cylinderGeometry args={[0.2, 15, 64, 30, 40, true]} attach=\"geometry\" />\n\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-lightColor-value={color}\n          uniforms-attenuation-value={3}\n          uniforms-anglePower-value={12}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, {\n  useRef,\n  useState,\n  useEffect,\n} from \"react\";\nimport { useFrame } from \"react-three-fiber\";\n\nimport { MyVolumetricSpotlight } from \"./VolumetricSpotlight\";\n\n\nexport function Light ({ position, name }) {\n  const mesh = useRef();\n  const spotlightTarget = useRef();\n  const time = useRef(0);\n\n  // const [isHovered, setIsHovered] = useState(false);\n  const [isActive] = useState(false);\n\n  const isActiveRef = useRef(isActive);\n\n\n  // random time mod factor\n  // const timeMod = useMemo(() => random(0.1, 4, true), []);\n\n  // color\n  // const color = isHovered ? 0xefefef : (isActive ? 0xffffff : 0xeeeeee);\n\n  //useEffect of the activeState\n  useEffect(() => {\n    isActiveRef.current = isActive;\n  }, [isActive]);\n\n  // raf loop\n  useFrame(() => {\n    if (!mesh.current) return;\n    mesh.current.lookAt(0, 0, 0)\n    if (isActiveRef.current) {\n      time.current += 0.03;\n      mesh.current.position.y = position[1] + Math.sin(time.current) * 0.05;\n    }\n  });\n\n  // Events\n  // const onHover = useCallback(\n  //   (e, value) => {\n  //     e.stopPropagation();\n  //     setIsHovered(value);\n  //   },\n  //   [setIsHovered]\n  // );\n\n  // const onClick = useCallback(\n  //   e => {\n  //     e.stopPropagation();\n  //     setIsActive(v => !v);\n  //   },\n  //   [setIsActive]\n  // );\n\n  // function LightPlaceholder () {\n  //   return (\n  //     <mesh\n  //       ref={mesh}\n  //       position={position}\n  //       onClick={e => onClick(e)}\n  //       onPointerOver={e => onHover(e, true)}\n  //       onPointerOut={e => onHover(e, false)}\n  //     >\n  //       <boxBufferGeometry attach=\"geometry\" args={[0.12, 0.07, 0.05]} />\n  //       <meshStandardMaterial\n  //         attach=\"material\"\n  //         color={color}\n  //         transparent\n  //         opacity={0.8}\n  //       />\n  //     </mesh>\n  //   )\n  // }\n\n\n  return (\n    <group>\n      {\n        ['Shanghai', 'Berlin', 'New York City'].includes(name)  && (\n          <>\n            <mesh\n              ref={spotlightTarget}\n              position={[position[0] * 10, position[1] * 10, position[2] * 10]}\n            >\n            </mesh>\n            <MyVolumetricSpotlight\n              position={[position[0] * 0.98, position[1] * 0.98, position[2] * 0.98]}\n              color={0xccccff}\n              target={spotlightTarget}\n              intensity={0.1}\n            />\n          </>\n        )\n      }\n      {/* <LightPlaceholder /> */}\n    </group>\n  );\n};\n","\n\nexport function sphericalCoordsToCartesian (radius, inclination, azimuth) {\n  /*\n   * Inclination is in the range [0, pi], from straight up (the zenith)\n   * Azimuth is in the range [0, 2pi], from the x axis\n   * See: https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n   */\n  const x = radius * Math.sin(inclination) * Math.cos(azimuth);\n  const z = radius * Math.sin(inclination) * Math.sin(azimuth);\n  const y = radius * Math.cos(inclination);\n  return [-x, y, z];\n}\n\nexport function latlngToSphericalCoords (lat, lng) {\n  const inclination = Math.PI * (lat > 0 ? 90 - lat : 90 + Math.abs(lat)) / 180;\n  const azimuth = 2 * Math.PI * (lng >= 0 ? lng : 360 - Math.abs(lng)) / 360; \n  return [inclination, azimuth];\n}\n\n\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { BufferGeometryUtils } from \"three/examples/jsm/utils/BufferGeometryUtils\";\n\n\nexport function EightSeriesHeadlight ({ positions }) {\n  const { scene } = useLoader(GLTFLoader, \"headlight-simplest-deglitched.glb\");\n  const meshes = scene.children[0].children[0].children;\n  const merged = BufferGeometryUtils.mergeBufferGeometries(meshes.map(m => m.geometry.center()));\n\n  const refs = useRef(positions.map(() => createRef()))\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      r.current.rotateX(Math.PI / 2)\n      r.current.rotateY(Math.PI)\n      r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n  const meshObjects = positions.map((p, i) => {\n    return (\n      <mesh position={p} ref={refs.current[i]} scale={[0.009, 0.009, 0.009 ]} key={p[0]} visible geometry={merged}>\n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"white\"\n          roughness={0.2}\n          metalness={0.6}\n          opacity={0.7}\n          transparent\n        />\n      </mesh>\n    )})\n  return (\n    <group>\n      {meshObjects}\n    </group>\n  )\n}\n","import React, { useRef, Suspense } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\n\nimport { Light } from \"./Light/Light\";\nimport { sphericalCoordsToCartesian, latlngToSphericalCoords } from \"../../lib\";\nimport cities from \"../../lib/cities.json\";\n\nimport { EightSeriesHeadlight } from \"./Light/EightSeriesHeadlight\";\n\nexport function LightGlobe () {\n  const group = useRef();\n\n  useFrame(() => {\n    group.current.rotation.y += 0.005;\n    // use redux here instead\n  });\n\n  const RADIUS = 2.75;\n  const positions = cities.map(({ lat, lng }) => {\n    const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n    return sphericalCoordsToCartesian(RADIUS, inc, azm);\n\n  })\n\n  const lights = cities.map(({ lat, lng, name }) => {\n    const coords = latlngToSphericalCoords(lat, lng);\n    const [inc, azm] = coords\n    return (\n      <Light\n        key={`${inc}-${azm}`}\n        position={sphericalCoordsToCartesian(RADIUS, inc, azm)}\n        spotlightTargetPosition={sphericalCoordsToCartesian(RADIUS * 1.2, inc, azm)}\n        name={name}\n      />\n    )\n\n  })\n\n  return (\n    <group ref={group}>\n      {lights}\n      <Suspense fallback={<axesHelper />}>\n        <EightSeriesHeadlight positions={positions} />\n      </Suspense>\n    </group>\n  )\n  ;\n};\n","import \"./styles.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Credits from \"./components/Credits\";\nimport { Canvas } from \"react-three-fiber\";\nimport Lights from \"./components/Lights\";\nimport { LightGlobe } from \"./components/LightGlobe\";\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <Canvas style={{ background: '#171010' }}>\n        <fog attach=\"fog\" args={[\"#222831\", 0, 15]} />\n        <Lights />\n        <LightGlobe />\n      </Canvas>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}