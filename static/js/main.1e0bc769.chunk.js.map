{"version":3,"sources":["components/Credits/index.js","components/Lights/index.js","components/WebcamImageManager.js","components/LightGlobe/Headlights/EightSeriesHeadlights.js","constants.js","components/LightGlobe/Headlights/ThreeSeriesHeadlights.js","lib/volumetric-spotlight.js","components/LightGlobe/Headlights/VolumetricSpotlight.js","components/LightGlobe/Headlights/HeadlightBeams.js","components/LightGlobe/LightGlobe.js","lib/index.js","components/LoadingIndicator.js","index.js"],"names":["className","rel","href","target","intensity","position","attach","args","color","fog","corsProxy","WebcamImageManager","src","handleUpdateCubeMap","imgRef","useRef","useFrame","newSrc","Math","floor","Date","getTime","current","useEffect","onload","inputWidth","naturalWidth","inputHeight","naturalHeight","inputImageAspectRatio","outputWidth","outputHeight","outputImage","document","createElement","width","height","getContext","drawImage","map","CubeTexture","needsUpdate","alt","style","display","crossOrigin","ref","EightSeriesHeadlights","locations","React","useState","nycCubeMap","setNycCubeMap","hkCubeMap","setHkCubeMap","nodes","useLoader","GLTFLoader","process","draco","midDetailNodes","lowDetailNodes","refs","createRef","r","lookAt","rotateY","PI","meshObjects","i","name","onDarkSide","blinkingOff","envMap","scale","key","visible","geometry","roughness","envMapIntensity","clearcoat","metalness","opacity","transmission","transparent","depthWrite","distances","emissive","side","BackSide","ThreeSeriesHeadlights","lightMapIntensity","material","VolumetricSpotLightMaterial","vertexShader","join","fragmentShader","THREE","uniforms","attenuation","type","value","anglePower","spotPosition","lightColor","extend","VolumetricSpotlight","MyVolumetricSpotlight","forwardRef","props","initialized","setInitialized","vs","scene","useThree","applyMatrix4","makeTranslation","parameters","makeRotationX","clock","targetPos","getWorldPosition","setRef","useCallback","el","uniforms-lightColor-value","uniforms-attenuation-value","uniforms-anglePower-value","HeadlightBeams","beams","useMemo","LightGlobe","group","rotation","setRotation","valueOf","y","cities","filter","c","render","lat","lng","abs","latlngToSphericalCoords","radius","inclination","azimuth","x","sin","cos","z","sphericalCoordsToCartesian","Vector3","Matrix4","makeRotationY","getSeconds","LoadingIndicator","progress","useProgress","center","xmlns","xmlnsXlink","viewBox","d","id","attributeName","begin","dur","from","to","repeatCount","dominantBaseline","textAnchor","round","dy","textLength","xlinkHref","App","Credits","colorManagement","concurrent","gl","antialias","toneMapping","CineonToneMapping","background","Lights","fallback","enablePan","zoomSpeed","factor","saturation","rootElement","getElementById","ReactDOM"],"mappings":"g2zCAEe,aACb,OACE,yBAAKA,UAAU,WACb,uBACEC,IAAI,sBACJC,KAAK,8DACLC,OAAO,UAHT,oBAOA,6BACA,uBACEF,IAAI,sBACJC,KAAK,8DACLC,OAAO,UAHT,wB,cCXS,aACb,OACE,+BACE,kCAAcC,UAAW,KACzB,0BAAMC,SAAU,EAAE,KAAM,GAAI,IAC1B,0CAAsBC,OAAO,WAAWC,KAAM,CAAC,EAAG,GAAI,MACtD,uCAAmBD,OAAO,WAAWE,MAAM,UAAUC,KAAK,KAE5D,sCACEL,UAAW,GACXC,SAAU,EAAE,EAAG,EAAG,GAClBG,MAAO,a,2DCRTE,EAAY,gDAEX,SAASC,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,oBACnCC,EAASC,mBAyFf,OAvFAC,aAAS,WACP,IAAMC,EAAM,UAAMP,EAAN,YAAmBE,EAAnB,iBAA+BM,KAAKC,OAAM,IAAIC,MAAOC,UAAY,MACzEJ,IAAWH,EAAOQ,QAAQV,MAAKE,EAAOQ,QAAQV,IAAMK,MAG1DM,qBAAU,WACRT,EAAOQ,QAAQE,OAAS,WACtB,IAAMC,EAAaX,EAAOQ,QAAQI,aAC5BC,EAAcb,EAAOQ,QAAQM,cAM7BC,EAAwBJ,EAAaE,EAIvCG,EAAcL,EACdM,EAAeJ,EACfE,EAL2B,EAM7BC,EAN6B,EAMfH,EACLE,EAPoB,IAQ7BE,EAAeN,EARc,GAW/B,IAAMO,EAAcC,SAASC,cAAc,UAqC3CF,EAAYG,MAAQL,EACpBE,EAAYI,OAASL,EAKXC,EAAYK,WAAW,MAC7BC,UAAUxB,EAAOQ,QAAS,EAAG,GAQjC,IAAMiB,EAAM,IAAIC,cACd,CAACR,EAAaA,EAAaA,EAAaA,EAAaA,EAAaA,IAEpEO,EAAIE,aAAc,EAClB5B,EAAoB0B,MAErB,CAAC1B,IAIF,kBAAC,IAAD,KACE,yBAAK6B,IAAI,kBAAkBC,MAAO,CAAEC,QAAS,QAAUC,YAAY,YAAYC,IAAKhC,EAAQF,IAAG,UAAKF,EAAL,YAAkBE,MCxFhH,SAASmC,EAAT,GAAgD,IAAdC,EAAa,EAAbA,UAAa,EAChBC,IAAMC,SAAS,MADC,mBAC7CC,EAD6C,KACjCC,EADiC,OAElBH,IAAMC,SAAS,MAFG,mBAE7CG,EAF6C,KAElCC,EAFkC,KAI5CC,EAAUC,YAChBC,IACAC,wDACAC,YAAMD,gCAHAH,MAMOK,EAAmBJ,YAChCC,IACAC,qDACAC,YAAMD,gCAHAH,MAMOM,EAAmBL,YAChCC,IACAC,0DACAC,YAAMD,gCAHAH,MAMFO,EAAO/C,iBAAOiC,EAAUT,KAAI,kBAAMwB,0BAExCxC,qBAAU,WAAO,IAAD,gBACEuC,EAAKxC,SADP,IACd,2BAA8B,CAAC,IAApB0C,EAAmB,QAC5BA,EAAE1C,QAAQ2C,OAAO,EAAE,EAAE,GAErBD,EAAE1C,QAAQ4C,QAAS,EAAIhD,KAAKiD,GAAK,IAJrB,iCAOb,IAEH,IAAMC,EAAcpB,EAAUT,KAAI,WAA8C8B,GAAO,IAAlDhE,EAAiD,EAAjDA,SAAUiE,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,YACzDC,EAAS,CACb,gBAAiBtB,EACjB,cAAeA,EACf,YAAaE,EACb,QAAWA,EACX,MAASA,EACT,MAASA,GAEX,OACE,2BAAOqB,MAAO,CAAC,IAAM,IAAM,KAAQC,IAAKL,EAAMjE,SAAUA,EAAUyC,IAAKgB,EAAKxC,QAAQ+C,IAClF,0BAAMO,SAAO,EAACC,SAAUtB,EAAK,MAAUsB,UACrC,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,IACXL,OAAQA,EAAOH,GACfS,gBAAiB,IACjBC,UAAW,GACXC,UAAW,GACXC,QAAS,EACTC,aAAc,GACdC,aAAW,EACXC,YAAY,KAGhB,kBAAC,IAAD,CAAUC,UAAW,CAAC,EAAG,IAAK,IAC5B,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,qBAAqBsB,UACjD,0CACEvE,OAAO,WACPE,MCzEsB,QD0EtBsE,UAAW,GACXG,UAAW,MAGf,0BAAML,SAAO,EAACC,SAAUjB,EAAe,qBAAqBiB,UAC1D,0CACEvE,OAAO,WACPE,MCjFsB,QDkFtBsE,UAAW,GACXG,UAAW,MAGf,0BAAML,SAAO,EAACC,SAAUhB,EAAe,qBAAqBgB,UAC1D,0CACEvE,OAAO,WACPE,MCzFsB,QD0FtBsE,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,8BACE,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,gBAAgBsB,UAC5C,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,EAClDU,QAAS,EACTE,aAAW,EACXD,aAAc,IACdE,YAAY,KAGhB,0BAAMT,SAAO,EAACC,SAAUtB,EAAM,gBAAgBsB,UAC5C,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,EAClDU,QAAS,EACTE,aAAW,EACXD,aAAc,GACdE,YAAY,EACZG,KAAMC,eAIZ,0BAAMb,SAAO,EAACC,SAAUhB,EAAe,gBAAgBgB,UACrD,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,EAClDa,YAAY,MAIlB,0BAAMT,SAAO,EAACC,SAAUtB,EAAK,MAAUsB,UACrC,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,KAGtD,kBAAC,IAAD,CAAUc,UAAW,CAAC,EAAG,IACvB,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,aAAasB,UACzC,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,EAClDU,QAAS,EACTE,aAAW,EACXD,aAAc,GACdE,YAAY,KAGhB,0BAAMT,SAAO,EAACC,SAAUhB,EAAe,aAAagB,UAClD,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,EAClDa,YAAY,MAIlB,kBAAC,IAAD,CAAUC,UAAW,CAAC,EAAG,IACvB,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,0BAA0BsB,UACtD,0CACEvE,OAAO,WACPE,MC5KsB,OD6KtBsE,UAAW,GACXG,UAAW,MAGf,0BAAML,SAAO,EAACC,SAAUhB,EAAe,0BAA0BgB,UAC/D,0CACEvE,OAAO,WACPE,MCpLsB,ODqLtBsE,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,yBAAyBsB,UACrD,0CACEvE,OAAO,WACPE,MC9LsB,OD+LtBsE,UAAW,GACXG,UAAW,MAGf,0BAAML,SAAO,EAACC,SAAUhB,EAAe,yBAAyBgB,UAC9D,0CACEvE,OAAO,WACPE,MCtMsB,ODuMtBsE,UAAW,GACXG,UAAW,WAMvB,OACE,+BACE,kBAACtE,EAAD,CAAoBC,IA1MX,qCA0MwBC,oBAAqBuC,IACtD,kBAACzC,EAAD,CAAoBC,IA5MZ,4CA4MwBC,oBAAqByC,IACpDc,GE9MA,SAASsB,EAAT,GAAgD,IAAd1C,EAAa,EAAbA,UAC/BO,EAAUC,YAChBC,IACAC,+BACAC,YAAMD,gCAHAH,MAMOM,EAAmBL,YAChCC,IACAC,uCACAC,YAAMD,gCAHAH,MAMFO,EAAO/C,iBAAOiC,EAAUT,KAAI,kBAAMwB,0BAExCxC,qBAAU,WAAO,IAAD,gBACEuC,EAAKxC,SADP,IACd,2BAA8B,CAAC,IAApB0C,EAAmB,QAC5BA,EAAE1C,QAAQ2C,OAAO,EAAE,EAAE,GAErBD,EAAE1C,QAAQ4C,QAAS,IAAMhD,KAAKiD,GAAK,IAJvB,iCAOb,IAEH,IAAMC,EAAcpB,EAAUT,KAAI,WAA8C8B,GAAO,IAAlDhE,EAAiD,EAAjDA,SAAUiE,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,YAC/D,OACE,2BAAOE,MAAO,CAAC,IAAM,IAAM,KAAQC,IAAKL,EAAMjE,SAAUA,EAAUyC,IAAKgB,EAAKxC,QAAQ+C,IAClF,0BAAMO,SAAO,EAACC,SAAUhB,EAAc,MAAUgB,UAC9C,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,IACXE,UAAW,GACXC,UAAW,GACXC,QAAS,EACTC,aAAc,GACdC,aAAW,EACXC,YAAY,KAGhB,0BAAMT,SAAO,EAACC,SAAUtB,EAAK,QAAYsB,UACvC,0CACEvE,OAAO,WACPwE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,KAGtD,0BAAMI,SAAO,EAACC,SAAUtB,EAAK,QAAYsB,UACvC,0CACEvE,OAAO,WACPwE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,KAGtD,0BAAMI,SAAO,EAACC,SAAUtB,EAAK,QAAYsB,UACvC,0CACEvE,OAAO,WACPwE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,KAGtD,kBAAC,IAAD,CAAUc,UAAW,CAAC,EAAG,IACvB,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,qBAAqBsB,UACjD,0CACEvE,OAAO,WACPE,MD1EsB,QC2EtBsE,UAAW,GACXG,UAAW,MAIf,0BAAML,SAAO,EAACC,SAAUhB,EAAe,qBAAqBgB,UAC1D,0CACEvE,OAAO,WACPE,MDnFsB,QCoFtBsE,UAAW,GACXG,UAAW,GAEXU,kBAAmB,MAIzB,kBAAC,IAAD,CAAUL,UAAW,CAAC,EAAG,IACvB,8BACE,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,gBAAgBsB,UAC5C,0CACEvE,OAAO,WACPE,MDhGoB,QCiGpBsE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,EAClDU,QAAS,EACTE,aAAW,EACXD,aAAc,IACdE,YAAY,KAGhB,0BAAMT,SAAO,EAACC,SAAUtB,EAAM,gBAAgBsB,UAC5C,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,EAClDU,QAAS,EACTE,aAAW,EACXD,aAAc,GACdE,YAAY,EACZG,KAAMC,eAIZ,0BAAMb,SAAO,EAACC,SAAUhB,EAAe,gBAAgBgB,UACrD,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,GACXM,SAAUhB,IAAeC,EAAc,SAAW,EAClDU,QAAS,EACTE,aAAW,EACXD,aAAc,GACdE,YAAY,MAIlB,kBAAC,IAAD,CAAUC,UAAW,CAAC,EAAG,IACvB,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,aAAasB,UACzC,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,MAGf,0BAAML,SAAO,EAACC,SAAUhB,EAAe,aAAagB,UAClD,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,eAAesB,UAC3C,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,MAIf,0BAAML,SAAO,EAACC,SAAUhB,EAAe,eAAegB,UACpD,0CACEvE,OAAO,WACPE,MAAO,SACPsE,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,eAAesB,UAC3C,0CACEvE,OAAO,WACPE,MD7KiB,OC8KjBsE,UAAW,GACXG,UAAW,MAIf,0BAAML,SAAO,EAACC,SAAUhB,EAAe,eAAegB,UACpD,0CACEvE,OAAO,WACPE,MDtLiB,OCuLjBsE,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMV,SAAO,EAACC,SAAUtB,EAAK,OAAWsB,UACtC,0CACEvE,OAAO,WACPE,MDjMsB,OCkMtBsE,UAAW,GACXG,UAAW,MAGf,0BAAML,SAAO,EAACC,SAAUhB,EAAc,OAAWgB,UAC/C,0CACEvE,OAAO,WACPE,MDzMsB,OC0MtBsE,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,qBAAqBsB,UACjD,0CACEvE,OAAO,WACPE,MDrNsB,QCsNtBsE,UAAW,GACXG,UAAW,GACX1C,IAAKgB,EAAM,qBAAqBqC,SAASrD,OAG7C,0BAAMqC,SAAO,EAACC,SAAUhB,EAAe,qBAAqBgB,UAC1D,0CACEvE,OAAO,WACPE,MD9NsB,QC+NtBsE,UAAW,GACXG,UAAW,OAIjB,kBAAC,IAAD,CAAUK,UAAW,CAAC,EAAG,IACvB,0BAAMV,SAAO,EAACC,SAAUtB,EAAM,cAAcsB,UAC1C,0CACEvE,OAAO,WACPwE,UAAW,GACXG,UAAW,GACXzE,MDxOsB,UC4O1B,0BAAMoE,SAAO,EAACC,SAAUhB,EAAe,cAAcgB,UACnD,0CACEvE,OAAO,WACPE,MD/OsB,OCgPtBsE,UAAW,GACXG,UAAW,WAMvB,OACE,+BACGb,GCrPP,IAqFeyB,EArFqB,WAElC,IAAIC,EAAe,CACjB,wBACA,+BAEA,eACA,uBACA,mDAEA,6DACA,yCAEA,qBACA,6EACA,KACAC,KAAK,MACHC,EAAiB,CACnB,2BACA,kCAEA,8BAEA,gCAEA,gCACA,+BAEA,eACA,mBAKA,mEACA,iDAKA,6DACA,+EACA,2CAQA,gDACA,KACAD,KAAK,MA8BP,OA1Be,IAAIE,iBAAqB,CACtCC,SAAU,CACRC,YAAa,CACXC,KAAM,IACNC,MAAO,GAETC,WAAY,CACVF,KAAM,IACNC,MAAO,KAETE,aAAc,CACZH,KAAM,KACNC,MAAO,IAAIJ,UAAc,EAAG,EAAG,IAEjCO,WAAY,CACVJ,KAAM,IACNC,MAAO,IAAIJ,QAAY,UAG3BH,aAAcA,EACdE,eAAgBA,EAChBR,KAAQS,aAERb,aAAa,EACbC,YAAY,KChFhBoB,YAAO,CACLC,wBAKK,IAAMC,EAAwB1D,IAAM2D,YAAW,SAA+BC,EAAO/D,GAAM,IAAD,EACzDI,oBAAS,GADgD,mBACxF4D,EADwF,KAC3EC,EAD2E,KAEzFC,EAAK/D,IAAMlC,SAETkG,EAAUC,cAAVD,MAGNzG,EAGEqG,EAHFrG,MACAH,EAEEwG,EAFFxG,SACAF,EACE0G,EADF1G,OAIFoB,qBAAU,WAGR,IAAMsD,EAAWmC,EAAG1F,QAAQuD,SAE5BA,EAASsC,cACP,IAAIlB,WAAgBmB,gBAAgB,GAAIvC,EAASwC,WAAWjF,OAAS,EAAG,IAE1EyC,EAASsC,cAAa,IAAIlB,WAAgBqB,eAAepG,KAAKiD,GAAK,IAEnE6C,EAAG1F,QAAQsE,SAASM,SAASK,aAAaF,MAAQW,EAAG1F,QAAQjB,SAc7D0G,GAAe,KACd,CAACE,IAEJjG,aAAS,YAAe,EAAZuG,MAMV,GAAIpH,GAAUA,EAAOmB,QAAS,CAC5B,IAAMkG,EAAY,IAAIvB,UACtB9F,EAAOmB,QAAQmG,iBAAiBD,GAChCR,EAAG1F,QAAQ2C,OAAOuD,OAKtB,IAAME,EAASzE,IAAM0E,aAAY,SAAgBC,GAC/CZ,EAAG1F,QAAUsG,EAET9E,IACFA,EAAIxB,QAAUsG,KAEf,CAAC9E,IAWJ,OACE,oCAUE,0BAAMA,IAAK4E,EAAQrH,SAAUA,GAC3B,sCAAkBE,KAAM,CAAC,IAAM,GAAK,GAAI,GAAI,GAAG,GAAOD,OAAO,aAE7D,yCACEA,OAAO,WACPuH,4BAA2BrH,EAC3BsH,6BAA4BhB,EAAc,EAAI,EAC9CiB,4BAA2B,WChG9B,SAASC,EAAT,GAAyC,IAAdhF,EAAa,EAAbA,UAC1Bc,EAAO/C,iBAAOiC,EAAUT,KAAI,kBAAMwB,0BAElCkE,EAAQC,mBAAQ,kBAAMlF,EAAUT,KAAI,WAAwC8B,GAAQ,IAA7ChE,EAA4C,EAA5CA,SAAUkE,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,YACjE,OAAKD,EAEH,2BAAOI,IAAKN,GACV,0BACEvB,IAAKgB,EAAKxC,QAAQ+C,GAClBhE,SAAU,CAAe,GAAdA,EAAS,GAAuB,GAAdA,EAAS,GAAuB,GAAdA,EAAS,MAG1D,kBAAC,EAAD,CACEA,SAAU,CAAe,IAAdA,EAAS,GAAyB,IAAdA,EAAS,GAAyB,IAAdA,EAAS,IAC5DG,MAAOgE,EAAc,EAAW,SAChCrE,OAAQ2D,EAAKxC,QAAQ+C,GACrBjE,UAAWoE,EAAc,EAAG,OAZV,2BAAOG,IAAKN,SAgBlC,CAACrB,IAEL,OACE,oCACGiF,GCpBA,SAASE,IACd,IAAMC,EAAQrH,mBADc,EAEImC,qBAFJ,mBAErBmF,EAFqB,KAEXC,EAFW,KAI5BtH,aAAS,WACP,IAAMgD,ECMe9C,KAAKC,OAAM,IAAIC,MAAOmH,UAAY,KAHpC,YAMA,EAAIrH,KAAKiD,GAAKjD,KAAKiD,GDRlCH,IAAMqE,IACVC,EAAYtE,GACZoE,EAAM9G,QAAQ+G,SAASG,EAAIxE,MAG7B,IACMhB,EAAYyF,EACfC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,UACdrG,KAAI,WAA6B8B,GAAO,IAAjCwE,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,IAAKxE,EAAsB,EAAtBA,KAAMsE,EAAgB,EAAhBA,OAAgB,ECZrC,SAAkCC,EAAKC,GAG5C,MAAO,CAFa5H,KAAKiD,IAAM0E,EAAM,EAAI,GAAKA,EAAM,GAAK3H,KAAK6H,IAAIF,IAAQ,IAC1D,EAAI3H,KAAKiD,IAAM2E,GAAO,EAAIA,EAAM,IAAM5H,KAAK6H,IAAID,IAAQ,KDW/CE,CAAwBH,EAAKC,GADX,mBAEhCzI,EC1BL,SAAqC4I,EAAQC,EAAaC,GAM/D,IAAMC,EAAIH,EAAS/H,KAAKmI,IAAIH,GAAehI,KAAKoI,IAAIH,GAC9CI,EAAIN,EAAS/H,KAAKmI,IAAIH,GAAehI,KAAKmI,IAAIF,GAEpD,MAAO,EAAEC,EADCH,EAAS/H,KAAKoI,IAAIJ,GACbK,GDiBMC,CALN,EAG2B,WAQtC,MAAO,CACLZ,SACAvI,WACAiE,OACAC,cATO,YAAOkF,UAAP,YAAkBpJ,IACN8G,cAAa,IAAIuC,WAAUC,cAActB,IAC/Be,EAAI,IAQjC5E,YAPcH,EAAI,IAAM,IACK,IAAIjD,MAAOwI,aAAe,IAAM,MAUnE,OACE,2BAAO9G,IAAKsF,GACV,kBAACrF,EAAD,CAAuBC,UAAWA,EAAU0F,QAAO,kBAA2B,gBAA3B,EAAGE,YACtD,kBAAClD,EAAD,CAAuB1C,UAAWA,EAAU0F,QAAO,kBAA2B,gBAA3B,EAAGE,YACtD,kBAACZ,EAAD,CAAgBhF,UAAWA,KE1C1B,SAAS6G,IAAqB,IAC3BC,EAAaC,cAAbD,SACR,OACE,kBAAC,IAAD,CAAME,QAAM,GACV,yBAAKhK,UAAU,WACb,yBAAKiK,MAAM,6BAA6BC,WAAW,+BAA+BC,QAAQ,eACxF,2FACA,8BACE,0BAAMC,EAAE,sFAAsFC,GAAG,cAC/F,sCACEC,cAAc,YACdC,MAAM,KACNC,IAAI,MACJpE,KAAK,SACLqE,KAAK,YACLC,GAAG,cACHC,YAAY,iBAIhB,0BAAM3K,UAAU,WAAWoJ,EAAE,MAAMZ,EAAE,MAAMoC,iBAAiB,SAASC,WAAW,UAAhF,WAAkG3J,KAAK4J,MAAMhB,GAA7G,KACA,0BAAMiB,GAAG,KAAKC,WAAW,QACvB,8BAAUhL,UAAU,cAAciL,UAAU,eAA5C,gECbd,SAASC,IACP,OACE,oCACE,kBAACC,EAAD,MACA,kBAAC,IAAD,CACEC,iBAAe,EACfC,YAAU,EACVC,GAAI,CAAEC,WAAW,EAAMC,YAAaC,qBACpC9I,MAAO,CAAE+I,WAAY,YAErB,6BAASpL,OAAO,MAAMC,KAAM,CAAC,UAAW,OACxC,kBAACoL,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,kBAAC/B,EAAD,OAClB,kBAAC1B,EAAD,OAEF,kBAAC,IAAD,CAAe0D,WAAW,EAAOC,UAAW,KAC5C,kBAAC,IAAD,CAAOC,OAAQ,EAAGC,WAAY,KAC9B,kBAAC,IAAD,QAMR,IAAMC,EAAchK,SAASiK,eAAe,QAC5CC,IAASvD,OAAO,kBAACsC,EAAD,MAASe,K","file":"static/js/main.1e0bc769.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  return (\n    <div className=\"credits\">\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Sunrise / Sunset\n      </a>\n      <br />\n      <a\n        rel=\"noopener noreferrer\"\n        href=\"https://bortolamigallery.com/artist/madeline-hollander/bio/\"\n        target=\"_blank\"\n      >\n        Madeline Hollander\n      </a>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.3} />\n      <mesh position={[-200, -10, 0]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[4, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"#FFFF99\" fog={false} />\n      </mesh>\n      <directionalLight\n        intensity={0.6}\n        position={[-1, 0, 0]}\n        color={0xfffdf2}\n      />\n    </group>\n  );\n};\n","import React, { useEffect, useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Html } from \"drei\";\nimport { CubeTexture } from \"three\";\n\nconst corsProxy = 'https://cors-anywhere.services.computerlab.io';\n\nexport function WebcamImageManager ({ src, handleUpdateCubeMap }) {\n  const imgRef = useRef();\n\n  useFrame(() => {\n    const newSrc = `${corsProxy}/${src}&rand=${Math.floor(new Date().getTime() / 1000)}`\n    if (newSrc !== imgRef.current.src) imgRef.current.src = newSrc\n  })\n\n  useEffect(() => {\n    imgRef.current.onload = () => {\n      const inputWidth = imgRef.current.naturalWidth;\n      const inputHeight = imgRef.current.naturalHeight;\n\n      // const dy = inputHeight / 3;\n      // const dx = Math.floor(inputWidth / 3);\n\n      // get the aspect ratio of the input image\n      const inputImageAspectRatio = inputWidth / inputHeight;\n      const outputImageAspectRatio = 1;\n\n      // if it's bigger than our target aspect ratio\n      let outputWidth = inputWidth;\n      let outputHeight = inputHeight;\n      if (inputImageAspectRatio > outputImageAspectRatio) {\n        outputWidth = inputHeight * outputImageAspectRatio;\n      } else if (inputImageAspectRatio < outputImageAspectRatio) {\n        outputHeight = inputWidth / outputImageAspectRatio;\n      }\n\n      const outputImage = document.createElement('canvas');\n\n      // let ctx\n      // const emptySmallImage = document.createElement('canvas');\n      // emptySmallImage.width = dx;\n      // emptySmallImage.height = dx;\n      // // create a canvas that will present the output image\n      // const px = document.createElement('canvas');\n      // px.width = dx;\n      // px.height = dx;\n      // ctx = px.getContext('2d')\n      // ctx.drawImage(imgRef.current, 2 * dx, 0, dx, dx, 0, 0, dx, dx);\n      // const nx = document.createElement('canvas');\n      // nx.width = dx;\n      // nx.height = dx;\n      // ctx = nx.getContext('2d')\n      // ctx.drawImage(imgRef.current, 0, 0, dx, dx, 0, 0, dx, dx);\n      // const pz = document.createElement('canvas');\n      // pz.width = dx;\n      // pz.height = dx;\n      // ctx = pz.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const py = document.createElement('canvas');\n      // py.width = dx;\n      // py.height = dx;\n      // ctx = py.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 0, dx, dx, 0, 0, dx, dx);\n      // const ny = document.createElement('canvas');\n      // ny.width = dx;\n      // ny.height = dx;\n      // ctx = ny.getContext('2d')\n      // ctx.drawImage(imgRef.current, dx, 2 * dx, dx, dx, 0, 0, dx, dx);\n\n\n      // const emptyImage = document.createElement('canvas');\n\n      // set it to the same size as the image\n      outputImage.width = outputWidth;\n      outputImage.height = outputHeight;\n      // emptyImage.width = outputWidth;\n      // emptyImage.height = outputHeight;\n\n      // draw our image at position 0, 0 on the canvas\n      let ctx = outputImage.getContext('2d');\n      ctx.drawImage(imgRef.current, 0, 0);\n\n      // show both the image and the canvas\n\n      // const map = new CubeTexture(\n      //   [px, nx, emptySmallImage, emptySmallImage, pz, pz ]\n      // )\n\n      const map = new CubeTexture(\n        [outputImage, outputImage, outputImage, outputImage, outputImage, outputImage ]\n      )\n      map.needsUpdate = true;\n      handleUpdateCubeMap(map)\n    }\n  }, [handleUpdateCubeMap])\n\n\n  return (\n    <Html>\n      <img alt='nyc traffic cam' style={{ display: 'none' }} crossOrigin=\"anonymous\" ref={imgRef} src={`${corsProxy}/${src}`} />\n    </Html>\n  )\n}\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco, Detailed } from \"drei\";\nimport { BackSide } from \"three\";\nimport { WebcamImageManager } from \"../../WebcamImageManager\";\nimport { HEADLIGHT_BODY_COLOR, BODY_HIGHLIGHT_COLOR } from \"../../../constants\"\n\nconst hkSrc = 'https://tdcctv.data.one.gov.hk/K107F.JPG?';\nconst nycSrc = 'http://207.251.86.238/cctv884.jpg?';\n\nexport function EightSeriesHeadlights ({ locations }) {\n  const [nycCubeMap, setNycCubeMap] = React.useState(null)\n  const [hkCubeMap, setHkCubeMap] = React.useState(null)\n\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-simplified.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: midDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-mid-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/eight-series-headlight-very-low-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff }, i) => {\n    const envMap = {\n      \"New York City\": nycCubeMap,\n      'Mexico City': nycCubeMap,\n      \"Hong Kong\": hkCubeMap,\n      \"Qingdao\": hkCubeMap,\n      \"Seoul\": hkCubeMap,\n      \"Dhaka\": hkCubeMap,\n    }\n    return (\n      <group scale={[0.02, 0.02, 0.02 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh visible geometry={nodes['visor'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            envMap={envMap[name]}\n            envMapIntensity={1.5}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transmission={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <Detailed distances={[0, 2.5, 5]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={midDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh>\n            <mesh visible geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={0xddeeff}\n                roughness={0.2}\n                metalness={0.8}\n                emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n                opacity={1}\n                transparent\n                transmission={0.94}\n                depthWrite={false}\n              />\n            </mesh>\n            <mesh visible geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={0xddeeff}\n                roughness={0.2}\n                metalness={0.8}\n                emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n                opacity={1}\n                transparent\n                transmission={0.4}\n                depthWrite={false}\n                side={BackSide}\n              />\n            </mesh>\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['griddy-thing'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.2}\n              metalness={0.8}\n              emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <mesh visible geometry={nodes['bulbs'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color={0xaaaaff}\n            roughness={0.3}\n            metalness={0.5}\n            emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n          />\n        </mesh>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['top-light'].geometry}>\n            <meshPhysicalMaterial\n              attach=\"material\"\n              color={0xddffff}\n              roughness={0.1}\n              metalness={0.8}\n              emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n              opacity={1}\n              transparent\n              transmission={0.5}\n              depthWrite={false}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddffff}\n              roughness={0.1}\n              metalness={0.8}\n              emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['complex--inner-thing-1'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['complex--inner-thing-1'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.6}\n              metalness={0.5}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['complex-inner-thing-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.3}\n              metalness={0.5}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['complex-inner-thing-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.3}\n              metalness={0.5}\n            />\n          </mesh>\n        </Detailed>\n      </group>\n    )})\n  return (\n    <group>\n      <WebcamImageManager src={nycSrc} handleUpdateCubeMap={setNycCubeMap} />\n      <WebcamImageManager src={hkSrc} handleUpdateCubeMap={setHkCubeMap} />\n      {meshObjects}\n    </group>\n  );\n}\n","// colors\nexport const HEADLIGHT_BODY_COLOR = 0x535663\nexport const TURN_SIGNAL_COLOR = 0xffdb1d;\nexport const BODY_HIGHLIGHT_COLOR = 0x0a25ad;\nexport const BODY_DARK_COLOR = 0x040509;\nexport const LED_BEAM_COLOR = 0xEEF1FF;\n","import React, { useEffect, useRef, createRef } from 'react'\nimport { useLoader } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { draco, Detailed } from \"drei\";\nimport { BackSide } from \"three\";\nimport { HEADLIGHT_BODY_COLOR, BODY_HIGHLIGHT_COLOR, BODY_DARK_COLOR } from \"../../../constants\"\n\nexport function ThreeSeriesHeadlights ({ locations }) {\n  const { nodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/series-3.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const { nodes: lowDetailNodes } = useLoader(\n    GLTFLoader,\n    process.env.PUBLIC_URL + \"/series-3-low-lod.glb\",\n    draco(process.env.PUBLIC_URL + \"/draco-gltf/\")\n  );\n\n  const refs = useRef(locations.map(() => createRef()))\n\n  useEffect(() => {\n    for (const r of refs.current) {\n      r.current.lookAt(0,0,0)\n      // r.current.rotateX(Math.PI / 2)\n      r.current.rotateY( 5.6 * Math.PI / 4)\n      // r.current.rotateZ(Math.PI / 4)\n    }\n  }, [])\n\n  const meshObjects = locations.map(({ position, name, onDarkSide, blinkingOff }, i) => {\n    return (\n      <group scale={[0.02, 0.02, 0.02 ]} key={name} position={position} ref={refs.current[i]}>\n        <mesh visible geometry={lowDetailNodes['visor'].geometry}>\n          <meshPhysicalMaterial\n            attach=\"material\"\n            color={0xeeeeee}\n            roughness={0.05}\n            clearcoat={0.9}\n            metalness={0.9}\n            opacity={1}\n            transmission={0.6}\n            transparent\n            depthWrite={false}\n          />\n        </mesh>\n        <mesh visible geometry={nodes['bulbs_0'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.3}\n            metalness={0.5}\n            emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n          />\n        </mesh>\n        <mesh visible geometry={nodes['bulbs_1'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.3}\n            metalness={0.5}\n            emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n          />\n        </mesh>\n        <mesh visible geometry={nodes['bulbs_2'].geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            roughness={0.3}\n            metalness={0.5}\n            emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n          />\n        </mesh>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n              // map={nodes['headlight-simpler'].material.map}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['headlight-simpler'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.3}\n              metalness={0.7}\n              // lightMap={nodes['headlight-simpler'].material.map}\n              lightMapIntensity={2}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh>\n            <mesh visible geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={HEADLIGHT_BODY_COLOR}\n                roughness={0.2}\n                metalness={0.8}\n                emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n                opacity={1}\n                transparent\n                transmission={0.94}\n                depthWrite={false}\n              />\n            </mesh>\n            <mesh visible geometry={nodes['griddy-thing'].geometry}>\n              <meshPhysicalMaterial\n                attach=\"material\"\n                color={0xddeeff}\n                roughness={0.2}\n                metalness={0.8}\n                emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n                opacity={1}\n                transparent\n                transmission={0.4}\n                depthWrite={false}\n                side={BackSide}\n              />\n            </mesh>\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['griddy-thing'].geometry}>\n            <meshPhysicalMaterial\n              attach=\"material\"\n              color={0xddeeff}\n              roughness={0.2}\n              metalness={0.8}\n              emissive={onDarkSide && !blinkingOff ? 0xaaaaff : 0x000000}\n              opacity={1}\n              transparent\n              transmission={0.4}\n              depthWrite={false}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 3]}>\n          <mesh visible geometry={nodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xeeffff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n              // map={nodes['top-light-2'].material.map}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['top-light-2'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={0xddddff}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n              // map={nodes['outer-liner'].material.map}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['outer-liner'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_DARK_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['hanger'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['griddy-thing-case'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n              map={nodes['griddy-thing-case'].material.map}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['griddy-thing-case'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={HEADLIGHT_BODY_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n        <Detailed distances={[0, 6]}>\n          <mesh visible geometry={nodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              roughness={0.1}\n              metalness={0.8}\n              color={BODY_HIGHLIGHT_COLOR}\n              // map={nodes['inner-body'].material.map}\n            />\n          </mesh>\n          <mesh visible geometry={lowDetailNodes['inner-body'].geometry}>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={BODY_HIGHLIGHT_COLOR}\n              roughness={0.1}\n              metalness={0.8}\n            />\n          </mesh>\n        </Detailed>\n      </group>\n    )})\n  return (\n    <group>\n      {meshObjects}\n    </group>\n  );\n}\n","// adapted from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport * as THREE from \"three\";\n\n/**\n * from http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\n * @return {[type]} [description]\n */\nconst VolumetricSpotLightMaterial = function() {\n  //\n  var vertexShader = [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vWorldPosition;\",\n\n    \"void main(){\",\n    \"// compute intensity\",\n    \"vNormal\t\t= normalize( normalMatrix * normal );\",\n\n    \"vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\",\n    \"vWorldPosition\t\t= worldPosition.xyz;\",\n\n    \"// set gl_Position\",\n    \"gl_Position\t= projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\");\n  var fragmentShader = [\n    \"varying vec3\t\tvNormal;\",\n    \"varying vec3\t\tvWorldPosition;\",\n\n    \"uniform vec3\t\tlightColor;\",\n\n    \"uniform vec3\t\tspotPosition;\",\n\n    \"uniform float\t\tattenuation;\",\n    \"uniform float\t\tanglePower;\",\n\n    \"void main(){\",\n    \"float intensity;\",\n\n    //////////////////////////////////////////////////////////\n    // distance attenuation\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"intensity\t= distance(vWorldPosition, spotPosition)/attenuation;\",\n    \"intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\",\n\n    //////////////////////////////////////////////////////////\n    // intensity on angle\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n    \"vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\",\n    \"float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\",\n    \"intensity\t= intensity * angleIntensity;\",\n    // 'gl_FragColor\t= vec4( lightColor, intensity );',\n\n    //////////////////////////////////////////////////////////\n    // final color\t\t\t\t\t\t//\n    //////////////////////////////////////////////////////////\n\n    // set the final color\n    \"gl_FragColor\t= vec4( lightColor, intensity);\",\n    \"}\"\n  ].join(\"\\n\");\n\n  // create custom material from the shader code above\n  //   that is within specially labeled script tags\n  var material = new THREE.ShaderMaterial({\n    uniforms: {\n      attenuation: {\n        type: \"f\",\n        value: 5.0\n      },\n      anglePower: {\n        type: \"f\",\n        value: 1.2\n      },\n      spotPosition: {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        type: \"c\",\n        value: new THREE.Color(\"cyan\")\n      }\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side\t\t: THREE.DoubleSide,\n    // blending\t: THREE.AdditiveBlending,\n    transparent: true,\n    depthWrite: false\n  });\n  return material;\n};\n\nexport default VolumetricSpotLightMaterial;\n","import React, { useEffect, useState } from \"react\";\n\n// from https://github.com/jeromeetienne/threex.volumetricspotlight\nimport { useThree, useFrame, extend } from \"react-three-fiber\";\nimport VolumetricSpotlight from \"../../../lib/volumetric-spotlight\";\nimport * as THREE from \"three\";\n\nextend({\n  VolumetricSpotlight\n});\n\n\n\nexport const MyVolumetricSpotlight = React.forwardRef(function MyVolumetricSpotlight(props, ref) {\n  const [initialized, setInitialized] = useState(false);\n  const vs = React.useRef();\n\n  const { scene } = useThree();\n\n  const {\n    color,\n    position,\n    target\n  } = props;\n\n  // INIT\n  useEffect(() => {\n    // scene.add(spotlight.current.target);\n\n    const geometry = vs.current.geometry;\n\n    geometry.applyMatrix4(\n      new THREE.Matrix4().makeTranslation(0, -geometry.parameters.height / 2, 0)\n    );\n    geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(-Math.PI / 2));\n\n    vs.current.material.uniforms.spotPosition.value = vs.current.position;\n\n    // spotlight.current.position.copy(vs.current.position);\n    // spotlight.current.position.copy(vs.current.position);\n    // // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    // if (target && target.current) {\n    //   const targetPos = new THREE.Vector3();\n    //   target.current.getWorldPosition(targetPos) ;\n    //   vs.current.lookAt(targetPos);\n    //   spotlight.current.target.position.copy(targetPos);\n    // }\n    setInitialized(true);\n  }, [scene]);\n\n  useFrame(({ clock }) => {\n    // spotlight.current.position.copy(vs.current.position);\n    // @todo fix this\n    // vs.current.material.uniforms.lightColor.value = spotlight.current.color;\n\n\n    if (target && target.current) {\n      const targetPos = new THREE.Vector3();\n      target.current.getWorldPosition(targetPos) ;\n      vs.current.lookAt(targetPos);\n      // spotlight.current.target.position.copy(targetPos);\n    }\n  });\n\n  const setRef = React.useCallback(function setRef(el) {\n    vs.current = el;\n\n    if (ref) {\n      ref.current = el;\n    }\n  }, [ref]);\n\n  // // maps spotlight angle to volueme cylinder every frame\n  // // it would be better to do it on a need-to basis\n  // // but it doesn't play nice with react-spring\n  // useFrame(() => {\n  //   const angle = spotlight.current.angle;\n\n  //   // vs.current.scale.set(1.25 * angle, 1 * angle, 1);\n  // });\n\n  return (\n    <>\n      {/* <spotLight */}\n      {/*   ref={spotlight} */}\n      {/*   intensity={initialized ? intensity : 0} */}\n      {/*   angle={angle} */}\n      {/*   penumbra={penumbra} */}\n      {/*   distance={distance} */}\n      {/*   color={color} */}\n      {/* /> */}\n\n      <mesh ref={setRef} position={position}>\n        <cylinderGeometry args={[0.05, 0.5, 10, 12, 4, true]} attach=\"geometry\" />\n\n        <volumetricSpotlight\n          attach=\"material\"\n          uniforms-lightColor-value={color}\n          uniforms-attenuation-value={initialized ? 6 : 1} // as porportion to height of cylinder\n          uniforms-anglePower-value={1.2}\n        />\n      </mesh>\n    </>\n  );\n});\n","import React, { useRef, createRef, useMemo } from \"react\";\n\nimport { MyVolumetricSpotlight } from \"./VolumetricSpotlight\";\n\n\n\nexport function HeadlightBeams ({ locations }) {\n  const refs = useRef(locations.map(() => createRef()))\n\n  const beams = useMemo(() => locations.map(({ position, onDarkSide, blinkingOff }, i ) => {\n    if (!onDarkSide) return <group key={i} />\n    return (\n      <group key={i}>\n        <mesh\n          ref={refs.current[i]}\n          position={[position[0] * 10, position[1] * 10, position[2] * 10]}\n        >\n        </mesh>\n        <MyVolumetricSpotlight\n          position={[position[0] * 0.97, position[1] * 0.97, position[2] * 0.97]}\n          color={blinkingOff ? 0x000000 : 0xccccef}\n          target={refs.current[i]}\n          intensity={blinkingOff ? 0 :100}\n        />\n      </group>\n    )\n  }), [locations])\n\n  return (\n    <>\n      {beams}\n    </>\n  );\n};\n","import React, { useRef, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Vector3, Matrix4 } from 'three';\n\nimport { sphericalCoordsToCartesian, latlngToSphericalCoords, calculateAngleForTime } from \"../../lib\";\nimport cities from \"../../lib/cities.json\";\nimport { EightSeriesHeadlights } from \"./Headlights/EightSeriesHeadlights\";\nimport { ThreeSeriesHeadlights } from \"./Headlights/ThreeSeriesHeadlights\";\nimport { HeadlightBeams } from \"./Headlights/HeadlightBeams\";\n\nexport function LightGlobe () {\n  const group = useRef();\n  const [rotation, setRotation] = useState()\n\n  useFrame(() => {\n    const r = calculateAngleForTime()\n    if (r === rotation) return\n    setRotation(r)\n    group.current.rotation.y = r\n  });\n\n  const RADIUS = 3;\n  const locations = cities\n    .filter(c => c.render)\n    .map(({ lat, lng, name, render }, i) => {\n      const [inc, azm ] = latlngToSphericalCoords(lat, lng)\n      const position = sphericalCoordsToCartesian(RADIUS, inc, azm);\n      const pos = new Vector3(...position)\n      const worldPos = pos.applyMatrix4(new Matrix4().makeRotationY(rotation))\n      const onDarkSide = !!(worldPos.x > 0.1)\n      const blinker = i % 3 === 0\n      const blinkingOff = blinker && new Date().getSeconds() % 2 === 0\n      return {\n        render,\n        position,\n        name,\n        onDarkSide,\n        blinkingOff\n      }\n    })\n\n  return (\n    <group ref={group}>\n      <EightSeriesHeadlights locations={locations.filter(({ render }) => render === 'EightSeries')} />\n      <ThreeSeriesHeadlights locations={locations.filter(({ render }) => render === 'ThreeSeries')} />\n      <HeadlightBeams locations={locations} />\n    </group>\n  );\n};\n","export function sphericalCoordsToCartesian (radius, inclination, azimuth) {\n  /*\n   * Inclination is in the range [0, pi], from straight up (the zenith)\n   * Azimuth is in the range [0, 2pi], from the x axis\n   * See: https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates\n   */\n  const x = radius * Math.sin(inclination) * Math.cos(azimuth);\n  const z = radius * Math.sin(inclination) * Math.sin(azimuth);\n  const y = radius * Math.cos(inclination);\n  return [-x, y, z];\n}\n\nexport function latlngToSphericalCoords (lat, lng) {\n  const inclination = Math.PI * (lat > 0 ? 90 - lat : 90 + Math.abs(lat)) / 180;\n  const azimuth = 2 * Math.PI * (lng >= 0 ? lng : 360 - Math.abs(lng)) / 360; \n  return [inclination, azimuth];\n}\n\nconst SECONDS_IN_DAY = 24 * 60 * 60;\n\nexport function calculateAngleForTime () {\n  const unixEraSeconds = Math.floor(new Date().valueOf() / 1000);\n  const secondsElapsedInDay = unixEraSeconds % SECONDS_IN_DAY;\n  const dayProgress = secondsElapsedInDay / SECONDS_IN_DAY;\n  return dayProgress * 2 * Math.PI + Math.PI;\n}\n\n","import React from 'react';\nimport { Html, useProgress } from \"drei\";\n\nexport function LoadingIndicator () {\n  const { progress } = useProgress()\n  return (\n    <Html center>\n      <div className='loading'>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 500 500\">\n          <title>TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</title>\n          <defs>\n            <path d=\"M50,250c0-110.5,89.5-200,200-200s200,89.5,200,200s-89.5,200-200,200S50,360.5,50,250\" id=\"textcircle\">\n              <animateTransform\n                attributeName=\"transform\"\n                begin=\"0s\"\n                dur=\"30s\"\n                type=\"rotate\"\n                from=\"0 250 250\"\n                to=\"360 250 250\"\n                repeatCount=\"indefinite\" \n              />\n              </path>\n            </defs>\n            <text className=\"progress\" x=\"50%\" y=\"50%\" dominantBaseline=\"middle\" textAnchor=\"middle\">Loading {Math.round(progress)}%</text>    \n            <text dy=\"70\" textLength=\"1220\">\n              <textPath className=\"circle-text\" xlinkHref=\"#textcircle\">TOMORROW WILL BE NOTHING LIKE TODAY WILL BE NOTHING LIKE</textPath>\n            </text>\n          </svg>\n        </div>\n      </Html>\n  )\n\n}\n","import \"./styles.css\";\n\nimport React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Credits from \"./components/Credits\";\nimport { Canvas } from \"react-three-fiber\";\nimport { CineonToneMapping } from \"three\";\nimport Lights from \"./components/Lights\";\nimport { LightGlobe } from \"./components/LightGlobe/LightGlobe\";\nimport { OrbitControls, Stars, Stats } from \"drei\";\nimport { LoadingIndicator } from './components/LoadingIndicator';\n\nfunction App() {\n  return (\n    <>\n      <Credits/>\n      <Canvas\n        colorManagement\n        concurrent\n        gl={{ antialias: true, toneMapping: CineonToneMapping }}\n        style={{ background: '#020202' }}\n      >\n        <fogExp2 attach=\"fog\" args={[\"#020202\", 0.15]} />\n        <Lights />\n        <Suspense fallback={<LoadingIndicator />}>\n          <LightGlobe />\n        </Suspense>\n        <OrbitControls enablePan={false} zoomSpeed={0.5} />\n        <Stars factor={2} saturation={0.7} />\n        <Stats />\n      </Canvas>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}